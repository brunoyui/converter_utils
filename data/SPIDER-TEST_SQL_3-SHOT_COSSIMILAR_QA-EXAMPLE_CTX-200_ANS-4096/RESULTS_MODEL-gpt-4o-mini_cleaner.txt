SELECT COUNT(*) AS end_trip_count FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) AS event_count FROM event_log WHERE activity = 'End trip';
SELECT count(*) FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) AS end_trip_count FROM event_log WHERE activity = 'End trip';
SELECT count(*) AS occurrence_count FROM event_log WHERE activity = 'End trip';
SELECT COUNT(*) AS end_trip_count FROM event_log WHERE activity = 'End trip';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE resource = 'James' AND activity = 'End trip';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James';
SELECT COUNT(*) AS event_count, resource FROM event_log GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS resource_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS occurrence_count FROM event_log GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS activity_performance_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(activity) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS action_count FROM event_log WHERE activity LIKE '%travel declaration%' GROUP BY resource;
SELECT count(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS activity_count FROM event_log WHERE resource = 'Peter';
SELECT count(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS activity_count, activity FROM event_log WHERE resource = 'Peter' GROUP BY activity;
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS actions_taken FROM event_log WHERE resource = 'Peter';
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) >= '2018-03-01' AND MAX(timestamp) < '2018-04-01';
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) >= '2018-03-01' AND MAX(timestamp) < '2018-04-01';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Terminate' AND timestamp BETWEEN '2018-03-01' AND '2018-03-31'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End Case' AND timestamp BETWEEN '2018-03-01' AND '2018-03-31'
SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m', MAX(timestamp)) = '2018-03';
SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) >= '2018-03-01' AND MAX(timestamp) < '2018-04-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) >= '2018-03-01' AND MAX(timestamp) < '2018-04-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING max(timestamp) < '2018-04-01' AND max(timestamp) >= '2018-03-01';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource <> 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource <> 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by pre-approver' AND resource <> 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource <> 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource <> 'Douglas';
SELECT * FROM event_log WHERE activity = 'Declaration rejected by pre-approver' AND resource != 'Douglas';
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) AS number_of_people FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) AS unique_resources FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) AS different_resources FROM event_log;
SELECT COUNT(DISTINCT resource) AS unique_resource_count FROM event_log;
SELECT COUNT(DISTINCT resource) AS different_people_count FROM event_log;
SELECT COUNT(DISTINCT resource) AS number_of_employees FROM event_log;
SELECT COUNT(DISTINCT resource) AS number_of_employees FROM event_log WHERE activity LIKE '%process%'; -- Adjust the condition based on the actual activity names related to processing declarations
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource;
SELECT DISTINCT idcase FROM event_log WHERE cost > 2225;
SELECT DISTINCT idcase FROM event_log WHERE cost > 2225;
SELECT idcase FROM event_log WHERE cost > 2225;
SELECT DISTINCT idcase FROM event_log WHERE cost > 2225;
SELECT DISTINCT idcase FROM event_log WHERE cost > 2225;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource HAVING COUNT(*) = ( SELECT MAX(event_count) FROM ( SELECT COUNT(*) AS event_count FROM event_log GROUP BY resource ) AS subquery );
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource HAVING COUNT(*) = ( SELECT MAX(event_count) FROM ( SELECT COUNT(*) AS event_count FROM event_log GROUP BY resource ) AS subquery );
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource HAVING COUNT(*) = ( SELECT MAX(event_count) FROM ( SELECT COUNT(*) AS event_count FROM event_log GROUP BY resource ) AS subquery );
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity LIKE '%processing declaration%' -- Adjust this condition based on the actual activity name GROUP BY resource ORDER BY activity_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource HAVING COUNT(*) = ( SELECT MAX(event_count) FROM ( SELECT COUNT(*) AS event_count FROM event_log GROUP BY resource ) AS subquery );
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource HAVING COUNT(*) = ( SELECT MAX(event_count) FROM ( SELECT COUNT(*) AS event_count FROM event_log GROUP BY resource ) AS subquery );
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(DISTINCT idcase) AS actions_count FROM event_log GROUP BY resource ORDER BY actions_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS performance_count FROM event_log GROUP BY resource ORDER BY performance_count DESC;
SELECT resource, COUNT(*) AS action_count FROM event_log WHERE activity LIKE '%declaration%' GROUP BY resource ORDER BY action_count DESC;
SELECT * FROM event_log WHERE cost IS NOT NULL AND cost <> 0;
SELECT * FROM event_log WHERE cost > 0;
SELECT * FROM event_log WHERE cost > 0;
SELECT * FROM event_log WHERE cost IS NOT NULL AND cost <> 0;
SELECT * FROM event_log WHERE cost IS NOT NULL AND cost <> 0;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT id, activity, resource, cost, idcase FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Request payment';
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Request payment';
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Request payment' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Start trip', 'Request payment');
SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE activity = 'Start trip' UNION ALL SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE activity = 'Request payment';
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY activity_count DESC LIMIT 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY activity_count DESC;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY activity_count DESC;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) = ( SELECT MAX(activity_count) FROM ( SELECT COUNT(*) AS activity_count FROM event_log GROUP BY activity ) );
SELECT activity FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity, COUNT(*) AS occurrence_count FROM event_log GROUP BY activity ORDER BY occurrence_count DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY activity_count DESC;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY activity_count DESC;
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT * FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT * FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31'
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2018-01-01' AND activity LIKE '%declaration%';
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity;
SELECT activity, COUNT(*) AS action_count FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING count(*) <= 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT resource FROM event_log GROUP BY resource ORDER BY COUNT(DISTINCT idcase) DESC LIMIT 5;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource ORDER BY case_count DESC LIMIT 5;
SELECT resource FROM event_log GROUP BY resource ORDER BY COUNT(DISTINCT idcase) DESC LIMIT 5;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource ORDER BY case_count DESC LIMIT 5;
SELECT resource, COUNT(DISTINCT idcase) AS declaration_count FROM event_log GROUP BY resource ORDER BY declaration_count DESC LIMIT 5;
SELECT resource FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 5;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 5;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 5;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 5;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'processing_declaration' -- Assuming 'processing_declaration' is the activity related to processing declarations GROUP BY resource ORDER BY activity_count DESC LIMIT 5;
SELECT resource, COUNT(*) AS start_trip_count FROM event_log WHERE activity = 'Start trip' AND strftime('%Y', timestamp) = '2016' GROUP BY resource;
SELECT resource, COUNT(*) AS start_trip_count FROM event_log WHERE activity = 'Start trip' AND strftime('%Y', timestamp) = '2016' GROUP BY resource;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Start trip' AND strftime('%Y', timestamp) = '2016' GROUP BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity = 'Start trip' AND timestamp >= '2016-01-01' AND timestamp < '2017-01-01' GROUP BY resource;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Start trip' AND strftime('%Y', timestamp) = '2016' GROUP BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity = 'Start trip' AND strftime('%Y', timestamp) = '2016' GROUP BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity = 'Start trip' AND strftime('%Y', timestamp) = '2016' GROUP BY resource;
SELECT COUNT(*) AS action_count, resource FROM event_log WHERE activity = 'Start trip' AND timestamp >= '2016-01-01' AND timestamp < '2017-01-01' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'Start trip' AND timestamp >= '2016-01-01' AND timestamp < '2017-01-01' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS occurrence_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS performance_count, resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS occurrence_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS performance_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS occurrence_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS performance_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS occurrence_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS occurrence_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS total_occurrences, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(*) AS rejection_count, resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(activity) > 20;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(activity) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(activity) = ( SELECT MAX(activity_count) FROM ( SELECT COUNT(activity) AS activity_count FROM event_log GROUP BY idcase ) AS activity_counts );
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 5;
SELECT idcase FROM ( SELECT idcase, MAX(strftime('%s', timestamp)) - MIN(strftime('%s', timestamp)) AS duration FROM event_log GROUP BY idcase ) AS case_durations ORDER BY duration DESC LIMIT 5;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(activity) DESC;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment');
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment');
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment');
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment');
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment') AND idcase IN (SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara');
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND activity = 'Declaration submitted by employee' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' );
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaration 143598';
SELECT * FROM event_log WHERE idcase = 'declaration 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-02'
SELECT cost FROM event_log WHERE idcase = 'declaration 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT cost FROM event_log WHERE idcase = 'declaration 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = '143598';
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS declaration_count FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT activity) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT activity) AS action_count FROM event_log GROUP BY idcase ORDER BY action_count DESC, idcase DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT activity) AS diversity_count FROM event_log GROUP BY idcase ORDER BY diversity_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 10;
SELECT idcase, COUNT(*) AS action_count FROM event_log GROUP BY idcase ORDER BY action_count DESC LIMIT 10;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY event_count DESC;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY action_count DESC;
SELECT idcase, id, activity, timestamp, resource, cost FROM event_log ORDER BY idcase, timestamp;
SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp;
SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp;
SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp;
SELECT idcase, activity, timestamp, resource, cost FROM event_log ORDER BY idcase, timestamp;
SELECT * FROM event_log ORDER BY idcase, timestamp;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource;
SELECT COUNT(*) AS total_count, resource FROM event_log WHERE activity = 'declaration approved by administration' GROUP BY resource;
SELECT COUNT(*) AS total_activities, resource FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource;
SELECT COUNT(*) AS occurrence_count, resource FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource;
SELECT COUNT(*) AS approval_count, resource FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource;
SELECT COUNT(*) AS approval_count, resource FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity ORDER BY activity_count DESC;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity ORDER BY activity_count DESC;
SELECT activity, COUNT(*) AS occurrences FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity ORDER BY occurrences DESC;
SELECT activity, COUNT(*) AS action_count FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity;
SELECT count(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT COUNT(*), activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity;
SELECT COUNT(*) AS activity_count FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT count(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT count(*) FROM event_log WHERE resource = 'Thomas' AND activity LIKE '%declaration%' AND timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT activity, MAX(timestamp) AS most_recent_date FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS most_recent_date FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS most_recent_performance_date FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_performance FROM event_log GROUP BY activity ORDER BY last_performance;
SELECT activity, MAX(timestamp) AS latest_performance FROM event_log GROUP BY activity ORDER BY latest_performance DESC;
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS most_recent_performance FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_action_date FROM event_log GROUP BY activity;
SELECT 'declaration approved by supervisor' AS activity, COUNT(*) AS count FROM event_log WHERE activity = 'declaration approved by supervisor' AND strftime('%Y', timestamp) IN ('2017', '2018') UNION ALL SELECT 'permit rejected by employee' AS activity, COUNT(*) AS count FROM event_log WHERE activity = 'permit rejected by employee' AND strftime('%Y', timestamp) IN ('2017', '2018');
SELECT COUNT(*) AS count, 'declaration approved by supervisor' AS activity FROM event_log WHERE activity = 'Declaration approved by supervisor' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31' UNION ALL SELECT COUNT(*) AS count, 'permit rejected by employee' AS activity FROM event_log WHERE activity = 'Permit rejected by employee' AND timestamp BETWEEN '2018-01-01' AND '2018-12-31';
SELECT COUNT(*) AS event_count, 'declaration approved by supervisor' AS activity FROM event_log WHERE activity = 'declaration approved by supervisor' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31' UNION ALL SELECT COUNT(*) AS event_count, 'permit rejected by employee' AS activity FROM event_log WHERE activity = 'permit rejected by employee' AND timestamp BETWEEN '2018-01-01' AND '2018-12-31';
SELECT SUM(CASE WHEN activity = 'Declaration approved by supervisor' AND strftime('%Y', timestamp) = '2017' THEN 1 ELSE 0 END) AS declaration_approved_2017, SUM(CASE WHEN activity = 'Permit rejected by employee' AND strftime('%Y', timestamp) = '2018' THEN 1 ELSE 0 END) AS permit_rejected_2018 FROM event_log;
SELECT SUM(CASE WHEN activity = 'Declaration approved by supervisor' AND strftime('%Y', timestamp) = '2017' THEN 1 ELSE 0 END) AS declaration_approved_2017, SUM(CASE WHEN activity = 'Permit rejected by employee' AND strftime('%Y', timestamp) = '2018' THEN 1 ELSE 0 END) AS permit_rejected_2018 FROM event_log;
SELECT To answer the question regarding how many declaration approvals made by the supervisor occurred in 2017 and how many permits were rejected by an employee in 2018, you can use the following SQL queries: 1. **Count of declaration approvals made by the supervisor in 2017:** You would need to filter the `event_log` table for activities related to declaration approvals by the supervisor and restrict the timestamps to the year 2017. 2. **Count of permits rejected by an employee in 2018:** Similarly, you would filter for activities related to permit rejections by employees and restrict the timestamps to the year 2018. Here’s how you can write the SQL query to achieve both counts in a single query: ```sql SELECT SUM(CASE WHEN activity = 'Declaration approved by supervisor' AND strftime('%Y', timestamp) = '2017' THEN 1 ELSE 0 END) AS approvals_2017, SUM(CASE WHEN activity
SELECT activity, timestamp AS performance_end_date, id AS event_identifier FROM event_log ORDER BY timestamp;
SELECT activity, timestamp AS performance_end_date, id FROM event_log ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity LIKE '%declaration%' ORDER BY timestamp;
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'Declaration submitted by employee';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'declaration submitted by employee';
SELECT count(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'declaration submitted by employee' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaration submitted by employee' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaration submitted by employee' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'Create Declaration';
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT * FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL AND activity LIKE '%declaration%'
SELECT activity, COUNT(*) AS event_count FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity;
SELECT activity FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL AND activity LIKE '%declaration%'
SELECT COUNT(DISTINCT resource) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 );
SELECT COUNT(DISTINCT resource) AS active_resources FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 );
SELECT COUNT(DISTINCT resource) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 );
SELECT COUNT(DISTINCT resource) AS number_of_resources FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 );
SELECT COUNT(DISTINCT resource) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 );
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaration rejected by pre-approver';
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity = 'Declaration final approved by director' AND timestamp >= '2017-01-01' AND timestamp < '2017-06-01';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaration final approved by director' AND timestamp >= '2017-01-01' AND timestamp < '2017-06-01';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaration final approved by director' AND timestamp >= '2017-01-01' AND timestamp < '2017-06-01';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaration final approved by director' AND timestamp >= '2017-01-01' AND timestamp < '2017-06-01';
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE strftime('%Y-%m', timestamp) = '2018-01' );
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE strftime('%Y-%m', timestamp) = '2018-01' );
SELECT DISTINCT e.idcase FROM event_log e WHERE e.resource = 'Charles' AND e.idcase NOT IN ( SELECT idcase FROM event_log WHERE strftime('%Y-%m', timestamp) = '2018-01' );
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-01-31' );
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND strftime('%Y-%m', timestamp) != '2018-01'
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase;
WITH RankedEvents AS ( SELECT idcase, MIN(timestamp) AS start_time, MAX(timestamp) AS end_time FROM event_log GROUP BY idcase ) SELECT idcase, (strftime('%s', end_time) - strftime('%s', start_time)) AS total_duration FROM RankedEvents;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration_seconds FROM event_log GROUP BY idcase;
SELECT idcase, (MAX(timestamp) - MIN(timestamp)) AS case_duration FROM event_log GROUP BY idcase;
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase;
SELECT To calculate the duration of processing for each declaration, you can follow a similar approach to the previous examples. You will need to find the start and end timestamps for each declaration and then compute the difference between them. Here's a SQL query that accomplishes this: ```sql WITH RankedEvents AS ( SELECT idcase, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp FROM event_log ), StartEndTimes AS ( SELECT idcase, MIN(timestamp) AS start_time, MAX(next_timestamp) AS end_time FROM RankedEvents WHERE activity IN ('Start processing', 'End processing') -- Adjust these activities based on your actual activity names GROUP BY idcase ) SELECT idcase, strftime('%s', end_time) - strftime('%s', start_time) AS
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp >= '2016-01-01' AND timestamp < '2018-01-01';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT idcase, timestamp FROM event_log WHERE activity = 'End trip' AND timestamp >= '2016-01-01' AND timestamp < '2018-01-01' ORDER BY timestamp;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE activity = 'End trip' AND timestamp >= '2016-01-01' AND timestamp < '2018-01-01' ORDER BY timestamp;
SELECT * FROM event_log WHERE activity LIKE '%rejected%'
SELECT * FROM event_log WHERE activity LIKE '%rejected%'
SELECT * FROM event_log WHERE activity LIKE '%rejected%'
SELECT * FROM event_log WHERE activity LIKE '%rejected%'
SELECT * FROM event_log WHERE activity LIKE '%rejected%'
SELECT * FROM event_log WHERE activity LIKE '%rejected%'
SELECT * FROM event_log WHERE activity IN ('Declaration rejected by pre-approver', 'Other rejection activities if any')
SELECT activity, COUNT(*) AS rejection_count, MIN(timestamp) AS first_rejection_time, MAX(timestamp) AS last_rejection_time FROM event_log WHERE activity LIKE '%rejected%' GROUP BY activity ORDER BY rejection_count DESC;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) > 0;
SELECT To answer the question of how long it took from the first event of a case to the event related to the activities indicating 'end trip', 'declaration rejected by employee', or 'payment handled', we can construct a SQL query that calculates the time difference between the first event's timestamp and the timestamps of the relevant activities. We will also return the case ID and the activity that marks the end of this interval. Here’s how you can write the SQL query: ```sql SELECT e.idcase, MIN(CASE WHEN p.activity = 'End trip' THEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) WHEN p.activity = 'Declaration rejected by employee' THEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) WHEN p.activity = 'Payment handled' THEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) END) AS time_taken
SELECT To show how long it took from the first event of a case to the event related to the 'end trip', 'declaration rejected by employee', or 'payment handled' activity, you can use the following SQL query. This query calculates the time difference between the first event of each case and the relevant activities, and it also returns the case ID and the activity that marks the end of the interval. ```sql SELECT e.idcase, MIN(CASE WHEN p.activity = 'End trip' THEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) END) AS 'End trip', MIN(CASE WHEN x.activity = 'Declaration rejected by employee' THEN strftime('%s', x.timestamp) - strftime('%s', e.start_time) END) AS 'Declaration rejected by employee', MIN(CASE WHEN y.activity = 'Payment handled' THEN strftime('%s', y.timestamp) - strftime('%s', e.start
SELECT To calculate the elapsed time from the first event to the event of interest associated with the activities 'end trip', 'declaration rejected by employee', or 'payment handled', you can use the following SQL query. This query retrieves the case ID, the activity of interest, and the calculated elapsed time for each case. ```sql SELECT e.idcase, COALESCE(f.activity, 'No relevant activity') AS activity, strftime('%s', COALESCE(f.timestamp, e.start_time)) - strftime('%s', e.start_time) AS elapsed_time FROM (SELECT MIN(timestamp) AS start_time, idcase FROM event_log GROUP BY idcase) e LEFT JOIN (SELECT idcase, activity, timestamp FROM event_log WHERE activity IN ('End trip', 'Declaration rejected by employee', 'Payment handled'))
SELECT To answer the question of how long it took between the first action taken on a declaration until an indication of the finalization of a trip, or until actions that indicate that the declaration was rejected by an employee or that a payment has already been made, you can use the following SQL query: ```sql SELECT e.idcase, MIN(CASE WHEN p.activity = 'End trip' THEN strftime('%s', p.timestamp) WHEN x.activity = 'Declaration rejected by employee' THEN strftime('%s', x.timestamp) WHEN y.activity = 'Payment handled' THEN strftime('%s', y.timestamp) END) - strftime('%s', f.first_action) AS time_taken FROM (SELECT idcase, MIN(timestamp) AS first_action FROM event_log GROUP BY idcase) f LEFT JOIN event_log p ON p.idcase = f.idcase
SELECT To answer the question of how long it took from the first intervention on a declaration to the intervention that indicates the end of the trip, or to those that indicate that the declaration was rejected by an employee or that indicate that a payment has already been made, you can use the following SQL query: ```sql SELECT e.idcase, MIN(CASE WHEN e.activity = 'End trip' THEN strftime('%s', e.timestamp) END) - strftime('%s', f.start_time) AS 'Time to End Trip', MIN(CASE WHEN e.activity = 'Declaration rejected by employee' THEN strftime('%s', e.timestamp) END) - strftime('%s', f.start_time) AS 'Time to Declaration Rejected', MIN(CASE WHEN e.activity = 'Payment handled' THEN strftime('%s', e.timestamp) END) - strftime('%s', f.start_time) AS 'Time to Payment Handled', f.activity AS 'Final Activity
SELECT To achieve the desired output, we need to calculate the time elapsed from the first event of a case to the relevant events associated with 'end trip', 'declaration rejected by employee', or 'payment handled'. Additionally, we want to report the case ID and the final activity that occurred. Here's how you can structure the SQL query to accomplish this: ```sql SELECT e.idcase, MIN(CASE WHEN p.activity = 'End trip' THEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) WHEN x.activity = 'Declaration rejected by employee' THEN strftime('%s', x.timestamp) - strftime('%s', e.start_time) WHEN y.activity = 'Payment handled' THEN strftime('%s', y.timestamp) - strftime('%s', e.start_time) END) AS elapsed_time, CASE WHEN p.activity = 'End trip' THEN 'End trip' WHEN x.activity =
SELECT To achieve the desired result of showing how long it took from the first event of a case to the relevant events indicating 'end trip', 'declaration rejected by employee', or 'payment handled', we can structure the SQL query as follows: ```sql SELECT e.idcase, MIN(CASE WHEN p.activity = 'End trip' THEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) ELSE NULL END) AS 'End trip', MIN(CASE WHEN x.activity = 'Declaration rejected by employee' THEN strftime('%s', x.timestamp) - strftime('%s', e.start_time) ELSE NULL END) AS 'Declaration rejected by employee', MIN(CASE WHEN y.activity = 'Payment handled' THEN strftime('%s', y.timestamp) - strftime('%s', e.start_time) ELSE NULL END) AS 'Payment handled', CASE
SELECT To achieve the desired result of showing how long it took from the first event of a case to the event related to 'end trip', 'declaration rejected by employee', or 'payment handled', along with the case and activity considered at the end of this interval, you can use the following SQL query: ```sql SELECT e.idcase, MIN(CASE WHEN p.activity = 'End trip' THEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) ELSE NULL END) AS 'End trip', MIN(CASE WHEN x.activity = 'Declaration rejected by employee' THEN strftime('%s', x.timestamp) - strftime('%s', e.start_time) ELSE NULL END) AS 'Declaration rejected by employee', MIN(CASE WHEN y.activity = 'Payment handled' THEN strftime('%s', y.timestamp) - strftime('%s', e.start_time) ELSE
SELECT e.idcase, p.activity, strftime('%s', p.timestamp) - strftime('%s', e.start_time) AS elapsed_time FROM (SELECT MIN(timestamp) AS start_time, idcase FROM event_log GROUP BY idcase) e LEFT JOIN event_log p ON e.idcase = p.idcase WHERE p.activity IN ('End trip', 'Declaration rejected by employee', 'Payment handled');
SELECT To answer the question of how long it takes from the start of processing a declaration until the end of the trip is recorded, or until it is rejected by an employee, or until payment is made, you can use a SQL query that combines the necessary logic to calculate the time differences based on the events logged in the `event_log` table. Here’s a SQL query that accomplishes this: ```sql WITH StartTimes AS ( SELECT idcase, MIN(timestamp) AS start_time FROM event_log WHERE activity = 'Start processing declaration' -- Assuming this is the activity that indicates the start GROUP BY idcase ), EndTrip AS ( SELECT idcase, MIN(timestamp) AS end_trip_time FROM event_log WHERE activity = 'End trip' GROUP BY idcase ), Rejected AS ( SELECT idcase,
SELECT * FROM event_log WHERE activity = 'Request payment';
SELECT * FROM event_log WHERE activity = 'Request payment';
SELECT * FROM event_log WHERE activity = 'Request payment';
SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE activity = 'Request payment';
SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM activity_durations ) AS durations GROUP BY activity;
SELECT To calculate the average duration time of each activity, you would typically need a way to determine the duration of each activity. This usually involves having a start and end timestamp for each activity. However, based on the provided schema, it seems that there is only a single timestamp for each event in the `event_log` table. If you have a way to determine the duration (for example, if you have pairs of start and end events), you would need to join or aggregate that data accordingly. Assuming you have a way to calculate the duration for each activity, the SQL query might look something like this: ```sql SELECT activity, AVG(duration) AS average_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM event_log WHERE 
SELECT To calculate the mean duration time of each activity, you would typically need a way to determine the duration of each activity. This usually involves having a start and end timestamp for each activity. However, based on the provided schema, it seems that there is only a single timestamp for each activity in the `event_log` table. If you have a way to determine the duration (for example, if you have pairs of start and end events), you would need to join or aggregate that data accordingly. Assuming you have a way to calculate the duration for each activity, the SQL query might look something like this: ```sql SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM event_log WHERE activity IN ('start_activity', 'end_activity') -- Adjust based on your actual activity names -- You would need to join or correlate start
SELECT To calculate the average duration of each activity, you would typically need to have a way to determine the start and end times of each activity. Assuming that the `event_log` table contains multiple entries for the same activity with timestamps indicating when each activity starts and ends, you can calculate the duration by using a self-join or by using window functions if your SQL dialect supports them. However, if we assume that each activity has a corresponding start and end entry in the `event_log`, you can calculate the average duration as follows: 1. First, you would need to identify the start and end timestamps for each activity. 2. Then, calculate the duration for each activity. 3. Finally, compute the average duration for each activity. Here’s an example SQL query that demonstrates this process: ```sql WITH ActivityDurations AS ( SELECT activity, idcase, MIN(timestamp) AS start_time, MAX(timestamp) AS end_time, MAX(timestamp) - MIN(timestamp
SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM event_log -- Assuming you have a way to identify start and end timestamps for each activity ) AS durations GROUP BY activity;
SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (end_timestamp - timestamp) AS duration FROM event_log JOIN another_table ON event_log.idcase = another_table.idcase ) AS durations GROUP BY activity;
SELECT To calculate the average duration of each activity, you would typically need to have a way to determine the duration of each activity. This could be done by having a start and end timestamp for each activity, or by having a duration column in the `event_log` table. However, since the provided schema does not include a duration or an end timestamp, we will assume that the `timestamp` column represents the time at which each activity occurred. If you have a way to determine the duration (for example, if you have pairs of start and end timestamps for each activity), you could calculate the average duration as follows: 1. **Assuming you have a start and end timestamp**: You would need to join the table with itself to find the duration for each activity. 2. **If you only have a single timestamp**: You cannot calculate the duration without additional information. Assuming you have a way to calculate the duration, here’s an example SQL query that calculates the average duration of each activity
SELECT activity, AVG(duration) AS average_duration FROM ( SELECT activity, (end_timestamp - start_timestamp) AS duration FROM activity_durations -- This is a hypothetical table that contains start and end timestamps ) AS durations GROUP BY activity;
SELECT activity, AVG(duration) AS average_duration FROM ( SELECT activity, (end_timestamp - timestamp) AS duration FROM event_log -- Assuming you have a way to join or calculate the end_timestamp ) AS durations GROUP BY activity;
SELECT activity, AVG(strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp))) AS average_duration FROM event_log GROUP BY activity;
WITH ActivityDurations AS ( SELECT activity, timestamp AS start_time, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS end_time FROM event_log ) SELECT activity, AVG(julianday(end_time) - julianday(start_time)) AS average_duration FROM ActivityDurations WHERE end_time IS NOT NULL GROUP BY activity;
SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM activity_log ) AS durations GROUP BY activity;
SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM activity_durations -- This is a hypothetical table that contains start and end timestamps ) AS durations GROUP BY activity;
SELECT To report each activity's mean duration time, you would typically need to have a way to calculate the duration of each activity. This usually involves having a start and end timestamp for each activity. However, based on the provided schema, it seems that there is only a single timestamp for each event in the `event_log` table. If you have a way to determine the duration (for example, if you have pairs of start and end events for each activity), you would need to join or aggregate that data accordingly. Assuming you have a way to calculate the duration for each activity, the SQL query might look something like this: ```sql SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM event_log WHERE activity IN ('start_activity', 'end_activity') -- Replace with actual activity names -- You would need to join or
SELECT To report the mean duration time of each activity, you would typically need a way to calculate the duration of each activity. Assuming that the `event_log` table contains multiple entries for the same activity and that you can determine the duration based on the timestamps, you would need to calculate the difference between the start and end timestamps for each activity. However, since the provided schema does not include a clear way to identify start and end times for each activity, I will assume that you have a way to identify the start and end of each activity (for example, by using a specific `idcase` or by having a separate table that logs the start and end times). If we assume that the `timestamp` column represents the time of each event and that you can group by `idcase` to find the duration of each activity, you could write a query like this: ```sql SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity,
SELECT activity, AVG(duration) AS average_duration FROM ( SELECT activity, (end_timestamp - start_timestamp) AS duration FROM activity_durations -- This is a hypothetical table ) AS durations GROUP BY activity;
SELECT To report the mean duration of each type of activity, you would first need to ensure that you have a way to calculate the duration of each activity. Assuming that the `event_log` table contains multiple entries for the same activity and that you can derive the duration from the timestamps of these entries, you would typically need to calculate the difference between the start and end timestamps for each activity. However, if the `event_log` table only contains individual events without explicit start and end timestamps, you would need to adjust your approach. For the sake of this example, let's assume you have a way to determine the duration of each activity (e.g., through a separate table or by calculating it based on the timestamps). Here’s how you might write the SQL query to calculate the mean duration of each type of activity, assuming you have a `duration` column in the `event_log` table: ```sql SELECT activity, AVG(duration) AS mean_duration FROM event_log GROUP BY activity; ``
SELECT To calculate the mean duration of each activity, you first need to ensure that you have a way to measure the duration of each activity. This typically involves having a start and end timestamp for each activity. Assuming that your `event_log` table contains only the start timestamps of activities, you would need to join it with itself to find the end timestamps for each activity. However, if you have a way to determine the duration (for example, if you have a separate table or if the duration is calculated based on timestamps), you can use the following SQL query to calculate the mean duration of each activity: ```sql SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM event_log -- Assuming you have a way to determine start and end timestamps -- This is a placeholder; you need to adjust it based on your actual schema
SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM activity_durations -- This is a hypothetical table that contains start and end timestamps ) AS durations GROUP BY activity;
SELECT activity, AVG(duration) AS mean_duration FROM ( SELECT activity, (end_timestamp - start_timestamp) AS duration FROM activity_durations -- This is a hypothetical table ) AS durations GROUP BY activity;
SELECT To calculate the average duration of each activity, you would typically need to have a way to determine the duration of each activity. This usually involves having a start and end timestamp for each activity. However, based on the provided schema, it seems that there is only a single timestamp for each event in the `event_log` table. If you have a way to identify the start and end of each activity (for example, if the events are logged in a sequence), you can calculate the duration by joining the table with itself or using window functions. Assuming that the events are logged in chronological order and that each activity has a corresponding end event, you could do something like this: ```sql SELECT start.activity, AVG(julianday(end.timestamp) - julianday(start.timestamp)) AS average_duration FROM event_log AS start JOIN event_log AS end ON start.idcase = end.idcase AND start.activity = end.activity AND start.timestamp < end
SELECT activity, AVG(duration) AS average_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 AS duration FROM event_log WHERE end_timestamp IS NOT NULL ) AS durations GROUP BY activity;
SELECT activity, AVG(cost) AS average_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(duration) AS average_duration FROM ( SELECT activity, (julianday(end_timestamp) - julianday(start_timestamp)) * 24 * 60 * 60 AS duration FROM activity_durations -- This is a hypothetical table containing start and end timestamps ) AS durations GROUP BY activity;
SELECT To report how long each activity lasts on average, you would typically need to have a way to calculate the duration of each activity. This usually involves having a start and end timestamp for each activity. However, based on the provided schema, it seems that there is only a single timestamp for each event in the `event_log` table. If you had a way to identify the start and end of each activity (for example, if there were two entries for each activity: one for the start and one for the end), you could calculate the duration. Assuming you have such a structure, here’s how you might write the SQL query: ```sql SELECT activity, AVG(duration) AS average_duration FROM ( SELECT start.activity, (end.timestamp - start.timestamp) AS duration FROM event_log AS start JOIN event_log AS end ON start.idcase = end.idcase WHERE start.activity = 'Activity
SELECT activity, AVG(MAX_TIMESTAMP - MIN_TIMESTAMP) AS average_duration FROM ( SELECT activity, MAX(strftime('%s', timestamp)) AS MAX_TIMESTAMP, MIN(strftime('%s', timestamp)) AS MIN_TIMESTAMP FROM event_log GROUP BY idcase, activity ) AS activity_durations GROUP BY activity;
SELECT DISTINCT idcase FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase HAVING total_cost = (SELECT MAX(total_cost) FROM (SELECT SUM(cost) AS total_cost FROM event_log GROUP BY idcase));
SELECT idcase FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase HAVING total_cost = (SELECT MAX(total_cost) FROM (SELECT SUM(cost) AS total_cost FROM event_log GROUP BY idcase));
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase HAVING total_cost = (SELECT MAX(total_cost) FROM (SELECT SUM(cost) AS total_cost FROM event_log GROUP BY idcase));
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT idcase, SUM(cost) AS total_cost FROM event_log WHERE cost IS NOT NULL GROUP BY idcase ORDER BY total_cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost IN ( SELECT DISTINCT cost FROM event_log ORDER BY cost DESC LIMIT 5 ) ORDER BY cost DESC;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT activity, cost, idcase FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT * FROM event_log WHERE activity = 'Start trip';
SELECT idcase, timestamp, resource, cost FROM event_log WHERE activity = 'Start trip';
SELECT activity, COUNT(*) AS total_records FROM event_log GROUP BY activity;
SELECT COUNT(*) AS total_performances, activity FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity;
SELECT COUNT(*) AS performance_count, activity FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity;
SELECT COUNT(*) AS event_count, activity FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_performances FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity;
SELECT COUNT(*) AS activity_count, activity FROM event_log GROUP BY activity;
SELECT COUNT(*) AS performance_count, activity FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS intervention_count FROM event_log GROUP BY activity ORDER BY intervention_count DESC;
SELECT activity, COUNT(*) AS action_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS intervention_count FROM event_log GROUP BY activity ORDER BY intervention_count DESC;
SELECT activity, COUNT(*) AS intervention_count FROM event_log GROUP BY activity ORDER BY intervention_count DESC;
SELECT activity, COUNT(*) AS intervention_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS intervention_count FROM event_log GROUP BY activity ORDER BY intervention_count DESC;
SELECT activity, COUNT(*) AS intervention_count FROM event_log GROUP BY activity;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, SUM(cost) AS total_cost FROM event_log GROUP BY activity ORDER BY total_cost DESC;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource ORDER BY total_cost DESC;
SELECT * FROM event_log WHERE activity LIKE '%permit%'
SELECT id, activity, resource, cost FROM event_log WHERE activity LIKE 'Permit%'
SELECT * FROM event_log WHERE activity LIKE '%permit%'
SELECT * FROM event_log WHERE activity LIKE '%permit%'
SELECT * FROM event_log WHERE activity LIKE '%permit%'
SELECT * FROM event_log WHERE activity LIKE 'Permit%'
SELECT id, activity, timestamp, resource, cost, idcase FROM event_log WHERE activity LIKE '%permit%'
SELECT COUNT(*) AS total_permit_activities, MIN(timestamp) AS first_permit_activity, MAX(timestamp) AS last_permit_activity, AVG(cost) AS average_cost, COUNT(DISTINCT resource) AS unique_resources FROM event_log WHERE activity LIKE 'Permit%'
SELECT cost FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log WHERE activity LIKE 'Permit%'
SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%' ORDER BY idcase, timestamp;
SELECT * FROM event_log WHERE activity LIKE '%permit%' AND idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity LIKE '%declaration%' );
SELECT MAX(cost) AS highest_cost FROM event_log;
SELECT MAX(cost) AS highest_cost FROM event_log;
SELECT MAX(cost) FROM event_log;
SELECT MAX(cost) AS highest_cost FROM event_log;
SELECT MAX(cost) AS highest_cost FROM event_log;
SELECT MAX(cost) AS max_cost FROM event_log;
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS instance_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS instance_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS rejection_count, resource FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource;
SELECT COUNT(*) AS activity_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS activity_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS activity_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS instance_count, resource, idcase FROM event_log WHERE activity = 'declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS activity_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS activity_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS activity_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS activity_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT COUNT(*) AS event_count, resource, idcase FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT resource, idcase, COUNT(*) AS rejection_count FROM event_log WHERE activity = 'Declaration rejected by administration' GROUP BY resource, idcase;
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT IN ('Start trip', 'End trip') AND cost IS NOT NULL;
SELECT AVG(cost) AS mean_cost FROM event_log WHERE activity NOT IN ('Start trip', 'End trip') AND cost IS NOT NULL;
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Start trip', 'End trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('start trip', 'end trip');
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT IN ('Start Trip', 'End Trip');
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT activity, cost, idcase FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(activity) > 1;
SELECT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(activity) > 1;
SELECT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(activity) > 1;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1;
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-03'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02 23:59:59'
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp >= '2018-10-01' AND timestamp < '2018-10-03';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-03';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02 23:59:59';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02 23:59:59'
SELECT * FROM event_log WHERE resource LIKE 'M%'
SELECT * FROM event_log WHERE resource LIKE 'M%'
SELECT * FROM event_log WHERE resource LIKE 'M%' ORDER BY resource;
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%'
SELECT * FROM event_log WHERE resource LIKE 'M%'
SELECT activity FROM event_log WHERE resource LIKE 'M%' ORDER BY timestamp;
SELECT * FROM event_log WHERE resource LIKE 'M%'
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 5;
SELECT activity, COUNT(*) AS event_count FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity, idcase FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3;
SELECT activity, idcase FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT activity, idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT activity, idcase, COUNT(*) AS occurrence_count FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3;
SELECT activity, idcase, COUNT(*) AS event_count FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3;
SELECT activity, idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT idcase, activity, COUNT(*) AS occurrence_count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT activity, idcase, COUNT(*) as event_count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT idcase, activity, COUNT(*) AS occurrence_count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT idcase, activity, COUNT(*) as activity_count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ORDER BY idcase, activity;
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) AS trace_size FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT count(*) FROM event_log WHERE idcase = 'declaration 56300';
SELECT COUNT(*) AS event_count FROM event_log WHERE idcase = 'declaration 56300';
SELECT * FROM event_log WHERE idcase = '56300';
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS performance_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(activity) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(activity) > 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS action_count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity ORDER BY action_count DESC;
SELECT activity, COUNT(*) AS action_count FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS process_instance_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS process_instance_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS process_instance_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS declaration_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS allocation_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource;
SELECT COUNT(*) AS intervention_count, resource FROM event_log GROUP BY resource;
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT idcase FROM event_log WHERE resource = 'Thomas' UNION SELECT idcase FROM event_log WHERE resource = 'Diana' UNION SELECT idcase FROM event_log WHERE resource = 'Sara';
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp >= '2017-01-05' AND timestamp < '2017-01-06' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS process_instance_count, resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS process_instance_count, resource FROM event_log WHERE timestamp BETWEEN '2017-01-05' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS declaration_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource;
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa');
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa');
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa');
SELECT activity, resource FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE resource IN ('Joshua', 'Teresa') )
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa' ) AND activity LIKE '%intervention%'
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Start trip', 'End trip') AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request Payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity IN ('Start trip', 'End trip') ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE (activity = 'Start trip' OR activity = 'End trip') AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' );
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity IN ('Start trip', 'Trip end') ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE (activity = 'Start trip' OR activity = 'End trip') AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled'));
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE (activity = 'Start trip' OR activity = 'End trip') AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request Payment' OR activity = 'Payment handled' );
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Start trip', 'End trip') AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Request Payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE (activity = 'Start trip' OR activity = 'End trip') AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request Payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Start trip', 'End trip') EXCEPT SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request Payment', 'Payment handled');
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL;
SELECT DISTINCT activity FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01';
SELECT DISTINCT(idcase) FROM event_log WHERE timestamp < '2017-03-01';
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01' );
SELECT idcase FROM event_log WHERE activity = 'Start trip' AND timestamp >= '2017-03-01' AND timestamp < '2017-04-01';
SELECT idcase FROM event_log WHERE activity = 'Start trip' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE timestamp < ( SELECT MIN(timestamp) FROM event_log AS el WHERE el.idcase = event_log.idcase AND el.activity = 'Start trip' ) ) GROUP BY idcase;
SELECT idcase FROM event_log WHERE activity = 'Start trip' AND timestamp >= '2017-03-01' AND timestamp < '2017-04-01';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Start trip' AND timestamp >= '2017-03-01' AND timestamp < '2017-04-01';
SELECT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE timestamp BETWEEN '2017-03-01' AND '2017-03-31' GROUP BY idcase HAVING MIN(timestamp) = MIN(CASE WHEN activity = 'start trip' THEN timestamp END) )
SELECT idcase FROM event_log WHERE activity = 'Start trip' GROUP BY idcase HAVING MIN(timestamp) BETWEEN '2017-03-01' AND '2017-03-31';
SELECT idcase FROM event_log WHERE activity = 'Start trip' AND timestamp >= '2017-03-01' AND timestamp < '2017-04-01' GROUP BY idcase;
SELECT resource, idcase, COUNT(*) as action_count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, idcase, COUNT(*) AS event_count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, idcase, COUNT(*) AS action_count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY idcase, resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY idcase, resource HAVING COUNT(*) > 5;
SELECT resource, idcase, COUNT(*) AS event_count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, idcase, COUNT(*) AS event_count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, idcase, COUNT(*) AS intervention_count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY resource HAVING COUNT(*) > 5;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY activity_count DESC;
SELECT activity, COUNT(*) AS occurrence_count FROM event_log GROUP BY activity ORDER BY occurrence_count DESC;
SELECT activity FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY activity_count DESC LIMIT 1;
SELECT activity, COUNT(*) AS action_count FROM event_log GROUP BY activity ORDER BY action_count DESC;
SELECT resource FROM event_log WHERE activity = 'Declaration final approved by supervisor' GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 10;
SELECT resource FROM event_log WHERE activity = 'declaration final approved by supervisor' GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 10;
SELECT resource, COUNT(*) AS approval_count FROM event_log WHERE activity = 'Declaration final approved by supervisor' GROUP BY resource ORDER BY approval_count DESC LIMIT 10;
SELECT resource, COUNT(*) AS occurrence_count FROM event_log WHERE activity = 'Declaration final approved by supervisor' GROUP BY resource ORDER BY occurrence_count DESC;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Declaration approved by supervisor' GROUP BY resource ORDER BY performance_count DESC;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration approved by supervisor' GROUP BY resource ORDER BY activity_count DESC;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration final approved by supervisor' GROUP BY resource ORDER BY activity_count DESC;
SELECT resource, COUNT(*) AS approval_count FROM event_log WHERE activity = 'Declaration approved by supervisor' GROUP BY resource ORDER BY approval_count DESC LIMIT 10;
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity = 'declaration approved by budget owner' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'declaration approved by budget owner' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaration approved by budget owner' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaration approved by budget owner' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity = 'Declaration approved by budget owner' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaration approved by budget owner' AND resource IN ('Eugine', 'Marie');
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity = 'Declaration approved by budget owner' AND resource IN ('Eugine', 'Marie');
SELECT COUNT(*) AS approval_count FROM event_log WHERE activity LIKE '%approved%' AND activity LIKE '%budget holder%' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Approved' AND resource IN ('Eugene', 'Marie');
SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaration 49464' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase = 'declaration 76667' );
SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaration 49464' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase = 'declaration 76667' );
SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaration 49464' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase = 'declaration 76667' );
SELECT * FROM event_log WHERE idcase = '49464' AND id NOT IN ( SELECT id FROM event_log WHERE idcase = '76667' );
SELECT resource, count(*) AS activity_count FROM event_log WHERE activity = 'Declaration submitted by employee' GROUP BY resource HAVING count(*) > 2 ORDER BY activity_count DESC;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2 ORDER BY resource;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2 ORDER BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2 ORDER BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity = 'Declaration submitted by employee' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS request_count FROM event_log WHERE activity = 'Request declaration' -- Assuming 'Request declaration' is the activity name for requesting a declaration GROUP BY resource HAVING COUNT(*) > 2;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp >= '2017-05-01' AND timestamp < '2017-05-11';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp >= '2017-05-01' AND timestamp < '2017-05-11';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp >= '2017-05-01' AND timestamp < '2017-05-11';
SELECT idcase, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT COUNT(DISTINCT resource) AS resource_count, idcase FROM event_log GROUP BY idcase;
SELECT COUNT(DISTINCT resource) AS resource_count, idcase FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS employee_count FROM event_log GROUP BY idcase;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND MIN(resource) = 'Christopher';
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND MAX(resource) = 'Christopher';
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND MIN(resource) = 'Christopher';
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = (SELECT COUNT(DISTINCT activity) FROM event_log WHERE idcase = event_log.idcase);
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND MAX(resource) = 'Christopher';
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND MIN(resource) = 'Christopher';
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND MIN(resource) = 'Christopher';
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource, COUNT(*) AS activity_count FROM event_log GROUP BY idcase, resource HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, DATE(timestamp) AS event_date FROM event_log GROUP BY idcase, event_date HAVING COUNT(*) > 1;
SELECT idcase, DATE(timestamp) AS event_date, COUNT(*) AS event_count FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT idcase, DATE(timestamp) AS event_date FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT idcase, DATE(timestamp) AS event_date FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT idcase, DATE(timestamp) AS event_date, COUNT(*) AS event_count FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT idcase, DATE(timestamp) AS intervention_date FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT resource, idcase, COUNT(*) AS zero_cost_event_count FROM event_log WHERE cost = 0 GROUP BY resource, idcase;
SELECT idcase, resource, COUNT(*) AS zero_cost_event_count FROM event_log WHERE cost = 0 GROUP BY idcase, resource;
SELECT idcase, resource, COUNT(*) AS zero_cost_event_count FROM event_log WHERE cost = 0 GROUP BY idcase, resource;
SELECT resource, idcase, COUNT(*) AS zero_cost_event_count FROM event_log WHERE cost = 0 GROUP BY resource, idcase;
SELECT COUNT(*) AS zero_cost_count, resource, idcase FROM event_log WHERE cost = 0 GROUP BY resource, idcase;
SELECT resource, idcase, COUNT(*) AS zero_cost_events FROM event_log WHERE cost = 0 GROUP BY resource, idcase;
SELECT resource, COUNT(*) AS no_cost_interventions FROM event_log WHERE cost IS NULL OR cost = 0 GROUP BY resource ORDER BY no_cost_interventions DESC;
SELECT resource, COUNT(*) AS intervention_count FROM event_log WHERE cost IS NULL OR cost = 0 GROUP BY resource;
SELECT * FROM event_log WHERE activity = 'Permit rejected by director';
SELECT * FROM event_log WHERE activity = 'Permit rejected by director';
SELECT * FROM event_log WHERE activity = 'Permit rejected by director';
SELECT id, activity, timestamp, resource, cost, idcase FROM event_log WHERE activity = 'Permit rejected by director';
SELECT * FROM event_log WHERE activity = 'Permit rejected by director';
SELECT * FROM event_log WHERE activity = 'Permit rejected by director';
SELECT * FROM event_log WHERE activity LIKE '%Permit rejected by director%'
SELECT * FROM event_log WHERE activity = 'Permit rejected by director';
SELECT DATE(timestamp) AS event_date, SUM(cost) AS total_cost FROM event_log GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS event_date, SUM(cost) AS total_cost FROM event_log GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS event_date, SUM(cost) AS total_cost FROM event_log WHERE cost IS NOT NULL GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS event_date, SUM(cost) AS total_cost FROM event_log WHERE cost IS NOT NULL GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS event_date, SUM(cost) AS total_cost FROM event_log GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS event_date, SUM(cost) AS total_cost FROM event_log GROUP BY event_date ORDER BY event_date;
SELECT strftime('%Y-%m-%d', timestamp) AS event_date, COUNT(*) AS event_count FROM event_log GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS processing_date, SUM(cost) AS total_cost FROM event_log GROUP BY processing_date ORDER BY processing_date;
SELECT id, activity, resource, cost FROM event_log WHERE cost > 1000 AND (resource LIKE '%supervisor%' OR resource LIKE '%director%')
SELECT activity, cost FROM event_log WHERE (resource LIKE '%supervisor%' OR resource LIKE '%director%') AND cost > 1000;
SELECT activity, cost, resource FROM event_log WHERE cost > 1000 AND (resource LIKE '%supervisor%' OR resource LIKE '%director%')
SELECT activity FROM event_log WHERE (activity LIKE '%supervisor%' OR activity LIKE '%director%') AND cost > 1000;
SELECT id, activity, resource, cost FROM event_log WHERE cost > 1000 AND (resource LIKE '%supervisor%' OR resource LIKE '%director%')
SELECT activity, cost FROM event_log WHERE (resource LIKE '%supervisor%' OR resource LIKE '%director%') AND cost > 1000;
SELECT idcase, COUNT(*) AS events_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS intervention_count FROM event_log GROUP BY idcase;
SELECT COUNT(DISTINCT idcase) AS task_count, resource FROM event_log GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS task_count, resource FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(activity) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS task_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY resource;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(activity) AS activity_count FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, activity, timestamp FROM event_log WHERE resource = 'Alexis' ORDER BY idcase, timestamp;
SELECT idcase, COUNT(*) AS action_count FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT To determine how many cases went through the 'permit final approved by supervisor' activity before going through the 'start trip' activity, you can use a query that checks the order of activities for each case. This can be done by using a common table expression (CTE) or a subquery to filter the cases that meet the criteria. Here's an example of how you might write this query: ```sql WITH activity_order AS ( SELECT idcase, activity, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS activity_order FROM event_log WHERE activity IN ('Permit final approved by supervisor', 'Start trip') ) SELECT COUNT(DISTINCT ao1.idcase) AS case_count FROM activity_order ao1 JOIN activity_order ao2 ON ao1.idcase = ao2.idcase WHERE ao1.activity = 'Permit final approved by supervisor' AND
SELECT COUNT(DISTINCT e1.idcase) AS case_count FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Permit final approved by supervisor' AND e2.activity = 'Start trip' AND e1.timestamp < e2.timestamp;
WITH ActivitySequence AS ( SELECT idcase, activity, timestamp, LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_activity FROM event_log ) SELECT COUNT(DISTINCT idcase) AS case_count FROM ActivitySequence WHERE activity = 'Permit final approved by supervisor' AND next_activity = 'Start trip';
SELECT COUNT(DISTINCT idcase) FROM event_log e1 WHERE activity = 'Permit final approved by supervisor' AND EXISTS ( SELECT 1 FROM event_log e2 WHERE e2.idcase = e1.idcase AND e2.activity = 'Start trip' AND e2.timestamp > e1.timestamp );
SELECT COUNT(DISTINCT e1.idcase) AS case_count FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Start trip' AND e2.activity = 'Permit final approved by supervisor' AND e1.timestamp > e2.timestamp;
SELECT COUNT(DISTINCT e1.idcase) FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Start trip' AND e2.activity = 'Permit final approved by supervisor' AND e1.timestamp > e2.timestamp;
SELECT COUNT(DISTINCT e1.idcase) AS declaration_count FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Permit final approved by supervisor' AND e2.activity = 'Trip start' AND e1.timestamp < e2.timestamp;
SELECT COUNT(DISTINCT e.idcase) AS allowed_declarations FROM event_log AS e WHERE e.activity = 'Final Approval' AND e.timestamp < ( SELECT MIN(e2.timestamp) FROM event_log AS e2 WHERE e2.activity = 'Start trip' AND e2.idcase = e.idcase );
SELECT * FROM event_log WHERE activity = 'End trip' AND timestamp NOT LIKE '2017-12-12%'
SELECT * FROM event_log WHERE activity = 'End trip' AND timestamp < '2017-12-12' OR activity = 'End trip' AND timestamp > '2017-12-12';
SELECT e1.id, e1.activity, e1.timestamp, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND (e1.timestamp < '2017-12-12' OR e1.timestamp > '2017-12-12')
SELECT e1.id, e1.activity, e1.timestamp, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND (e1.timestamp < '2017-12-12' OR e1.timestamp > '2017-12-12')
SELECT * FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' ) AND timestamp NOT BETWEEN '2017-12-12 00:00:00' AND '2017-12-12 23:59:59';
SELECT * FROM event_log WHERE activity = 'End trip' AND DATE(timestamp) <> '2017-12-12';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip' AND DATE(timestamp) <> '2017-12-12';
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY resource ORDER BY action_count DESC;
SELECT resource, COUNT(*) AS action_count FROM event_log GROUP BY resource;
SELECT COUNT(DISTINCT activity) AS activity_count, resource FROM event_log GROUP BY resource;
SELECT COUNT(DISTINCT activity) AS activity_count, resource FROM event_log GROUP BY resource;
SELECT COUNT(activity) AS activity_count, resource FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS activity_count FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(activity) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, activity FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN ( SELECT DISTINCT activity FROM event_log WHERE resource = 'Virginia' );
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN ( SELECT DISTINCT activity FROM event_log WHERE resource = 'Virginia' );
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN ( SELECT DISTINCT activity FROM event_log WHERE resource = 'Virginia' );
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN ( SELECT activity FROM event_log WHERE resource = 'Virginia' );
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN (SELECT activity FROM event_log WHERE resource = 'Virginia');
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN ( SELECT DISTINCT activity FROM event_log WHERE resource = 'Virginia' );
SELECT AVG(cost) FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity LIKE '%rejected%' );
SELECT AVG(cost) FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'rejected' );
SELECT AVG(total_cost) FROM ( SELECT SUM(cost) AS total_cost FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'rejected' ) GROUP BY idcase ) AS case_costs;
SELECT AVG(total_cost) AS mean_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity LIKE '%rejected%' ) GROUP BY idcase ) AS case_costs;
SELECT AVG(cost) FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'rejected' );
SELECT AVG(cost) FROM event_log WHERE activity = 'Rejected';
SELECT AVG(cost) FROM event_log WHERE activity = 'rejected_activity' OR idcase IN ( SELECT idcase FROM event_log WHERE activity = 'rejected_activity' );
SELECT idcase, MIN(timestamp) AS start_time, MAX(timestamp) AS end_time, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log WHERE activity = 'Declaration approved by supervisor' GROUP BY idcase ORDER BY idcase;
SELECT e1.idcase, MIN(e1.timestamp) AS start_time, MAX(e1.timestamp) AS end_time, (MAX(e1.timestamp) - MIN(e1.timestamp)) AS duration FROM event_log e1 WHERE e1.activity = 'Declaration approved by supervisor' GROUP BY e1.idcase ORDER BY e1.idcase;
SELECT To determine how long the 'declaration approved by supervisor' activity lasted in each process instance, you would typically need to find the start and end timestamps for that activity. Assuming that the activity is logged with both a start and an end event in the `event_log` table, you can use a self-join to calculate the duration for each process instance. Here’s how you can write the SQL query: ```sql SELECT e1.idcase, MIN(e1.timestamp) AS start_time, MAX(e2.timestamp) AS end_time, (MAX(e2.timestamp) - MIN(e1.timestamp)) AS duration FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'declaration approved by supervisor' AND e2.activity = 'declaration approved by supervisor' GROUP BY e1.idcase ORDER BY e1.idcase
SELECT idcase, MIN(timestamp) AS start_time, MAX(timestamp) AS end_time, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log WHERE activity = 'declaration approved by supervisor' GROUP BY idcase ORDER BY idcase;
SELECT e1.idcase, MIN(e1.timestamp) AS start_time, MAX(e2.timestamp) AS end_time, (MAX(e2.timestamp) - MIN(e1.timestamp)) AS duration FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'declaration approved by supervisor' AND e2.activity = 'declaration approved by supervisor' GROUP BY e1.idcase ORDER BY e1.idcase;
SELECT e1.idcase, e1.activity, e1.timestamp, e1.resource FROM event_log e1 WHERE e1.activity = 'Declaration approved by supervisor' ORDER BY e1.timestamp;
SELECT e.idcase, strftime('%s', a.approval_time) - strftime('%s', b.start_time) AS wait_time FROM (SELECT idcase, MIN(timestamp) AS approval_time FROM event_log WHERE activity = 'Declaration approved by supervisor' GROUP BY idcase) a INNER JOIN (SELECT idcase, MIN(timestamp) AS start_time FROM event_log GROUP BY idcase) b ON a.idcase = b.idcase ORDER BY e.idcase;
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) AS occurrence_count FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) AS activity_count FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) AS occurrence_count FROM event_log WHERE activity = 'declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaration rejected by pre-approver';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaration rejected by pre-approver';
SELECT idcase, timestamp FROM event_log WHERE activity = 'End trip' ORDER BY resource;
SELECT idcase, timestamp FROM event_log WHERE activity = 'End trip' ORDER BY resource;
SELECT DISTINCT e.idcase, e.timestamp, e.resource FROM event_log AS e WHERE e.idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' ) ORDER BY e.resource, e.timestamp;
SELECT idcase, DATE(timestamp) AS activity_date, resource FROM event_log WHERE activity = 'End trip' ORDER BY resource;
SELECT idcase, timestamp, resource FROM event_log WHERE activity = 'End trip' ORDER BY resource;
SELECT idcase, timestamp AS end_trip_date, resource AS employee_name FROM event_log WHERE activity = 'End trip' ORDER BY resource;
SELECT COUNT(*) AS event_count, idcase FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT COUNT(*) AS event_count, idcase FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS action_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS intervention_count FROM event_log GROUP BY idcase;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-02-05' AND '2017-12-05';
SELECT COUNT(DISTINCT idcase) AS number_of_process_instances FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-02-05' AND '2017-12-05';
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS process_instance_count FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-02-05' AND '2017-12-05';
SELECT count(*) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-02-05' AND '2017-12-05';
SELECT idcase, resource, id AS event_id, timestamp AS completion_date FROM event_log WHERE activity = 'Send reminder' ORDER BY timestamp ASC;
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'Send reminder' ORDER BY timestamp;
SELECT idcase, id AS event_id, activity, resource, timestamp FROM event_log WHERE activity = 'Send reminder' ORDER BY timestamp ASC;
SELECT idcase, resource, activity, timestamp AS completion_date FROM event_log WHERE activity = 'Send reminder' ORDER BY timestamp ASC;
SELECT idcase, id AS event_id, resource, timestamp FROM event_log WHERE activity = 'Send reminder' ORDER BY timestamp ASC;
SELECT idcase, id AS event_id, resource, timestamp AS completion_date FROM event_log WHERE activity = 'Send reminder' ORDER BY timestamp ASC;
SELECT e2.idcase AS declaration_code, e2.resource AS resource, e2.id AS submission_id, e2.timestamp AS completion_date FROM event_log AS e2 WHERE e2.activity = 'Send reminder' ORDER BY e2.timestamp;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource;
SELECT DISTINCT resource FROM event_log ORDER BY resource;
SELECT DISTINCT resource FROM event_log ORDER BY resource;
SELECT DISTINCT resource FROM event_log ORDER BY resource;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%declaration%' ORDER BY resource ASC;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log WHERE activity = 'Travel declaration' -- Assuming 'Travel declaration' is the activity name for travel declarations GROUP BY resource HAVING COUNT(*) > 200;
SELECT resource, COUNT(DISTINCT idcase) AS declaration_count FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log WHERE activity LIKE '%declaration%';
SELECT COUNT(DISTINCT resource) FROM event_log WHERE activity LIKE '%declaration%'
SELECT COUNT(DISTINCT resource) AS unique_people_count FROM event_log;
SELECT COUNT(DISTINCT resource) AS number_of_people FROM event_log;
SELECT COUNT(DISTINCT resource) AS number_of_employees FROM event_log;
SELECT COUNT(DISTINCT resource) AS number_of_people FROM event_log WHERE activity LIKE '%declaration%' -- Adjust this condition based on the actual activity names related to declarations
SELECT COUNT(DISTINCT resource) FROM event_log WHERE activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaration%'
SELECT * FROM event_log WHERE activity LIKE '%declaration%'
SELECT DISTINCT activity, idcase FROM event_log WHERE activity LIKE '%declaration%' ORDER BY idcase;
SELECT * FROM event_log WHERE activity LIKE '%declaration%'
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT COUNT(DISTINCT idcase) AS cases_with_no_cost FROM event_log WHERE cost IS NULL OR cost = 0;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE cost IS NULL OR cost = 0;
SELECT COUNT(DISTINCT idcase) AS cases_with_no_cost FROM event_log WHERE cost IS NULL OR cost = 0;
SELECT COUNT(DISTINCT idcase) AS cases_with_no_cost FROM event_log WHERE cost IS NULL OR cost = 0;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM ( SELECT idcase FROM event_log GROUP BY idcase HAVING SUM(CASE WHEN cost IS NULL THEN 1 ELSE 0 END) = COUNT(*) ) AS zero_cost_cases;
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY idcase HAVING SUM(CASE WHEN cost IS NOT NULL AND cost <> 0 THEN 1 ELSE 0 END) = 0;
SELECT COUNT(DISTINCT idcase) AS declarations_without_cost FROM event_log WHERE cost IS NULL;
SELECT COUNT(DISTINCT idcase) AS no_cost_declarations FROM event_log WHERE cost IS NULL OR cost = 0;
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%Permit%' OR activity LIKE '%Declaration%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%'
SELECT * FROM event_log WHERE activity LIKE '%Permit%' OR activity LIKE '%Declare%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permit%' OR activity LIKE '%declaration%'
SELECT * FROM event_log WHERE activity LIKE '%Permit%' OR activity LIKE '%Declaration%'
SELECT count(*) FROM event_log WHERE activity = 'Declaration rejected by director';
SELECT COUNT(*) AS occurrence_count FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) AS occurrence_count FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaration rejected by director';
SELECT count(*) FROM event_log WHERE activity = 'Declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaration rejected by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaration rejected by director';
SELECT AVG(cost) AS mean_cost FROM event_log;
SELECT AVG(cost) AS mean_event_cost FROM event_log;
SELECT AVG(cost) AS mean_cost FROM event_log;
SELECT activity, AVG(cost) AS mean_cost FROM event_log GROUP BY activity;
SELECT AVG(cost) FROM event_log;
SELECT AVG(cost) AS mean_cost FROM event_log;
SELECT AVG(cost) AS mean_cost, activity FROM event_log GROUP BY activity;
SELECT AVG(cost) AS mean_cost FROM event_log;
SELECT AVG(cost) FROM event_log;
SELECT AVG(cost) AS mean_cost FROM event_log GROUP BY idcase;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS declarations_acting_on FROM event_log GROUP BY resource;
SELECT count(*) FROM event_log WHERE resource = 'Peter';
SELECT count(*) FROM event_log WHERE resource = 'Peter';
SELECT count(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS actions_performed FROM event_log WHERE resource = 'Peter';
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3;
SELECT resource, COUNT(DISTINCT idcase) AS process_instance_count FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3;
SELECT idcase FROM event_log WHERE activity = 'Request payment' GROUP BY idcase ORDER BY COUNT(*) ASC;
SELECT idcase, COUNT(*) AS event_count FROM event_log WHERE activity = 'Request payment' GROUP BY idcase ORDER BY event_count ASC;
SELECT idcase, COUNT(*) AS event_count FROM event_log WHERE activity LIKE '%request payment%' GROUP BY idcase ORDER BY event_count ASC;
SELECT idcase, COUNT(*) AS event_count FROM event_log WHERE activity = 'Request payment' GROUP BY idcase ORDER BY event_count ASC;
SELECT idcase, COUNT(*) AS event_count FROM event_log WHERE activity = 'Request payment' GROUP BY idcase ORDER BY event_count ASC;
SELECT idcase, COUNT(*) AS event_count FROM event_log WHERE idcase IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment') GROUP BY idcase ORDER BY event_count ASC;
SELECT idcase, COUNT(*) AS activity_count FROM event_log WHERE idcase IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment') GROUP BY idcase ORDER BY activity_count ASC;
SELECT idcase, COUNT(*) AS action_count FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' ) GROUP BY idcase ORDER BY action_count ASC;
SELECT timestamp FROM event_log WHERE activity = 'End trip' OR activity = 'Declaration rejected by employee' ORDER BY timestamp ASC;
SELECT DISTINCT DATE(timestamp) AS event_date FROM event_log WHERE activity = 'End trip' OR activity = 'Declaration rejected by employee' ORDER BY event_date ASC;
SELECT DISTINCT DATE(timestamp) AS event_date FROM event_log WHERE activity = 'End trip' OR activity = 'Declaration rejected by employee' ORDER BY event_date ASC;
SELECT DISTINCT DATE(timestamp) AS activity_date FROM event_log WHERE activity = 'End trip' OR activity = 'Declaration rejected by employee' ORDER BY activity_date ASC;
SELECT DISTINCT DATE(timestamp) AS recording_date FROM event_log WHERE activity IN ('End trip', 'Closed') ORDER BY recording_date ASC;
SELECT DISTINCT DATE(timestamp) AS event_date FROM event_log WHERE activity IN ('End trip', 'Declaration rejected by employee') ORDER BY event_date ASC;
SELECT DISTINCT DATE(timestamp) AS event_date FROM event_log WHERE activity IN ('End trip', 'Declaration rejected') ORDER BY event_date ASC;
SELECT timestamp FROM event_log WHERE activity IN ('End trip', 'Rejection') ORDER BY timestamp ASC;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS performance_count FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS activity_performance_count FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS activity_count FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT COUNT(*) AS activity_count, resource FROM event_log GROUP BY resource ORDER BY resource;
SELECT COUNT(*) AS activity_count, resource FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, activity, COUNT(*) AS activity_count FROM event_log GROUP BY resource, activity ORDER BY resource ASC;
SELECT resource, COUNT(activity) AS activity_count FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS activity_occurrences FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity LIKE '%processed%' -- Assuming 'processed' is part of the activity name for processing declarations GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS action_count FROM event_log WHERE activity LIKE '%declaration%' GROUP BY resource ORDER BY resource;
SELECT * FROM event_log WHERE activity LIKE 'E%'
SELECT * FROM event_log WHERE activity LIKE 'E%'
SELECT * FROM event_log WHERE activity LIKE 'E%'
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%'
SELECT * FROM event_log WHERE activity LIKE 'E%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE 'E%' AND activity LIKE '%declaration%'
SELECT * FROM event_log WHERE activity LIKE 'E%'
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaration saved by employee';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaration saved by employee';
SELECT DISTINCT resource FROM event_log WHERE activity = 'saved declaration';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Save Declaration';
SELECT DISTINCT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING DATE(MAX(timestamp)) = '2018-04-12' );
SELECT DISTINCT activity FROM event_log WHERE DATE(timestamp) = '2018-04-12';
SELECT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING DATE(MAX(timestamp)) = '2018-04-12' );
SELECT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING DATE(MAX(timestamp)) = '2018-04-12' );
SELECT DISTINCT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) = '2018-04-12' );
SELECT DISTINCT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) = '2018-04-12' );
SELECT DISTINCT activity FROM event_log WHERE DATE(timestamp) = '2018-04-12';
SELECT DISTINCT activity FROM event_log WHERE DATE(timestamp) = '2018-04-12';
SELECT DISTINCT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE DATE(timestamp) = '2018-04-12' ) AND DATE(timestamp) = '2018-04-12';
SELECT id, activity, timestamp AS performance_end_date FROM event_log WHERE activity IN ('Permit final approved by supervisor', 'Declaration approved by supervisor') ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity = 'Permit final approved by supervisor' OR activity = 'Declaration approved by supervisor' ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity = 'Permit final approved by supervisor' OR activity = 'Declaration approved by supervisor' ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('Permit final approved by supervisor', 'Declaration approved by supervisor') ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('Permit final approved by supervisor', 'Declaration approved by supervisor') ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('Permit final approved by supervisor', 'Declaration approved by supervisor') ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('Permit final approved by director', 'Declaration final approved by supervisor') ORDER BY timestamp;
SELECT id AS action_identifier, activity AS associated_activity, timestamp AS completion_date FROM event_log WHERE activity LIKE '%final approved%' OR activity LIKE '%approved by supervisor%' ORDER BY timestamp;
SELECT * FROM event_log WHERE cost IS NOT NULL AND cost <> 0;
SELECT * FROM event_log WHERE cost IS NOT NULL AND cost <> 0;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT id, activity, resource, cost, idcase FROM event_log WHERE cost <> 0 ORDER BY idcase;
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT count(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) AS event_count FROM event_log WHERE activity = 'Permit final approved by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Final permit granted by director';
SELECT COUNT(*) FROM event_log WHERE activity = 'Final permit approved by director';
SELECT timestamp FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT * FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT DISTINCT DATE(timestamp) AS intervention_date FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT DISTINCT DATE(timestamp) AS trip_start_date FROM event_log WHERE activity = 'Start trip' AND resource LIKE '%s';
SELECT SUM(cost) AS total_cost, activity, resource FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_spent FROM event_log GROUP BY activity, resource ORDER BY total_spent DESC;
SELECT activity, COUNT(*) AS event_count FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY activity;
SELECT activity, COUNT(*) AS occurrences FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY activity;
SELECT activity, COUNT(*) AS occurrence_count FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY activity;
SELECT COUNT(*), activity FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY activity;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY activity;
SELECT activity, COUNT(*) AS event_count FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY activity;
SELECT activity, COUNT(*) AS occurrences FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY activity;
SELECT SUM(activity_count) AS total_activities FROM ( SELECT COUNT(*) AS activity_count FROM event_log WHERE activity = 'Start trip' UNION ALL SELECT COUNT(*) AS activity_count FROM event_log WHERE activity = 'End trip' ) AS combined_counts;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity IN ('Start trip', 'End trip') GROUP BY idcase HAVING COUNT(DISTINCT activity) = 2 );
SELECT activity, COUNT(*) AS count FROM event_log WHERE activity IN ('Begin trip', 'End trip') GROUP BY activity;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 3;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 3;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT resource, activity FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT resource, activity FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT e1.activity, e1.timestamp, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp ORDER BY e1.timestamp;
SELECT e.idcase, e.activity, e.timestamp, e.resource FROM event_log e WHERE e.timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'End trip' ) ORDER BY e.timestamp;
SELECT e.idcase, e.activity, e.timestamp, e.resource FROM event_log e WHERE e.timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'End trip' ) ORDER BY e.timestamp;
SELECT e.idcase, e.activity, e.timestamp, e.resource FROM event_log e JOIN event_log et ON e.idcase = et.idcase WHERE et.activity = 'End trip' AND e.timestamp > et.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e.idcase, e.activity, e.timestamp, e.resource FROM event_log e JOIN event_log et ON e.idcase = et.idcase WHERE et.activity = 'End trip' AND e.timestamp > et.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e.idcase, e.activity, e.timestamp, e.resource FROM event_log e JOIN ( SELECT idcase, timestamp FROM event_log WHERE activity = 'End trip' ) end_trip_events ON e.idcase = end_trip_events.idcase AND e.timestamp > end_trip_events.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e.idcase, e.timestamp, e.resource FROM event_log e JOIN ( SELECT idcase, timestamp FROM event_log WHERE activity = 'End trip' ) end_trip_events ON e.idcase = end_trip_events.idcase AND e.timestamp > end_trip_events.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e.idcase, e.timestamp, e.resource FROM event_log e JOIN event_log et ON e.idcase = et.idcase WHERE et.activity = 'End trip' AND e.timestamp > et.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e2.idcase, e2.activity, e2.timestamp, e2.resource FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'End trip' AND e2.timestamp > e1.timestamp ORDER BY e2.idcase, e2.timestamp;
SELECT e.idcase, e.timestamp, e.activity, e.resource FROM event_log e JOIN event_log et ON e.idcase = et.idcase WHERE et.activity = 'End trip' AND e.timestamp > et.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e.idcase, e.activity, e.timestamp, e.resource FROM event_log e JOIN event_log et ON e.idcase = et.idcase WHERE et.activity = 'End trip' AND e.timestamp > et.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e1.idcase, e1.activity, e1.timestamp, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp ORDER BY e1.timestamp;
SELECT e1.idcase, e1.activity, e1.timestamp, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp ORDER BY e1.idcase, e1.timestamp;
SELECT e.idcase, e.timestamp, e.activity, e.resource FROM event_log e JOIN event_log et ON e.idcase = et.idcase WHERE et.activity = 'End trip' AND e.timestamp > et.timestamp ORDER BY e.idcase, e.timestamp;
SELECT e.idcase, e.timestamp, e.resource FROM event_log e WHERE e.timestamp > ( SELECT MAX(e2.timestamp) FROM event_log e2 WHERE e2.activity = 'End trip' AND e2.idcase = e.idcase ) ORDER BY e.idcase, e.timestamp;
SELECT e.idcase, e.activity, e.timestamp, e.resource FROM event_log e JOIN ( SELECT idcase, MAX(timestamp) AS end_trip_timestamp FROM event_log WHERE activity = 'end of trip registration' GROUP BY idcase ) end_trip ON e.idcase = end_trip.idcase WHERE e.timestamp > end_trip.end_trip_timestamp ORDER BY e.idcase, e.timestamp;
SELECT e1.idcase, e2.activity, e2.resource, e2.timestamp FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'End trip' AND e2.timestamp > e1.timestamp ORDER BY e1.idcase, e2.timestamp;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT COUNT(*) AS event_count, resource FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity <> 'End trip' GROUP BY resource;
SELECT resource, COUNT(*) FROM event_log WHERE activity LIKE 'Processing%' AND resource NOT IN ( SELECT resource FROM event_log WHERE activity = 'End trip' ) GROUP BY resource;
SELECT COUNT(*), resource FROM event_log WHERE activity != 'End trip' GROUP BY resource;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase, MIN(timestamp) AS first_action_date FROM event_log GROUP BY idcase ORDER BY first_action_date;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp);
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Request payment';
SELECT COUNT(DISTINCT idcase) AS process_instance_count FROM event_log WHERE activity = 'Request payment';
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity = 'Request payment';
SELECT COUNT(DISTINCT idcase) AS number_of_cases FROM event_log WHERE activity = 'Request payment';
SELECT COUNT(DISTINCT idcase) AS number_of_cases FROM event_log WHERE activity = 'Request payment';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Request payment';
SELECT COUNT(DISTINCT idcase) AS payment_request_count FROM event_log WHERE activity = 'Request payment';
SELECT idcase, MAX(timestamp) AS last_timestamp FROM event_log WHERE activity = 'Declaration final approved by director' GROUP BY idcase ORDER BY last_timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaration final approved by director' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase, MAX(timestamp) AS last_approval_timestamp FROM event_log WHERE activity = 'Declaration final approved by director' GROUP BY idcase ORDER BY last_approval_timestamp DESC LIMIT 1;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource ORDER BY activity_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource ORDER BY activity_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS occurrence_count FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource ORDER BY occurrence_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS event_count FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource ORDER BY event_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource ORDER BY activity_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS approval_count FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource ORDER BY approval_count DESC LIMIT 1;
SELECT resource, COUNT(*) AS approval_count FROM event_log WHERE activity = 'Declaration approved by administration' GROUP BY resource ORDER BY approval_count DESC LIMIT 1;
SELECT resource, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE (idcase, timestamp) IN ( SELECT idcase, MIN(timestamp) FROM event_log GROUP BY idcase ) GROUP BY resource;
WITH FirstEvents AS ( SELECT idcase, resource, MIN(timestamp) AS first_event_time FROM event_log GROUP BY idcase, resource ) SELECT resource, COUNT(DISTINCT idcase) AS cases_responsible_for_first_event FROM FirstEvents WHERE (idcase, first_event_time) IN ( SELECT idcase, MIN(first_event_time) FROM FirstEvents GROUP BY idcase ) GROUP BY resource;
SELECT resource, COUNT(*) AS count_first_activity FROM event_log WHERE (idcase, timestamp) IN ( SELECT idcase, MIN(timestamp) FROM event_log GROUP BY idcase ) GROUP BY resource;
WITH FirstEvents AS ( SELECT idcase, MIN(timestamp) AS first_event_time FROM event_log GROUP BY idcase ) SELECT el.resource, COUNT(*) AS resource_count FROM event_log el JOIN FirstEvents fe ON el.idcase = fe.idcase AND el.timestamp = fe.first_event_time GROUP BY el.resource;
SELECT resource, COUNT(*) AS first_action_count FROM ( SELECT resource, idcase, MIN(timestamp) AS first_timestamp FROM event_log GROUP BY idcase ) AS first_actions JOIN event_log ON first_actions.idcase = event_log.idcase AND first_actions.first_timestamp = event_log.timestamp GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS declaration_count FROM event_log WHERE id IN ( SELECT MIN(id) FROM event_log GROUP BY idcase ) GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS declaration_processes_initiated FROM event_log GROUP BY resource;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT count(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%approved%'
SELECT DATE(timestamp) AS activity_date, COUNT(*) AS rejected_activity_count FROM event_log WHERE activity LIKE '%rejected%' GROUP BY activity_date ORDER BY activity_date;
SELECT DATE(timestamp) AS activity_date, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity LIKE '%rejected%' GROUP BY activity_date ORDER BY activity_date;
SELECT DATE(timestamp) AS activity_date, COUNT(DISTINCT idcase) AS instances_count FROM event_log WHERE activity = 'rejected' GROUP BY activity_date ORDER BY activity_date;
SELECT DATE(timestamp) AS event_date, COUNT(DISTINCT idcase) AS cases_count FROM event_log WHERE activity LIKE '%rejected%' GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS event_date, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity LIKE '%rejected%' GROUP BY event_date ORDER BY event_date;
SELECT DATE(timestamp) AS activity_date, COUNT(DISTINCT idcase) AS rejected_cases_count FROM event_log WHERE activity LIKE '%rejected%' GROUP BY activity_date ORDER BY activity_date;
SELECT DATE(timestamp) AS rejection_date, COUNT(*) AS rejection_count FROM event_log WHERE activity LIKE '%rejected%' GROUP BY rejection_date ORDER BY rejection_date;
SELECT DATE(timestamp) AS declaration_date, COUNT(DISTINCT idcase) AS rejection_count FROM event_log WHERE activity = 'Declaration rejected by director' GROUP BY declaration_date ORDER BY declaration_date;
SELECT idcase, COUNT(*) AS event_count, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY event_count DESC LIMIT 5;
SELECT idcase, COUNT(*) AS event_count, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY event_count DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase ORDER BY COUNT(*) DESC;
SELECT idcase, COUNT(*) AS event_count, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase ORDER BY event_count DESC LIMIT 5;
SELECT idcase, COUNT(*) AS activity_count, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 5;
SELECT idcase, COUNT(*) AS event_count, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase ORDER BY event_count DESC;
SELECT idcase, COUNT(*) AS action_count, (strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp))) AS processing_time FROM event_log GROUP BY idcase ORDER BY action_count DESC LIMIT 5;
SELECT idcase, COUNT(*) AS action_count, (strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp))) AS processing_time FROM event_log GROUP BY idcase ORDER BY action_count DESC LIMIT 5;
SELECT idcase, COUNT(*) AS event_count, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY event_count DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY event_count DESC LIMIT 5;
SELECT idcase, COUNT(activity) AS activity_count, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase HAVING COUNT(activity) >= 20 ORDER BY activity_count DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase HAVING COUNT(activity) >= 20 ORDER BY COUNT(activity) DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY event_count DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY event_count DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY duration DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS processing_time FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY processing_time DESC LIMIT 5;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' ) ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' ) ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log e1 WHERE NOT EXISTS ( SELECT 1 FROM event_log e2 WHERE e1.idcase = e2.idcase AND e2.activity = 'Request payment' ) ORDER BY MAX(e1.timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY MAX(timestamp) DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Processing declaration' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') ORDER BY timestamp DESC LIMIT 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING count(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS action_count FROM event_log GROUP BY idcase HAVING COUNT(*) >= 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT AVG(cost) FROM event_log WHERE activity = 'Payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'Payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'payment handled' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity LIKE '%payment%' AND timestamp < '2018-01-01';
SELECT idcase, COUNT(*) AS permit_activity_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS permit_activity_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS permit_activity_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS permit_activity_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS permit_event_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS permit_activity_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS permit_count FROM event_log WHERE activity LIKE '%Permit%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS permit_event_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT e.idcase, COUNT(*) AS permit_count FROM event_log e WHERE e.activity = 'Permit registered' GROUP BY e.idcase;
SELECT idcase, COUNT(*) AS permit_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, GROUP_CONCAT(DISTINCT resource) AS resources FROM event_log WHERE activity = 'Declaration rejected by supervisor';
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource;
SELECT COUNT(DISTINCT idcase) AS case_count, resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS rejection_count FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource;
SELECT resource AS supervisor, COUNT(DISTINCT idcase) AS declarations_rejected FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource ORDER BY declarations_rejected DESC;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS declaration_count FROM event_log GROUP BY activity ORDER BY declaration_count DESC;
SELECT activity, COUNT(DISTINCT idcase) AS declaration_count FROM event_log GROUP BY activity;
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' );
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%');
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%');
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%');
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' );
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%');
SELECT DISTINCT r.activity FROM event_log r JOIN event_log d ON r.timestamp > d.timestamp WHERE r.activity LIKE 'R%' AND d.activity LIKE 'D%'
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT resource, activity, COUNT(*) AS activity_count FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT resource, activity, COUNT(*) AS activity_count FROM event_log GROUP BY resource, activity
SELECT resource, activity, COUNT(*) AS activity_count FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT resource, activity, COUNT(*) AS activity_count FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT activity, resource, COUNT(*) AS resource_count FROM event_log GROUP BY activity, resource ORDER BY activity, resource;
SELECT activity, resource, COUNT(*) AS action_count FROM event_log GROUP BY activity, resource ORDER BY activity, resource;
SELECT resource, activity, COUNT(*) AS activity_count FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-01';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-01';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' GROUP BY idcase ORDER BY idcase ASC;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(strftime('%Y-%m-%d', timestamp)) = '2018-03-12' ) GROUP BY activity;
SELECT COUNT(DISTINCT el.idcase) AS process_instance_count, el.activity FROM event_log el WHERE el.idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) = '2018-03-12' ) GROUP BY el.activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE DATE(timestamp) = '2018-03-02' GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS number_of_cases FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) <= '2018-03-02' ) GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(strftime('%Y-%m-%d', timestamp)) = '2018-03-02' ) GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(strftime('%Y-%m-%d', timestamp)) = '2018-03-02' ) GROUP BY activity;
SELECT COUNT(*) AS count, activity FROM event_log WHERE DATE(timestamp) = '2018-03-02' GROUP BY activity;
SELECT activity, COUNT(*) AS action_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE DATE(timestamp) = '2018-03-02' GROUP BY idcase HAVING MIN(timestamp) >= '2018-03-02 00:00:00' AND MAX(timestamp) <= '2018-03-02 23:59:59' ) GROUP BY activity;
SELECT COUNT(DISTINCT idcase) AS case_count FROM ( SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' AND timestamp = ( SELECT MIN(timestamp) FROM event_log AS el2 WHERE el2.idcase = event_log.idcase ) ) AS first_activities;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE 'Permit%' AND id IN (SELECT MIN(id) FROM event_log GROUP BY idcase);
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity LIKE 'Permit%';
SELECT COUNT(DISTINCT idcase) AS number_of_cases FROM ( SELECT idcase, MIN(timestamp) AS first_event_time FROM event_log GROUP BY idcase ) AS first_events JOIN event_log ON first_events.idcase = event_log.idcase AND first_events.first_event_time = event_log.timestamp WHERE event_log.activity LIKE 'Permit%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE id IN ( SELECT id FROM event_log WHERE activity LIKE 'Permit%' AND (idcase, timestamp) IN ( SELECT idcase, MIN(timestamp) FROM event_log GROUP BY idcase ) );
SELECT COUNT(DISTINCT idcase) AS num_process_instances FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' AND timestamp = ( SELECT MIN(timestamp) FROM event_log AS el2 WHERE el2.idcase = event_log.idcase ) );
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE id IN ( SELECT MIN(id) FROM event_log GROUP BY idcase ) AND activity LIKE 'Permit%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE 'Permit%' AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) = timestamp );
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'permit' AND id IN ( SELECT MIN(id) FROM event_log GROUP BY idcase );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') );
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' ) AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Payment handled' );
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Payment handled', 'Request payment') );
SELECT DISTINCT idcase FROM event_log WHERE idcase IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment') AND idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT * FROM event_log WHERE activity IN ('Start trip', 'Declaration submitted by employee') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Declaration submitted by employee' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Start trip', 'Declaration submitted by employee') ORDER BY timestamp ASC, resource ASC;
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Declaration submitted by employee' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Declaration submitted by employee' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Declaration submitted by employee' ORDER BY timestamp ASC, resource ASC;
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Declaration submitted by employee' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity = 'Start trip' OR activity = 'Declaration submitted by employee' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Start trip', 'Declaration submitted by employee') ORDER BY timestamp, resource;
SELECT e.timestamp, e.resource, e.activity FROM event_log AS e WHERE e.activity IN ('Initiate travel', 'Request declaration') ORDER BY e.timestamp, e.resource;
SELECT id, activity, timestamp, resource FROM event_log WHERE activity = 'Start trip' OR activity = 'Request declaration' ORDER BY timestamp ASC;
SELECT resource, COUNT(*) FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS record_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) FROM event_log WHERE activity = 'declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS occurrence_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS performance_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS action_count FROM event_log WHERE activity = 'Save travel declaration' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS save_count FROM event_log WHERE activity = 'save declaration' GROUP BY resource ORDER BY resource ASC;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS process_instance_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS process_instance_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS declaration_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS declaration_count FROM event_log GROUP BY activity;
SELECT resource, COUNT(DISTINCT activity) AS different_activities FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS distinct_activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS activity_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY resource; -- This will list the results alphabetically by resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS num_different_activities FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS distinct_action_count FROM event_log GROUP BY resource;
SELECT resource, COUNT(DISTINCT activity) AS distinct_actions_count FROM event_log GROUP BY resource;
SELECT COUNT(*) AS occurrence_count, resource FROM event_log WHERE activity IN ('end trip', 'payment handled') GROUP BY resource;
SELECT COUNT(*), resource FROM event_log WHERE activity IN ('End trip', 'Payment handled') GROUP BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity IN ('End trip', 'Payment handled') GROUP BY resource;
SELECT COUNT(*), resource FROM event_log WHERE activity IN ('End trip', 'Payment handled') GROUP BY resource;
SELECT resource, COUNT(*) AS activity_count FROM event_log WHERE activity IN ('end trip', 'payment handled') GROUP BY resource;
SELECT COUNT(*), resource FROM event_log WHERE activity IN ('End trip', 'Payment handled') GROUP BY resource;
SELECT resource, COUNT(*) AS completion_count FROM event_log WHERE activity IN ('end of trip', 'payment') GROUP BY resource;
SELECT COUNT(*), resource FROM event_log WHERE activity IN ('End trip', 'Make payment') GROUP BY resource;
WITH FirstOccurrence AS ( SELECT idcase, resource, MIN(timestamp) AS first_timestamp FROM event_log WHERE activity = 'Declaration rejected by pre-approver' GROUP BY idcase, resource ) SELECT resource, COUNT(*) AS occurrence_count FROM FirstOccurrence GROUP BY resource;
WITH FirstOccurrence AS ( SELECT idcase, resource, MIN(timestamp) AS first_timestamp FROM event_log WHERE activity = 'Declaration rejected by pre-approver' GROUP BY idcase, resource ) SELECT resource, COUNT(*) AS case_count FROM FirstOccurrence GROUP BY resource;
WITH FirstOccurrence AS ( SELECT idcase, resource, MIN(timestamp) AS first_timestamp FROM event_log WHERE activity = 'Declaration rejected by pre-approver' GROUP BY idcase, resource ) SELECT resource, COUNT(DISTINCT idcase) AS process_instance_count FROM FirstOccurrence GROUP BY resource;
WITH FirstOccurrence AS ( SELECT idcase, resource, MIN(timestamp) AS first_timestamp FROM event_log WHERE activity = 'declaration rejected by pre-approver' GROUP BY idcase, resource ) SELECT resource, COUNT(*) AS occurrence_count FROM FirstOccurrence GROUP BY resource;
WITH FirstOccurrence AS ( SELECT idcase, resource, MIN(timestamp) AS first_timestamp FROM event_log WHERE activity = 'declaration rejected by pre-approver' GROUP BY idcase, resource ) SELECT resource, COUNT(*) AS occurrence_count FROM FirstOccurrence GROUP BY resource;
SELECT resource, COUNT(DISTINCT idcase) AS cases_rejected FROM event_log WHERE activity = 'Declaration rejected by pre-approver' GROUP BY resource;
SELECT To answer the question about how many travel declarations each employee in the role of pre-approver has been responsible for taking the first action regarding declaration rejection, you would typically need to filter the `event_log` table for actions related to declaration rejection and ensure that you are only considering the first action taken by each pre-approver for each travel declaration. Assuming that the activity related to rejection is labeled as 'Declaration rejected' and that the role of the pre-approver can be identified through the `resource` field (or possibly another field if it exists), you can use the following SQL query: ```sql SELECT resource, COUNT(DISTINCT idcase) AS rejection_count FROM ( SELECT resource, idcase, activity, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS rn FROM event_log WHERE activity = 'Declaration rejected' AND resource LIKE '%pre-approver%' ) AS subquery WHERE rn =
SELECT idcase, COUNT(*) AS activity_count FROM event_log e1 WHERE activity <> 'End trip' AND timestamp < ( SELECT MIN(timestamp) FROM event_log e2 WHERE e2.idcase = e1.idcase AND e2.activity = 'End trip' ) GROUP BY idcase;
WITH end_trip_times AS ( SELECT idcase, timestamp FROM event_log WHERE activity = 'End trip' ) SELECT el.idcase, COUNT(*) AS activity_count FROM event_log el JOIN end_trip_times ett ON el.idcase = ett.idcase AND el.timestamp < ett.timestamp GROUP BY el.idcase;
SELECT idcase, COUNT(*) AS activity_count FROM event_log WHERE timestamp < (SELECT MIN(timestamp) FROM event_log AS sub WHERE sub.activity = 'End trip' AND sub.idcase = event_log.idcase) GROUP BY idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log WHERE timestamp < ( SELECT MIN(timestamp) FROM event_log AS el2 WHERE el2.activity = 'End trip' AND el2.idcase = event_log.idcase ) GROUP BY idcase;
WITH end_trip_events AS ( SELECT idcase, MIN(timestamp) AS end_trip_time FROM event_log WHERE activity = 'End trip' GROUP BY idcase ) SELECT e.idcase, COUNT(e.activity) AS activity_count FROM event_log e JOIN end_trip_events et ON e.idcase = et.idcase WHERE e.timestamp < et.end_trip_time GROUP BY e.idcase;
WITH end_trip_events AS ( SELECT idcase, MIN(timestamp) AS end_trip_time FROM event_log WHERE activity = 'End trip' GROUP BY idcase ) SELECT el.idcase, COUNT(el.activity) AS activity_count FROM event_log el JOIN end_trip_events ete ON el.idcase = ete.idcase WHERE el.timestamp < ete.end_trip_time GROUP BY el.idcase;
SELECT idcase, COUNT(*) AS event_count FROM event_log WHERE timestamp < ( SELECT MIN(timestamp) FROM event_log AS el2 WHERE el2.idcase = event_log.idcase AND el2.activity = 'End trip' ) GROUP BY idcase;
WITH end_trip_events AS ( SELECT idcase, MIN(timestamp) AS end_trip_time FROM event_log WHERE activity = 'End trip' GROUP BY idcase ) SELECT el.idcase, COUNT(*) AS event_count FROM event_log el JOIN end_trip_events ete ON el.idcase = ete.idcase WHERE el.timestamp < ete.end_trip_time GROUP BY el.idcase;
SELECT e.idcase, COUNT(*) AS event_count FROM event_log e WHERE e.timestamp < (SELECT MIN(timestamp) FROM event_log WHERE activity = 'End trip' AND idcase = e.idcase) GROUP BY e.idcase;
SELECT e1.idcase, COUNT(e1.id) AS action_count FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp < e2.timestamp GROUP BY e1.idcase;
SELECT idcase, COUNT(*) AS action_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'End trip' ) GROUP BY idcase;
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30'
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity, count(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30' GROUP BY activity;
SELECT activity, COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30' GROUP BY activity;
SELECT idcase, timestamp, resource FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaration rejected by supervisor' ORDER BY (SELECT MIN(timestamp) FROM event_log AS el WHERE el.idcase = event_log.idcase);
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT DISTINCT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp ASC;
SELECT idcase FROM event_log WHERE activity = 'Rejected by supervisor' GROUP BY idcase ORDER BY MIN(timestamp) ASC;
SELECT idcase, timestamp, resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Start trip' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp < '2018-03-01' );
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Start trip' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp < '2018-03-01' );
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Start trip' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp < '2018-04-01' );
SELECT DISTINCT idcase FROM event_log WHERE activity = 'start trip' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp < '2018-03-31' );
SELECT DISTINCT idcase FROM event_log WHERE activity = 'start trip' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp < '2018-04-01' );
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Start trip' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE timestamp <= '2018-03-31' );
SELECT DISTINCT idcase FROM event_log WHERE activity = 'start trip' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'end trip' AND timestamp < '2018-03-31' );
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Start trip' ) AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp < '2018-03-31' );
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Start trip' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp <= '2018-03-31' );
SELECT DISTINCT e.idcase FROM event_log e WHERE e.activity = 'Start trip' AND e.idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND timestamp <= '2018-03-31' );
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Start trip' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE timestamp <= '2018-03-31' )
SELECT idcase FROM event_log WHERE activity = 'End trip' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'End trip' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'End trip' GROUP BY idcase HAVING COUNT(CASE WHEN activity IN ('Request payment', 'Payment handled') THEN 1 END) = 0 AND COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'End trip' GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' );
SELECT idcase FROM event_log WHERE activity = 'End trip' GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' );
SELECT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'End trip' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'End trip' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Payment handled') AND idcase IN (SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('Payment handled', 'Request payment'))
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' );
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS distinct_resource_count, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS unique_resource_count, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS resource_count, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS resource_count FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_people, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(activity) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(activity) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(activity) >= 2;
SELECT idcase, COUNT(*) AS permit_count FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT DISTINCT el1.idcase FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity LIKE '%permit%' AND el2.activity LIKE '%declaration%'
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT el.id FROM event_log el JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log GROUP BY idcase ) AS last_events ON el.idcase = last_events.idcase AND el.timestamp = last_events.max_timestamp ORDER BY el.timestamp;
WITH LastEvents AS ( SELECT idcase, MAX(timestamp) AS LastTimestamp FROM event_log GROUP BY idcase ) SELECT el.id, el.activity, el.timestamp, el.idcase FROM event_log el JOIN LastEvents le ON el.idcase = le.idcase AND el.timestamp = le.LastTimestamp ORDER BY le.LastTimestamp;
SELECT e.id, e.activity, e.timestamp, e.resource, e.cost, e.idcase FROM event_log e JOIN ( SELECT idcase, MAX(timestamp) AS last_event_time FROM event_log GROUP BY idcase ) AS last_events ON e.idcase = last_events.idcase AND e.timestamp = last_events.last_event_time ORDER BY e.timestamp;
SELECT idcase, activity, timestamp, resource FROM event_log AS e WHERE timestamp = ( SELECT MAX(timestamp) FROM event_log WHERE idcase = e.idcase ) ORDER BY timestamp;
SELECT e.id FROM event_log e JOIN ( SELECT idcase, MAX(timestamp) AS last_event_time FROM event_log GROUP BY idcase ) AS last_events ON e.idcase = last_events.idcase AND e.timestamp = last_events.last_event_time ORDER BY e.timestamp;
SELECT e.id FROM event_log e JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log GROUP BY idcase ) AS last_events ON e.idcase = last_events.idcase AND e.timestamp = last_events.max_timestamp ORDER BY last_events.max_timestamp;
SELECT id, activity, timestamp, idcase FROM event_log WHERE (idcase, timestamp) IN ( SELECT idcase, MAX(timestamp) FROM event_log GROUP BY idcase ) ORDER BY timestamp;
WITH LastEvents AS ( SELECT idcase, MAX(timestamp) AS last_timestamp FROM event_log GROUP BY idcase ) SELECT el.id, el.activity, el.timestamp, el.resource, el.cost, el.idcase FROM event_log el JOIN LastEvents le ON el.idcase = le.idcase AND el.timestamp = le.last_timestamp ORDER BY el.timestamp;
SELECT e.id, e.activity, e.timestamp, e.resource, e.cost, e.idcase FROM event_log e JOIN ( SELECT idcase, MAX(timestamp) AS last_timestamp FROM event_log GROUP BY idcase ) AS last_intervention ON e.idcase = last_intervention.idcase AND e.timestamp = last_intervention.last_timestamp ORDER BY e.idcase;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity, COUNT(*) AS occurrence_count FROM event_log GROUP BY activity HAVING COUNT(*) > 100;
SELECT activity, COUNT(*) AS occurrence_count FROM event_log GROUP BY activity HAVING COUNT(*) > 100;
SELECT activity, COUNT(*) AS occurrence_count FROM event_log GROUP BY activity HAVING COUNT(*) > 100;
SELECT activity, COUNT(*) FROM event_log GROUP BY activity HAVING COUNT(*) > 100;
SELECT To list the number of cases in which an activity for each group of employees (employee, supervisor, administration, pre-approver, budget owner, director) was recorded, you can use the following SQL query. This query counts the distinct cases for each group based on the activities associated with them: ```sql SELECT COUNT(DISTINCT idcase) AS case_count, 'employee' AS grupo FROM event_log WHERE activity LIKE '%employee%' UNION ALL SELECT COUNT(DISTINCT idcase), 'supervisor' FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT COUNT(DISTINCT idcase), 'administration' FROM event_log WHERE activity LIKE '%administration%' UNION ALL SELECT COUNT(DISTINCT idcase), 'pre-approver' FROM event_log WHERE activity LIKE '%pre-approver%' UNION ALL SELECT COUNT(DISTINCT idcase),
SELECT To answer the question of how many cases each group of employees (employee, supervisor, administration, pre-approver, budget owner, director) was involved in, you can use the following SQL query. This query will count the distinct cases for each group based on the activities logged in the `event_log` table. ```sql SELECT CASE WHEN activity LIKE '%employee%' THEN 'employee' WHEN activity LIKE '%supervisor%' THEN 'supervisor' WHEN activity LIKE '%administration%' THEN 'administration' WHEN activity LIKE '%pre-approver%' THEN 'pre-approver' WHEN activity LIKE '%budget owner%' THEN 'budget owner' WHEN activity LIKE '%director%' THEN 'director' ELSE 'other' END AS grupo, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity LIKE '%employee%' OR activity LIKE '%supervisor%' OR activity LIKE '%administration%'
SELECT To answer the question regarding the number of cases in which an activity associated with each group of employees (employee, supervisor, administration, pre-approver, budget owner, director) was performed, you can use a SQL query that counts distinct cases for each group based on the activity names. Here's how you can structure the query: ```sql SELECT COUNT(DISTINCT idcase) AS case_count, 'employee' AS grupo FROM event_log WHERE activity LIKE '%employee%' UNION ALL SELECT COUNT(DISTINCT idcase) AS case_count, 'supervisor' AS grupo FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT COUNT(DISTINCT idcase) AS case_count, 'administration' AS grupo FROM event_log WHERE activity LIKE '%administration%' UNION ALL SELECT COUNT(DISTINCT idcase) AS case_count, 'pre-
SELECT To list the number of cases in which at least one activity related to each group of employees (employee, supervisor, administration, pre-approver, budget owner, director) was performed, you can use the following SQL query. This query will count distinct cases for each group based on the activities associated with them: ```sql SELECT 'employee' AS grupo, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity LIKE '%employee%' UNION ALL SELECT 'supervisor' AS grupo, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT 'administration' AS grupo, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE activity LIKE '%administration%' UNION ALL SELECT 'pre-approver' AS grupo, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE
SELECT To answer the question regarding the number of declarations in which an activity for each employee group (employee, supervisor, administration, pre-approver, budget owner, director) was recorded, you can use the following SQL query. This query counts the distinct cases (`idcase`) for each group based on the activities associated with them. Here's how you can structure the SQL query: ```sql SELECT COUNT(DISTINCT idcase) AS declaration_count, 'employee' AS grupo FROM event_log WHERE activity LIKE '%employee%' UNION ALL SELECT COUNT(DISTINCT idcase), 'supervisor' FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT COUNT(DISTINCT idcase), 'administration' FROM event_log WHERE activity LIKE '%administration%' UNION ALL SELECT COUNT(DISTINCT idcase), 'pre-approver' FROM event_log WHERE activity LIKE '%pre-approver%' UNION ALL SELECT COUNT
SELECT activity, COUNT(*) AS activity_count FROM event_log GROUP BY activity ORDER BY CASE WHEN activity = 'employee' THEN 1 WHEN activity = 'supervisor' THEN 2 WHEN activity = 'administration' THEN 3 WHEN activity = 'pre-approver' THEN 4 WHEN activity = 'budget owner' THEN 5 WHEN activity = 'director' THEN 6 ELSE 7 -- for any other activities not listed END, activity_count DESC; -- secondary sort by count of activities in descending order
SELECT To present a list of activities associated with each resource group (employee, supervisor, administration, pre-approver, budget owner, director) and order the list according to the number of times each group's activities were performed, you can use the following SQL query: ```sql SELECT activity, CASE WHEN activity LIKE '%employee%' THEN 'employee' WHEN activity LIKE '%supervisor%' THEN 'supervisor' WHEN activity LIKE '%administration%' THEN 'administration' WHEN activity LIKE '%pre-approver%' THEN 'pre-approver' WHEN activity LIKE '%budget owner%' THEN 'budget owner' WHEN activity LIKE '%director%' THEN 'director' ELSE 'other' END AS grupo, COUNT(*) AS activity_count FROM event_log WHERE activity LIKE '%employee%' OR activity LIKE '%supervisor%' OR activity LIKE '%administration%' OR activity LIKE '%pre-approver%' OR activity
SELECT To create an ordered list with the number of times that actions from each group (employee, supervisor, administration, pre-approver, budget owner, director) were carried out, you can use the following SQL query. This query counts the occurrences of activities related to each group and orders the results by the count in descending order: ```sql SELECT COUNT(*) AS action_count, 'employee' AS grupo FROM event_log WHERE activity LIKE '%employee%' UNION ALL SELECT COUNT(*) AS action_count, 'supervisor' AS grupo FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT COUNT(*) AS action_count, 'administration' AS grupo FROM event_log WHERE activity LIKE '%administration%' UNION ALL SELECT COUNT(*) AS action_count, 'pre-approver' AS grupo FROM event_log WHERE activity LIKE '%pre-approver%' UNION ALL SELECT COUNT(*) AS action_count, 'budget owner' AS grupo
SELECT DISTINCT e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp;
SELECT DISTINCT e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp;
SELECT DISTINCT e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp;
SELECT DISTINCT e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp;
SELECT DISTINCT e1.idcase FROM event_log e1 WHERE e1.timestamp > ( SELECT MAX(e2.timestamp) FROM event_log e2 WHERE e2.activity = 'End trip' AND e2.idcase = e1.idcase )
SELECT DISTINCT e1.idcase FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE (idcase, timestamp) IN ( SELECT idcase, MAX(timestamp) FROM event_log GROUP BY idcase ) AND activity = 'Send reminder' );
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Send reminder' AND timestamp = ( SELECT MAX(timestamp) FROM event_log AS e2 WHERE e2.idcase = event_log.idcase );
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE (idcase, timestamp) IN ( SELECT idcase, MAX(timestamp) FROM event_log GROUP BY idcase ) AND activity = 'Send reminder';
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log AS e1 WHERE activity = 'Send reminder' AND timestamp = ( SELECT MAX(timestamp) FROM event_log AS e2 WHERE e1.idcase = e2.idcase ) );
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Send reminder' AND timestamp = ( SELECT MAX(timestamp) FROM event_log WHERE idcase = event_log.idcase ) );
SELECT COUNT(*) AS stuck_count FROM event_log WHERE activity = 'Send reminder' AND idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity <> 'Send reminder' );
SELECT DISTINCT resource FROM event_log WHERE resource IS NOT NULL AND resource NOT IN ( SELECT DISTINCT resource FROM event_log WHERE DATE(timestamp) = '2018-03-31' );
SELECT DISTINCT resource FROM event_log WHERE resource IS NOT NULL AND resource NOT IN ( SELECT resource FROM event_log WHERE DATE(timestamp) = '2018-03-31' );
SELECT DISTINCT resource FROM event_log WHERE resource IS NOT NULL AND resource NOT IN ( SELECT DISTINCT resource FROM event_log WHERE DATE(timestamp) = '2018-03-31' );
SELECT DISTINCT resource FROM event_log WHERE resource IS NOT NULL AND resource NOT IN ( SELECT DISTINCT resource FROM event_log WHERE DATE(timestamp) = '2018-03-31' );
SELECT DISTINCT resource FROM event_log WHERE resource NOT IN ( SELECT DISTINCT resource FROM event_log WHERE DATE(timestamp) = '2018-03-31' );
SELECT e.resource FROM employees e WHERE e.resource NOT IN ( SELECT DISTINCT resource FROM event_log WHERE DATE(timestamp) = '2018-03-31' );
SELECT activity, COUNT(*) AS event_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) BETWEEN '2018-12-01' AND '2018-12-05' ) GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) BETWEEN '2018-12-01' AND '2018-12-05' ) GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS performance_frequency FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) BETWEEN '2018-12-01' AND '2018-12-05' ) GROUP BY activity;
SELECT activity, COUNT(*) AS performance_frequency FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) BETWEEN '2018-12-01' AND '2018-12-05' ) GROUP BY activity;
SELECT activity, COUNT(*) AS activity_count FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) BETWEEN '2018-12-01' AND '2018-12-05' ) GROUP BY activity;
SELECT activity, COUNT(DISTINCT idcase) AS frequency FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) BETWEEN '2018-12-01' AND '2018-12-05' ) GROUP BY activity;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT COUNT(DISTINCT idcase) AS cases_without_payment_handled FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' );
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' );
SELECT activity, COUNT(DISTINCT resource) AS unique_resource_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS distinct_resource_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS distinct_resource_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS unique_resource_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS distinct_resource_count FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS employee_count FROM event_log GROUP BY activity;
SELECT e1.activity, e1.timestamp, e1.resource, e1.idcase FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Send reminder' AND e1.timestamp < e2.timestamp ORDER BY e1.timestamp;
SELECT idcase, resource, id, activity, timestamp FROM event_log WHERE timestamp < ( SELECT timestamp FROM event_log WHERE activity = 'Send reminder' AND idcase = event_log.idcase ) ORDER BY idcase, timestamp;
WITH ReminderEvents AS ( SELECT idcase, timestamp FROM event_log WHERE activity = 'Send reminder' ) SELECT DISTINCT e.activity FROM event_log e JOIN ReminderEvents r ON e.idcase = r.idcase WHERE e.timestamp < r.timestamp ORDER BY e.activity;
SELECT event_count, COUNT(*) AS case_count FROM ( SELECT COUNT(*) AS event_count, idcase FROM event_log GROUP BY idcase ) AS case_events GROUP BY event_count ORDER BY event_count;
-- Step 1: Calculate the number of events per case WITH EventCounts AS ( SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ) -- Step 2: Count how many cases have each event count SELECT event_count, COUNT(*) AS case_count FROM EventCounts GROUP BY event_count ORDER BY event_count;
SELECT event_count, COUNT(*) AS case_count FROM ( SELECT COUNT(*) AS event_count, idcase FROM event_log GROUP BY idcase ) AS case_events GROUP BY event_count ORDER BY event_count;
SELECT event_count, COUNT(*) AS case_count FROM ( SELECT COUNT(*) AS event_count, idcase FROM event_log GROUP BY idcase ) AS event_counts GROUP BY event_count ORDER BY event_count;
SELECT event_count, COUNT(*) AS declaration_count FROM ( SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase ) AS subquery GROUP BY event_count ORDER BY event_count;
SELECT AVG(total_cost) FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(total_cost) AS mean_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(total_cost) FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(total_cost) AS mean_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(total_cost) AS mean_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_totals;
SELECT AVG(total_cost) AS average_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS mean_cost FROM event_log GROUP BY resource;
SELECT employee_id, AVG(cost) AS mean_cost FROM event_log GROUP BY employee_id;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 10;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 10;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 10;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 10;
SELECT resource, COUNT(*) AS event_count FROM event_log GROUP BY resource ORDER BY event_count DESC LIMIT 10;
SELECT resource, COUNT(*) AS request_count FROM event_log WHERE activity = 'Travel Declaration' -- Assuming 'Travel Declaration' is the activity related to processing travel declarations GROUP BY resource ORDER BY request_count DESC LIMIT 10;
SELECT strftime('%Y-%m-%d', timestamp) AS event_date, COUNT(*) AS event_count FROM event_log GROUP BY strftime('%Y-%m-%d', timestamp);
SELECT DATE(timestamp) AS activity_date, activity, COUNT(*) AS occurrences FROM event_log GROUP BY activity_date, activity ORDER BY activity_date, activity;
SELECT DATE(timestamp) AS action_date, COUNT(*) AS action_count FROM event_log GROUP BY action_date ORDER BY action_date;
SELECT DISTINCT e1.idcase, e1.activity FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase AND e1.activity = e2.activity AND e1.resource <> e2.resource AND e1.timestamp < e2.timestamp
SELECT e1.idcase FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = e2.activity AND e1.timestamp < e2.timestamp AND e1.resource <> e2.resource ORDER BY e1.idcase, e1.timestamp;
SELECT To find out for which declarations the same action was recorded consecutively but carried out by different employees, you can use a self-join on the `event_log` table. The idea is to join the table with itself, looking for consecutive records (based on the timestamp) that have the same activity but different resources (employees) for the same case (idcase). Here’s how you can write the SQL query: ```sql SELECT e1.idcase, e1.activity, e1.resource AS resource1, e2.resource AS resource2, e1.timestamp AS timestamp1, e2.timestamp AS timestamp2 FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase AND e1.activity = e2.activity AND e1.timestamp < e2.timestamp AND e1.resource <> e2.resource ORDER BY e1.idcase
SELECT e.idcase, COUNT(*) AS event_count FROM event_log e WHERE e.timestamp < ( SELECT MIN(sub.timestamp) FROM event_log sub WHERE sub.activity = 'Declaration final approved by director' AND sub.idcase = e.idcase ) AND e.idcase IN ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaration final approved by director' ) GROUP BY e.idcase;
SELECT e.idcase, COUNT(*) AS events_before FROM event_log e WHERE e.timestamp < (SELECT MIN(timestamp) FROM event_log WHERE activity = 'Declaration final approved by director' AND idcase = e.idcase) GROUP BY e.idcase HAVING COUNT(*) > 0; -- Optional: Only include cases with preceding events
SELECT idcase, COUNT(*) AS intervention_count FROM event_log WHERE timestamp < ( SELECT MAX(timestamp) FROM event_log AS el WHERE el.idcase = event_log.idcase AND el.activity = 'Declaration final approved by director' ) GROUP BY idcase;
SELECT e1.idcase, e1.timestamp AS submitted_time, e2.timestamp AS approved_time, julianday(e2.timestamp) - julianday(e1.timestamp) AS time_difference_days FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Permit submitted by employee' AND e2.activity = 'Permit approved by administration';
SELECT e1.idcase, e1.timestamp AS permit_submitted_time, e2.timestamp AS permit_approved_time, julianday(e2.timestamp) - julianday(e1.timestamp) AS time_interval_days FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Permit submitted by employee' AND e2.activity = 'Permit approved by administration' ORDER BY e1.timestamp;
WITH RequestAndApproval AS ( SELECT r.idcase, r.timestamp AS request_time, a.timestamp AS approval_time FROM event_log r INNER JOIN event_log a ON r.idcase = a.idcase WHERE r.activity = 'Permit requested' AND a.activity = 'Permit approved by administration' ) SELECT idcase, COALESCE(strftime('%s', approval_time) - strftime('%s', request_time), 0) AS duration FROM RequestAndApproval;
SELECT DISTINCT idcase FROM ( SELECT idcase, activity, LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_activity FROM event_log ) AS subquery WHERE activity = next_activity;
SELECT DISTINCT idcase FROM ( SELECT idcase, activity, LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_activity FROM event_log ) AS subquery WHERE activity = next_activity;
SELECT DISTINCT idcase FROM ( SELECT idcase, activity, LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_activity FROM event_log ) AS subquery WHERE activity = next_activity;
SELECT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1;
SELECT DISTINCT(idcase) FROM ( SELECT idcase, activity, LAG(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS previous_activity FROM event_log ) AS subquery WHERE activity = previous_activity;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1;
SELECT DISTINCT e1.idcase FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = e2.activity AND e1.timestamp > e2.timestamp AND NOT EXISTS ( SELECT 1 FROM event_log e3 WHERE e3.idcase = e1.idcase AND e3.timestamp > e2.timestamp AND e3.timestamp < e1.timestamp )
WITH ConsecutiveActivities AS ( SELECT idcase, activity, LAG(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS previous_activity FROM event_log ) SELECT idcase, activity FROM ConsecutiveActivities WHERE activity = previous_activity ORDER BY idcase, activity;
SELECT To report which cases have undergone rework situations, specifically focusing on sequences of the performance of the same activity, you can use a query that identifies cases where the same activity has been performed more than once. This can be achieved by using a window function to check for consecutive occurrences of the same activity within each case. Here's how you can write that SQL query: ```sql WITH RankedActivities AS ( SELECT idcase, activity, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS rn FROM event_log ), ReworkCases AS ( SELECT ra1.idcase, ra1.activity, ra1.timestamp AS first_timestamp, ra2.timestamp AS second_timestamp FROM RankedActivities ra1 JOIN RankedActivities ra2 ON ra1.idcase = ra2.idcase AND ra1.activity = ra2.activity AND ra1
SELECT To find the declarations where activities of the same type were carried out consecutively, you can use a self-join on the `event_log` table. The idea is to join the table with itself, matching records where the `idcase` is the same and the `activity` is the same, but the timestamps are consecutive (i.e., the timestamp of the second record is greater than the first). Here’s how you can write that SQL query: ```sql SELECT DISTINCT e1.idcase FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = e2.activity AND e1.timestamp < e2.timestamp AND NOT EXISTS ( SELECT 1 FROM event_log e3 WHERE e3.idcase = e1.idcase AND e3.activity = e1.activity AND e3.timestamp > e1.timestamp AND e3.timestamp < e2.timestamp
SELECT DISTINCT e1.idcase FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = e2.activity AND e1.timestamp < e2.timestamp AND e2.timestamp <= ( SELECT MIN(e3.timestamp) FROM event_log e3 WHERE e3.idcase = e1.idcase AND e3.timestamp > e1.timestamp )
WITH ConsecutiveEvents AS ( SELECT idcase, activity, timestamp, LAG(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS previous_activity FROM event_log ) SELECT DISTINCT idcase FROM ConsecutiveEvents WHERE activity = previous_activity;
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%supervisor%'
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%supervisor%'
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%budget%' OR activity LIKE '%approve budget%' OR activity LIKE '%manage budget%';
SELECT DISTINCT(resource) FROM event_log WHERE activity LIKE '%budget owner%'
