SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem';
SELECT COUNT(*) AS "Quantidade de vezes" FROM "event_log" WHERE "activity" LIKE '%end%';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%atualizado%' AND resource = 'James' AND idcase = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%update%' AND resource = 'James' AND idcase = 'fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'FINALIZAÇÃO DE VIAGEM' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%atualizado%' AND resource LIKE '%final de viagem%' AND activity LIKE '%James%';
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_execucoes FROM event_log GROUP BY resource ORDER BY num_execucoes DESC;
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log GROUP BY resource ORDER BY quantidade_execucoes DESC;
SELECT e.idcase, e.activity, COUNT(e.activity) AS total_actions, e.resource AS employee FROM event_log e WHERE e.activity LIKE '%declaração de viagem%' GROUP BY e.idcase, e.activity, e.resource ORDER BY total_actions DESC;
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS quantidade FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%Peter%';
Para responder à sua pergunta, você precisaria ter uma tabela de funcionários com o nome do funcionário e um identificador único. Suponha que essa tabela seja chamada "funcionarios" e tenha as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, você precisaria ter uma tabela que relacione os eventos do log com os funcionários que os executaram. Suponha que essa tabela seja chamada "event_funcionarios" e tenha as seguintes colunas: CREATE TABLE "event_funcionarios" ( "id_event" int, "id_funcionario" int, PRIMARY KEY("id_event", "id_funcionario"), FOREIGN KEY("id_event") REFERENCES "event_log"("id"), FOREIGN KEY("id_funcionario") REFERENCES "funcionarios"("id") ) Com essas tabelas, você poderia responder à sua pergunta com o seguinte comando: SELECT COUNT(*) FROM "event_funcionarios" WHERE "id_funcionario" IN (SELECT "id" FROM "funcionarios" WHERE "name" = 'Peter') Este comando contabiliza o número de eventos executados pelo funcionário 'Peter' e retorna o resultado.
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
Para responder à sua pergunta, você precisará adicionar uma tabela de funcionários ao esquema de banco de dados e relacioná-la à tabela de log de eventos. Suponha que a tabela de funcionários seja chamada "employees" e tenha as seguintes colunas: CREATE TABLE "employees" ( "id" int, "name" TEXT COLLATE NOCASE, "resource" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, você pode usar a seguinte consulta para obter o número de vezes em que o funcionário 'Peter' foi responsável por uma atividade: SELECT COUNT(*) FROM "event_log" WHERE "resource" IN (SELECT "resource" FROM "employees" WHERE "name" = 'Peter') Essa consulta contabiliza o número de linhas na tabela de log de eventos onde a coluna "resource" coincide com a coluna "resource" da tabela de funcionários onde o nome é 'Peter'. Se você não tiver uma tabela de funcionários, você pode usar a coluna "resource" da tabela de log de eventos para filtrar as atividades realizadas por 'Peter'. Nesse caso, a consulta seria: SELECT COUNT(*) FROM "event_log" WHERE "resource" = 'Peter' Essa consulta contabiliza o número de linhas na tabela de log de eventos onde a coluna "resource" é igual a 'Peter'.
SELECT COUNT(*) AS quantidade_acoes FROM event_log WHERE activity LIKE '%Peter%' AND activity LIKE '%declaração de viagem%';
SELECT * FROM event_log WHERE EXTRACT(MONTH FROM timestamp) = 3 AND EXTRACT(YEAR FROM timestamp) = 2018;
SELECT * FROM "event_log" WHERE EXTRACT(MONTH FROM "timestamp") = 3 AND EXTRACT(YEAR FROM "timestamp") = 2018 AND "idcase" IS NOT NULL;
SELECT idcase FROM event_log WHERE timestamp BETWEEN '2018-03-01 00:00:00' AND '2018-03-31 23:59:59';
SELECT idcase FROM event_log WHERE timestamp LIKE '%-03-2018%' AND activity = 'FINALIZADO';
SELECT idcase FROM event_log WHERE timestamp LIKE '%2018-03-%' ORDER BY idcase;
SELECT * FROM event_log WHERE MONTH(timestamp) = 3 AND YEAR(timestamp) = 2018;
SELECT * FROM event_log WHERE MONTH(timestamp) = 3 AND YEAR(timestamp) = 2018;
SELECT * FROM event_log WHERE EXTRACT(MONTH FROM timestamp) = 3 AND EXTRACT(YEAR FROM timestamp) = 2018;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT * FROM "event_log" WHERE "activity" = 'declaração rejeitada pelo pré-aprovador' AND "resource" <> 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND resource <> 'Douglas';
SELECT activity FROM event_log WHERE activity LIKE '%rejeitado%' AND idcase NOT LIKE '%Douglas%' AND resource LIKE '%John%';
SELECT el.* FROM event_log el JOIN pre_approvers pa ON el.idcase = pa.declared WHERE el.activity = 'REJECTED' AND pa.name!= 'Douglas'
SELECT COUNT(DISTINCT "resource") AS "Number of different resources" FROM "event_log";
SELECT DISTINCT resource FROM event_log
SELECT COUNT(DISTINCT "resource") AS "Number of resources" FROM "event_log";
SELECT COUNT(DISTINCT user_id) AS num_users FROM event_log;
SELECT DISTINCT resource FROM event_log;
SELECT COUNT(DISTINCT resource) AS num_pessoas FROM event_log;
SELECT COUNT(DISTINCT "resource") AS "Number of different resources" FROM "event_log";
SELECT DISTINCT resource FROM event_log
SELECT COUNT(DISTINCT "resource") AS "Number of different resources" FROM "event_log";
SELECT DISTINCT resource FROM event_log
SELECT COUNT(DISTINCT "resource") AS "number_of_resources" FROM "event_log";
SELECT COUNT(DISTINCT resource) AS num_funcionarios FROM event_log;
SELECT COUNT(DISTINCT resource) AS num_funcionarios FROM event_log;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource ORDER BY total_events DESC;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
Para responder à sua pergunta, precisamos de uma tabela que relacione os funcionários com as ações executadas. Suponha que tenha uma tabela "funcionarios" com as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) E que tenha uma tabela "case" com as seguintes colunas: CREATE TABLE "case" ( "id" int, "funcionario_id" int, "nome" TEXT COLLATE NOCASE, PRIMARY KEY("id"), FOREIGN KEY("funcionario_id") REFERENCES "funcionarios"("id") ) Agora, para obter o total de ações executadas por cada funcionário durante o processamento das declarações, você pode usar a seguinte consulta: SELECT f.nome, COUNT(el.id) AS total_actions FROM event_log el JOIN case c ON el.idcase = c.id JOIN funcionarios f ON c.funcionario_id = f.id GROUP BY f.nome ORDER BY total_actions DESC; Essa consulta junta as tabelas "event_log", "case" e "funcionarios" e agrupa os resultados por funcionário. O campo "total_actions" é calculado contando o número de linhas para cada funcionário. O resultado é ordenado em ordem decrescente pelo total de ações executadas por cada funcionário.
SELECT * FROM "event_log" WHERE "cost" > 2.225;
SELECT DISTINCT "idcase" FROM "event_log" WHERE "cost" > 2.225;
SELECT DISTINCT idcase FROM event_log WHERE cost > 2.225;
SELECT * FROM event_log WHERE cost > 2.225;
SELECT id FROM event_log WHERE cost > 2.225;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC;
SELECT resource, COUNT(*) as quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC LIMIT 1;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT f.nome, SUM(el.cost) AS total_cost FROM event_log el JOIN funcionarios f ON el.idcase = f.idcase GROUP BY f.nome ORDER BY total_cost DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT f.name, COUNT(el.id) AS quantidade_atuacoes FROM funcionarios f JOIN event_log el ON f.idcase = el.idcase GROUP BY f.name ORDER BY quantidade_atuacoes DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC;
SELECT resource, COUNT(*) as quantidade_execucoes FROM event_log GROUP BY resource ORDER BY quantidade_execucoes DESC;
WITH funcionarios AS ( SELECT "resource" AS funcionario, SUM("cost") AS custo_total FROM "event_log" GROUP BY "resource" ) SELECT funcionario, custo_total, COUNT(*) AS quantidade_de_eventos FROM funcionarios ORDER BY custo_total DESC;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT activity FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT activity FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost > 0;
SELECT id, activity, timestamp, resource, cost, idcase FROM event_log WHERE activity IN ('início da viagem','requisição de pagamento');
SELECT * FROM "event_log" WHERE "activity" = 'início da viagem' OR "activity" ='requisição de pagamento';
SELECT * FROM "event_log" WHERE "activity" = 'início da viagem' OR "activity" ='requisição de pagamento';
SELECT * FROM event_log WHERE activity IN ('início da viagem','requisição de pagamento');
SELECT * FROM event_log WHERE activity IN ('iniciar_viagem','realizar_pagamento')
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 10;
SELECT activity, COUNT(*) as quantidade FROM event_log WHERE activity LIKE '%declaração%' -- ajuste essa parte para incluir apenas as atividades relacionadas às declarações GROUP BY activity ORDER BY quantidade DESC;
SELECT activity, COUNT(*) as ocorrencias FROM event_log GROUP BY activity ORDER BY ocorrencias DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM "event_log" WHERE EXTRACT(YEAR FROM "timestamp") = 2017;
SELECT * FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM "event_log" WHERE strftime('%Y', "timestamp") = '2017';
SELECT * FROM "event_log" WHERE DATE_TRUNC('year', "timestamp") = '2017-01-01';
SELECT * FROM "event_log" WHERE DATE(timestamp) BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%processamento das declarações%';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%declaração%' ORDER BY timestamp;
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%declaração%' OR activity LIKE '%declaracao%';
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity LIKE '%declarações%';
SELECT activity FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31' AND activity LIKE '%processamento%' OR activity LIKE '%declarações%';
SELECT COUNT(*) AS num_events, activity FROM event_log GROUP BY activity HAVING COUNT(*) <= 20;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT DISTINCT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity HAVING COUNT(*) <= 20;
SELECT activity, COUNT(*) AS occurrences FROM event_log GROUP BY activity HAVING COUNT(*) <= 20;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
SELECT "idcase" AS "Declaração", COUNT(*) AS "Número de eventos" FROM "event_log" GROUP BY "idcase" HAVING COUNT(*) <= 20 ORDER BY "Número de eventos" DESC;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
SELECT resource, COUNT(*) as total_cases FROM event_log GROUP BY resource ORDER BY total_cases DESC LIMIT 5;
SELECT resource, COUNT(*) as total_cases FROM event_log GROUP BY resource ORDER BY total_cases DESC LIMIT 5;
SELECT resource, COUNT(*) as quantidade FROM event_log GROUP BY resource ORDER BY quantidade DESC LIMIT 5;
SELECT resource, COUNT(*) as quantidade_de_casos FROM event_log GROUP BY resource ORDER BY quantidade_de_casos DESC LIMIT 5;
CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, "idcase" TEXT COLLATE NOCASE, PRIMARY KEY("id") )
SELECT resource, COUNT(*) as quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource ORDER BY count DESC LIMIT 5;
SELECT resource, COUNT(*) as quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC LIMIT 5;
SELECT resource, COUNT(*) as num_atuacoes FROM event_log WHERE activity LIKE '%declaração%' -- ajuste essa condição para incluir apenas as atividades relacionadas às declarações GROUP BY resource ORDER BY num_atuacoes DESC LIMIT 5;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'início da viagem' AND timestamp >= '2016-01-01' AND timestamp < '2017-01-01' GROUP BY resource
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource ORDER BY num_occurrences DESC;
SELECT resource, COUNT(*) AS total_ocorrencias FROM event_log WHERE activity = 'início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource ORDER BY total_ocorrencias DESC;
SELECT e.id, COUNT(*) AS num_actions FROM event_log e WHERE e.activity = 'iniciar viagem' AND e.timestamp >= '2016-01-01' AND e.timestamp < '2017-01-01' GROUP BY e.id;
SELECT resource, COUNT(*) AS quantidade_atividades FROM event_log WHERE activity LIKE 'INÍCIO DA VIAGEM%' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS total_ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, "supervisor" TEXT COLLATE NOCASE )
SELECT idcase, COUNT(*) as ocorrencias FROM event_log GROUP BY idcase HAVING COUNT(*) > 20 ORDER BY ocorrencias DESC;
SELECT idcase, COUNT(*) as ocorrencias FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) as num_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT "resource" AS "Processo", COUNT(*) AS "Ocorrências" FROM "event_log" GROUP BY "resource" HAVING COUNT(*) > 20 ORDER BY "Ocorrências" DESC;
SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource HAVING COUNT(*) > 20
SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource HAVING COUNT(*) > 20
SELECT activity, COUNT(*) AS num_interventions FROM event_log GROUP BY activity HAVING COUNT(*) > 20;
SELECT idcase, COUNT(*) as quantidade_eventos FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC LIMIT 1;
SELECT idcase, COUNT(*) as total_executions FROM event_log GROUP BY idcase ORDER BY total_executions DESC;
SELECT idcase, COUNT(*) as quantidade_eventos FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC LIMIT 1;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC;
SELECT LENGTH(idcase) AS length, COUNT(*) AS num_events FROM event_log GROUP BY LENGTH(idcase) ORDER BY num_events DESC;
SELECT idcase, LENGTH(idcase) AS length FROM event_log ORDER BY length DESC;
SELECT idcase, COUNT(*) as num_actions FROM event_log GROUP BY idcase ORDER BY num_actions DESC;
SELECT * FROM "event_log" WHERE "resource" = 'Sara' AND NOT EXISTS ( SELECT 1 FROM "event_log" WHERE "activity" ='requisição de pagamento' AND "resource" = 'Sara' )
SELECT * FROM event_log WHERE resource = 'Sara' AND activity!='requisição de pagamento';
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!='requisição de pagamento'
SELECT * FROM event_log WHERE resource = 'Sara' AND activity!='requisição de pagamento';
SELECT * FROM "event_log" WHERE "idcase" NOT IN ( SELECT "idcase" FROM "event_log" WHERE "activity" ='requisição de pagamento' ) AND "resource" = 'Sara';
CREATE TABLE "payment_requests" ( "id" int, "event_log_id" int, "status" TEXT COLLATE NOCASE, PRIMARY KEY("id") )
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaração 143598';
SELECT * FROM event_log WHERE idcase = 'declaração 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE idcase = 'declaração 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaração 143598';
SELECT * FROM event_log WHERE timestamp BETWEEN strftime('%Y-%m-%d 00:00:00', '2017-01-10') AND strftime('%Y-%m-%d 23:59:59', '2017-02-01') AND idcase = '143598';
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource ORDER BY num_cases DESC;
Para responder essa pergunta, precisamos de uma tabela que relacione os funcionários com as suas respectivas declarações. Suponha que essa tabela seja chamada "employees" e tenha as seguintes colunas: CREATE TABLE "employees" ( "id" int, "name" TEXT COLLATE NOCASE, "idcase" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, para obter a quantidade de declarações feitas por cada funcionário entre 1º de janeiro de 2017 e 31º de maio de 2017, podemos utilizar a seguinte consulta: SELECT e.name, COUNT(*) AS num_declaracoes FROM event_log el JOIN employees e ON el.idcase = e.idcase WHERE el.timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY e.name Essa consulta faz o seguinte: 1. Junta a tabela "event_log" com a tabela "employees" utilizando a coluna "idcase" como chave de junção. 2. Filtre as linhas que correspondem ao período de tempo desejado (1º de janeiro de 2017 a 31º de maio de 2017). 3. Agrupa as linhas por funcionário (nome) e conta o número de declarações feitas por cada funcionário (utilizando a função COUNT(*)). 4. Retorna o nome do funcionário e o número de declarações feitas por ele. Lembre-se de que essa é uma suposição, pois não há informações sobre a tabela "employees" no esquema de banco de dados fornecido.
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) AS quantidade_atividades FROM event_log GROUP BY idcase ORDER BY quantidade_atividades DESC LIMIT 10;
SELECT idcase, COUNT(*) as quantidade_atividades FROM event_log GROUP BY idcase ORDER BY quantidade_atividades DESC LIMIT 10;
SELECT idcase, COUNT(*) as total_executions FROM event_log GROUP BY idcase ORDER BY total_executions DESC LIMIT 10;
SELECT idcase, COUNT(*) as total_executions FROM event_log GROUP BY idcase ORDER BY total_executions DESC LIMIT 10;
SELECT idcase, COUNT(*) AS num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT resource, COUNT(*) as num_executions FROM event_log GROUP BY resource ORDER BY num_executions DESC LIMIT 10;
SELECT resource, COUNT(*) as num_executions FROM event_log GROUP BY resource ORDER BY num_executions DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT activity, idcase, COUNT(DISTINCT activity) AS num_actions FROM event_log GROUP BY activity, idcase ORDER BY num_actions DESC;
SELECT activity, COUNT(*) AS frequency, SUM(COUNT(*)) OVER () AS total_actions, COUNT(*) / (SELECT COUNT(*) FROM event_log) AS diversity FROM event_log GROUP BY activity ORDER BY diversity DESC;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as quantidade FROM event_log GROUP BY idcase ORDER BY quantidade DESC LIMIT 10;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC LIMIT 10;
SELECT idcase, COUNT(*) as total_events FROM event_log GROUP BY idcase ORDER BY total_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as total_events FROM event_log GROUP BY idcase ORDER BY total_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as total_actions FROM event_log GROUP BY idcase ORDER BY total_actions DESC LIMIT 10;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT activity, SUM(cost) AS total_cost FROM event_log GROUP BY activity;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY quantidade_eventos DESC;
Para responder à sua pergunta, precisamos fazer uma alteração no esquema de banco de dados. O esquema atual não inclui informações sobre funcionários, portanto, não é possível criar uma lista ordenada de funcionários que atuaram pelo menos 100 vezes. Suponha que tenhamos uma tabela "funcionarios" com as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "name" TEXT COLLATE NOCASE, "id_event_log" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) E que a coluna "id_event_log" seja uma chave estrangeira que se refere à coluna "id" da tabela "event_log". Agora, podemos criar uma query para obter a lista ordenada de funcionários que atuaram pelo menos 100 vezes: SELECT f.name, COUNT(el.id) AS total_events FROM funcionarios f JOIN event_log el ON f.id_event_log = el.id GROUP BY f.name HAVING COUNT(el.id) >= 100 ORDER BY total_events DESC; Essa query junta as tabelas "funcionarios" e "event_log" pela coluna "id_event_log", contabiliza o número de eventos para cada funcionário e filtra os resultados para incluir apenas os funcionários que atuaram pelo menos 100 vezes. Por fim, ordena a lista em ordem decrescente pelo número de eventos.
SELECT idcase AS "Case ID", activity, timestamp FROM event_log ORDER BY idcase, timestamp;
SELECT idcase AS "Case", activity, timestamp FROM event_log ORDER BY idcase, timestamp;
SELECT DISTINCT idcase, MIN(timestamp) AS start_timestamp FROM event_log GROUP BY idcase ORDER BY idcase, start_timestamp;
SELECT idcase, MIN(timestamp) AS start_time, id FROM event_log GROUP BY idcase ORDER BY idcase, start_time;
SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp;
SELECT id, activity, timestamp, resource, cost, idcase FROM event_log ORDER BY id, timestamp;
SELECT resource, COUNT(*) AS quantidade_de_vezes FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS total_de_vezes FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS total_executions FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource;
SELECT idcase, COUNT(*) AS num_aprovacoes FROM event_log WHERE activity = 'APROVAR_DECLARACAO' AND resource LIKE '%administrador%' -- suposição: o campo "resource" contém a descrição do papel do funcionário GROUP BY idcase;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS num_aps FROM event_log WHERE activity LIKE '%aprove%' AND activity LIKE '%admin%' GROUP BY resource
SELECT activity, COUNT(*) AS num_occurrences FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas' GROUP BY activity
SELECT activity, COUNT(*) AS quantidade_execucoes FROM event_log WHERE resource = 'Thomas' AND EXTRACT(YEAR FROM timestamp) = 2017 GROUP BY activity ORDER BY quantidade_execucoes DESC;
SELECT activity, COUNT(*) as quantidade FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity ORDER BY quantidade DESC;
SELECT activity, COUNT(*) AS "quantidade" FROM event_log WHERE activity LIKE '%processamento de declarações%' AND EXTRACT(YEAR FROM timestamp) = 2017 AND resource LIKE '%Thomas%' GROUP BY activity ORDER BY quantidade DESC;
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT COUNT(*) FROM "event_log" WHERE "resource" = 'Thomas' AND EXTRACT(YEAR FROM "timestamp") = 2017;
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND resource = 'Thomas';
SELECT SUM(cost) AS carga_trabalho FROM event_log WHERE activity LIKE '%processamento de declarações%' AND resource LIKE '%Thomas%' AND timestamp >= '2017-01-01' AND timestamp < '2018-01-01';
SELECT activity, MAX(timestamp) AS mais_recente FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS mais_recente FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS mais_recente FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_execution_time FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_execution FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS latest_timestamp FROM event_log GROUP BY activity;
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS frequency, EXTRACT(YEAR FROM timestamp) AS year FROM event_log WHERE (activity = 'declaração aprovada pelo supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017) OR (activity = 'permissão rejeitada pelo funcionário' AND EXTRACT(YEAR FROM timestamp) = 2018) GROUP BY activity, year ORDER BY activity, year;
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND activity = 'declaração aprovada pelo supervisor' UNION ALL SELECT COUNT(*) FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2018 AND activity = 'permissão rejeitada pelo funcionário';
SELECT COUNT(*) AS count_declared, COUNT(*) AS count_rejected FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017 UNION ALL SELECT COUNT(*) AS count_declared, COUNT(*) AS count_rejected FROM event_log WHERE activity = 'permissão rejeitada pelo funcionário' AND EXTRACT(YEAR FROM timestamp) = 2018;
SELECT COUNT(*) AS quantidade FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' AND timestamp LIKE '2017-%' UNION ALL SELECT COUNT(*) AS quantidade FROM event_log WHERE activity = 'permissão rejeitada pelo funcionário' AND timestamp LIKE '2018-%';
SELECT COUNT(*) FROM event_log WHERE activity = 'APROVAÇÃO' AND resource = 'SUPERVISOR' AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT activity, timestamp, id FROM event_log ORDER BY timestamp DESC;
SELECT activity, timestamp, id FROM event_log ORDER BY timestamp DESC;
SELECT activity, timestamp, id FROM event_log WHERE activity LIKE '%processamento das declarações%' ORDER BY timestamp;
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE UPPER(activity) LIKE '%DECLARAÇÃO REQUISITADA PELOR FUNCIONÁRIO%';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'declaração requisitada pelo funcionário';
SELECT COUNT(*) AS total_requisicoes FROM event_log WHERE activity LIKE '%declaração%' AND resource LIKE '%Thomas%';
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT * FROM event_log WHERE activity LIKE '%Diana%' AND idcase LIKE '%declaração%' AND cost IS NOT NULL;
SELECT DISTINCT activity, COUNT(*) AS num_events FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity;
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity;
SELECT activity FROM event_log WHERE activity LIKE '%Diana%' AND cost IS NOT NULL AND resource LIKE '%declarações%'
SELECT COUNT(DISTINCT resource) AS quantidade_recursos FROM event_log WHERE id IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT resource, COUNT(*) as num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ) GROUP BY resource ORDER BY num_events DESC;
SELECT COUNT(DISTINCT "resource") AS "quantity_of_resources" FROM "event_log" WHERE "idcase" IN ( SELECT "idcase" FROM "event_log" GROUP BY "idcase" HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT "resource") AS "resource_count", "idcase" FROM "event_log" GROUP BY "idcase" HAVING COUNT(*) > 3
SELECT COUNT(DISTINCT "idcase") AS num_cases FROM "event_log" WHERE "activity" LIKE 'processamento de declaração%' -- ajuste essa condição para incluir apenas as atividades de processamento de declaração GROUP BY "idcase" HAVING COUNT(*) > 3;
SELECT resource FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT resource FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT resource FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT DISTINCT resource FROM event_log WHERE activity = 'REJEITAR DECLARAÇÃO' AND activity LIKE '%PRÉ-APROVAÇÃO%';
SELECT COUNT(*) FROM "event_log" WHERE "activity" = 'declaração final aprovada pelo diretor' AND MONTH("timestamp") BETWEEN 1 AND 5 AND YEAR("timestamp") = 2017;
SELECT COUNT(*) FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' AND activity = 'declaração final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração final aprovada pelo diretor' AND EXTRACT(MONTH FROM timestamp) BETWEEN 1 AND 5 AND EXTRACT(YEAR FROM timestamp) = 2017;
SELECT COUNT(*) FROM event_log WHERE activity = 'DECLARAÇÃO FINAL APROVADA POR DIRETOR' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31';
SELECT * FROM "event_log" WHERE "resource" = 'Charles' AND NOT EXISTS ( SELECT 1 FROM "event_log" WHERE "idcase" = "event_log"."idcase" AND "timestamp" BETWEEN '2018-01-01' AND '2018-01-31' )
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND timestamp < '2018-01-01 00:00:00' OR timestamp > '2018-01-31 23:59:59';
SELECT * FROM "event_log" WHERE "idcase" NOT IN ( SELECT "idcase" FROM "event_log" WHERE strftime('%Y-%m', "timestamp") = '2018-01' ) AND "resource" = 'Charles';
SELECT * FROM event_log WHERE timestamp >= '2018-02-01' AND timestamp < '2019-01-01' AND resource = 'Charles';
SELECT * FROM event_log WHERE activity LIKE '%Charles%' AND timestamp >= '2018-02-01' AND timestamp < '2019-01-01';
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3 ORDER BY num_activities DESC;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(DISTINCT resource) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(id) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ORDER BY num_events DESC;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(id) > 3;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
Para responder à sua pergunta, precisamos analisar as declarações que foram realizadas no banco de dados e contar o número de intervenções (ou alterações) feitas em cada uma delas. No entanto, como o esquema de banco de dados não contém informações sobre as declarações que foram realizadas, não é possível responder à sua pergunta com base nos dados fornecidos. Se você tiver informações sobre as declarações que foram realizadas no banco de dados, como logs de alterações ou histórico de alterações, poderíamos ajudá-lo a contar o número de intervenções feitas em cada declaração. Além disso, se você quiser saber quais são as colunas que sofreram mais de três intervenções (ou alterações) em um determinado período de tempo, poderíamos ajudá-lo a criar uma query que contabilize as alterações feitas em cada coluna e ordená-las por número de intervenções.
SELECT idcase, MIN(timestamp) AS start_time, MAX(timestamp) AS end_time, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log GROUP BY idcase ORDER BY idcase;
SELECT idcase, SUM(TIMESTAMPDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp)) + 1) AS tempo_total FROM event_log GROUP BY idcase ORDER BY tempo_total DESC;
SELECT idcase, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log GROUP BY idcase
SELECT idcase, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log GROUP BY idcase
ALTER TABLE "event_log" ADD COLUMN "end_timestamp" DATETIME; UPDATE "event_log" SET "end_timestamp" = (SELECT MAX("timestamp") FROM "event_log" WHERE "idcase" = "event_log"."idcase" AND "activity" ='start') WHERE "activity" ='start';
SELECT activity, timestamp, resource, cost, idcase, TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (ORDER BY timestamp), timestamp) AS duration FROM event_log ORDER BY timestamp;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase IS NOT NULL)
SELECT resource, idcase FROM event_log GROUP BY resource, idcase HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT resource, idcase FROM event_log GROUP BY resource, idcase HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE resource = (SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log)))
SELECT idcase, resource, COUNT(*) AS num_activities FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE id IN (SELECT id FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1));
Para responder essa pergunta, precisamos analisar o esquema de banco de dados e identificar quais declarações foram realizadas por um único funcionário. No entanto, o esquema de banco de dados não contém informações sobre funcionários, apenas sobre eventos e recursos. Portanto, não é possível responder essa pergunta com base no esquema fornecido. Se você tiver mais informações sobre o banco de dados, como uma tabela de funcionários com um campo "nome" e uma tabela de relações entre eventos e funcionários, poderíamos ajudar a responder essa pergunta.
SELECT * FROM "event_log" WHERE "activity" = 'fim da viagem' AND "timestamp" BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59' AND "idcase" IS NOT NULL;
SELECT * FROM "event_log" WHERE "activity" = 'fim da viagem' AND "timestamp" BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59' AND "idcase" IS NOT NULL;
SELECT * FROM "event_log" WHERE "activity" = 'fim da viagem' AND "timestamp" BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT DISTINCT resource FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59' AND resource LIKE 'processo%';
SELECT * FROM "event_log" WHERE "activity" = 'fim da viagem' AND "timestamp" BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM "event_log" WHERE "activity" = 'fim da viagem' AND "timestamp" BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity = 'END_VIAGE' AND timestamp BETWEEN '2016-01-01 00:00:00' AND '2017-12-31 23:59:59';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeição%' OR activity LIKE '%negado%' OR activity LIKE '%denegado%';
SELECT activity, COUNT(*) AS num_rejeicoes, SUM(cost) AS custo_total FROM event_log WHERE activity LIKE '%rejeição%' AND idcase LIKE '%declaração%' GROUP BY activity ORDER BY num_rejeicoes DESC;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT MIN(COUNT(*)) AS min_interventions, MAX(COUNT(*)) AS max_interventions FROM event_log WHERE cost > 0 GROUP BY activity
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(timestamp) AS inicio, MAX(CASE WHEN activity = 'fim da viagem' THEN timestamp WHEN activity LIKE '%declaração rejeitada%' THEN timestamp WHEN activity LIKE '%pagamento efetuado%' THEN timestamp END) AS fim FROM event_log GROUP BY idcase
SELECT idcase, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(CASE WHEN activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado') THEN timestamp ELSE NULL END)) AS tempo_levar FROM event_log GROUP BY idcase
SELECT idcase, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado')), timestamp) AS tempo_decorrido FROM event_log ORDER BY tempo_decorrido;
WITH -- Identificamos as ações que indicam a finalização da declaração, rejeição da declaração ou pagamento efetuado final_actions AS ( SELECT "id", "timestamp" FROM "event_log" WHERE "activity" IN ('FINALIZADA', 'REJEITADA', 'PAGO') ), -- Calculamos o tempo entre a primeira ação e as ações de finalização time_diff AS ( SELECT final_actions.id, final_actions.timestamp - (SELECT MIN("timestamp") FROM "event_log") AS time_diff FROM final_actions ) -- Mostramos o resultado SELECT * FROM time_diff;
SELECT idcase, MIN(timestamp) AS inicio, MAX(CASE WHEN activity IN ('fim da viagem','rejeitada', 'pagamento efetuado') THEN timestamp ELSE NULL END) AS fim FROM event_log GROUP BY idcase ORDER BY inicio;
SELECT idcase, MAX(CASE WHEN activity = 'fim da viagem' THEN timestamp END) AS fim_viagem, MAX(CASE WHEN activity IN ('declaração rejeitada pelo funcionário', 'pagamento efetuado') THEN timestamp END) AS atividade_final, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(CASE WHEN activity = 'fim da viagem' THEN timestamp END)) AS tempo_viagem FROM event_log GROUP BY idcase
SELECT el1.idcase AS caso, el1.activity AS atividade_final, TIMESTAMPDIFF(SECOND, el1.timestamp, el2.timestamp) AS tempo_levar FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado') AND el2.activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado') AND el1.timestamp < el2.timestamp ORDER BY tempo_levar;
SELECT el1.idcase, el1.activity AS final_activity, TIMESTAMPDIFF(SECOND, el1.timestamp, el2.timestamp) AS time_taken FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado') AND el2.activity = 'fim da viagem' OR el2.activity = 'declaração rejeitada pelo funcionário' OR el2.activity = 'pagamento efetuado' AND el1.timestamp < el2.timestamp ORDER BY el1.idcase;
WITH event_log AS ( SELECT idcase, activity, timestamp, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS prev_timestamp FROM event_log ) SELECT el.idcase, el.activity, TIMESTAMPDIFF(SECOND, el.prev_timestamp, el.timestamp) AS time_diff FROM event_log el WHERE el.activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado') ORDER BY el.idcase, el.activity;
SELECT TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'INICIADO_PROCESSAMENTO' AND idcase = 'declaracao_x'), (SELECT MAX(timestamp) FROM event_log WHERE activity IN ('VIAGEM_REGISTRADA', 'REJEITADA', 'PAGAMENTO_EFETUADO') AND idcase = 'declaracao_x')) AS tempo_processamento FROM event_log WHERE idcase = 'declaracao_x';
SELECT * FROM event_log WHERE activity ='requisição de pagamento';
SELECT * FROM event_log WHERE activity ='requisição de pagamento';
SELECT * FROM event_log WHERE activity = 'payment_request';
SELECT * FROM event_log WHERE activity LIKE '%requisição de pagamento para declarações%';
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (ORDER BY timestamp))) AS avg_duration FROM event_log;
SELECT activity, AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity ORDER BY avg_duration;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity ORDER BY avg_duration;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS average_duration FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity ORDER BY avg_duration;
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS avg_duration FROM event_log GROUP BY activity;
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase;
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase ORDER BY max_cost DESC;
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ORDER BY total_cost DESC LIMIT 10;
SELECT activity, MAX(cost) AS max_cost FROM event_log GROUP BY activity ORDER BY max_cost DESC;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT activity, MAX(cost) AS max_cost FROM event_log GROUP BY activity ORDER BY max_cost DESC;
SELECT activity, MAX(cost) AS max_cost FROM event_log GROUP BY activity;
SELECT activity, MAX(cost) AS max_cost FROM event_log GROUP BY activity;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log ORDER BY cost DESC;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log ORDER BY cost DESC;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log ORDER BY cost DESC LIMIT 10;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log ORDER BY cost DESC LIMIT 10;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'início da viagem';
SELECT * FROM event_log WHERE activity = 'INICIO_VIAGEM';
SELECT * FROM event_log WHERE activity LIKE '%início de viagem%' OR activity LIKE '%inicio de viagem%' OR activity LIKE '%start of trip%' OR activity LIKE '%start trip%';
SELECT activity, COUNT(*) as total_registers FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as total_executions FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_executions FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY activity ORDER BY activity;
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as quantidade_execucoes FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log WHERE idcase = 'declaração' -- ajuste o valor para o tipo de ação desejado GROUP BY activity;
SELECT activity, COUNT(*) as quantidade_intervencoes FROM event_log WHERE resource LIKE '%declaração%' -- ajuste para incluir apenas as declarações GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS num_intervencoes FROM event_log GROUP BY activity ORDER BY num_intervencoes DESC;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost, resource, idcase FROM event_log WHERE activity LIKE '%declaração%' -- ajuste para incluir apenas as intervenções relacionadas a declarações ORDER BY cost DESC;
SELECT idcase, activity, cost, timestamp FROM event_log WHERE activity LIKE '%processamento de declarações%' ORDER BY cost DESC;
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT el.activity, el.resource, el.idcase FROM event_log el WHERE el.activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT * FROM event_log WHERE activity = 'permissão';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permission%' OR activity LIKE '%grant%';
SELECT activity, resource, idcase FROM event_log WHERE activity LIKE '%permission%' OR activity LIKE '%access%';
SELECT MAX("cost") AS "Maior valor de custo" FROM "event_log";
SELECT MAX("cost") AS "Maior Valor de Custo" FROM "event_log";
SELECT MAX("cost") AS "Maior Custo" FROM "event_log";
SELECT MAX("cost") AS "maior_custo" FROM "event_log";
SELECT MAX("cost") AS "Maior Custo" FROM "event_log";
SELECT MAX(cost) AS max_cost FROM event_log;
SELECT * FROM event_log WHERE resource LIKE '%Sara%' AND resource LIKE '%Thomas%';
SELECT * FROM event_log WHERE "resource" = 'Sara' OR "resource" = 'Thomas' GROUP BY "idcase" HAVING COUNT(DISTINCT "resource") = 2;
SELECT DISTINCT "idcase" FROM "event_log" WHERE "resource" IN ('Sara', 'Thomas');
SELECT DISTINCT idcase FROM event_log WHERE resource LIKE '%Sara%' AND resource LIKE '%Thomas%';
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
A pergunta! Infelizmente, o esquema de banco de dados fornecido não contém informações sobre Sara e Thomas, portanto, não é possível responder a essa pergunta com base nos dados fornecidos. O esquema de banco de dados apenas define a estrutura da tabela "event_log", que armazena informações sobre eventos, incluindo a atividade, timestamp, recurso, custo e id do caso. Não há informações sobre pessoas como Sara e Thomas. Para responder a essa pergunta, você precisaria ter informações adicionais sobre as atividades realizadas por Sara e Thomas, que não estão presentes no esquema de banco de dados fornecido.
SELECT resource, COUNT(*) AS quantidade_declaracoes_rejeitadas FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%declaração rejeitada pela administração%' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_declaracoes_rejeitadas FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_atividades FROM event_log WHERE activity LIKE '%declaração rejeitada pela administração%' GROUP BY resource;
SELECT resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_de_vezes FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity LIKE '%declaração rejeitada pela administração%' GROUP BY resource
SELECT idcase, COUNT(*) AS rejeicoes FROM event_log WHERE activity = 'REJEITAR' AND resource LIKE '%ADMINISTRADOR%' GROUP BY idcase ORDER BY rejeicoes DESC;
SELECT resource, idcase, COUNT(*) AS num_activities FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource, idcase;
SELECT resource, idcase, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%declaração rejeitada pela administração%' GROUP BY resource, idcase;
SELECT resource, idcase, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%declaração rejeitada pela administração%' GROUP BY resource, idcase;
SELECT "resource", "idcase", COUNT(*) AS "quantidade_execucoes" FROM "event_log" WHERE "activity" = 'declaração rejeitada pela administração' GROUP BY "resource", "idcase";
SELECT resource, idcase, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource, idcase;
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'declaração rejeitada pela administração' GROUP BY resource;
SELECT "resource", "idcase", COUNT(*) AS "número de instâncias" FROM "event_log" WHERE "activity" = 'declaração rejeitada pela administração' GROUP BY "resource", "idcase" ORDER BY "resource", "idcase";
SELECT "resource", "idcase", COUNT(*) AS "quantidade_execucoes" FROM "event_log" WHERE "activity" = 'declaração rejeitada pela administração' GROUP BY "resource", "idcase"
SELECT "resource", "idcase", COUNT(*) AS "quantidade_de_eventos" FROM "event_log" WHERE "activity" LIKE '%declaração rejeitada pela administração%' AND "idcase" IS NOT NULL GROUP BY "resource", "idcase"
SELECT e.idcase, e.activity, e.resource, COUNT(*) AS num_rejeicoes FROM event_log e WHERE e.activity = 'REJEITAR DECLARAÇÃO' AND e.resource LIKE '%ADMINISTRADOR%' GROUP BY e.idcase, e.activity, e.resource ORDER BY num_rejeicoes DESC;
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" NOT IN ('início da viagem', 'fim da viagem');
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT IN ('viagem_inicio', 'viagem_fim')
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT activity, SUM(cost) AS total_cost FROM event_log GROUP BY activity ORDER BY total_cost DESC LIMIT 5;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as quantidade_eventos FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(DISTINCT activity) > 1;
SELECT COUNT(*) AS "count", "idcase" FROM "event_log" GROUP BY "idcase" HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) AS ocorrencias FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT DISTINCT "idcase", COUNT(*) AS "ocorrências" FROM "event_log" GROUP BY "idcase" HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 1;
SELECT activity, resource, cost, timestamp FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM "event_log" WHERE "timestamp" BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM "event_log" WHERE "timestamp" BETWEEN '2018-09-30 00:00:00' AND '2018-10-02 23:59:59';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01 00:00:00' AND '2018-10-02 23:59:59' ORDER BY timestamp;
SELECT * FROM "event_log" WHERE "timestamp" BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT * FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE resource COLLATE NOCASE LIKE 'M%';
SELECT activity FROM event_log WHERE activity LIKE 'M%' AND idcase LIKE 'M%';
SELECT el.* FROM event_log el JOIN employees e ON el.idcase = e.id WHERE e.name LIKE 'M%';
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 5 ORDER BY count DESC;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 5 ORDER BY count DESC;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5 ORDER BY COUNT(*) DESC;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 5 ORDER BY count DESC;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(activity) > 5;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3;
SELECT idcase, activity, COUNT(*) as ocorrencias FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ORDER BY idcase, ocorrencias DESC;
SELECT idcase, activity, COUNT(*) AS num_events FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT DISTINCT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ) ORDER BY activity;
SELECT DISTINCT el.activity FROM event_log el JOIN ( SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ) as cases ON el.idcase = cases.idcase ORDER BY count DESC;
SELECT el.idcase, el.activity, COUNT(*) as count FROM event_log el GROUP BY el.idcase, el.activity HAVING COUNT(*) > 3 ORDER BY el.idcase, count DESC;
SELECT idcase, activity, COUNT(*) as ocorrencias FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ORDER BY idcase, ocorrencias DESC;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3 ORDER BY count DESC;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT SUM(cost) AS total_cost FROM event_log WHERE activity LIKE '%declaração%' AND idcase = '56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT * FROM event_log WHERE idcase = '56300';
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as quantidade_execucoes FROM event_log WHERE timestamp < '2017-01-10' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity;
SELECT activity, COUNT(*) as quantidade_execucoes FROM event_log WHERE timestamp < '2017-01-10' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity;
SELECT activity, COUNT(*) as quantidade_execucoes FROM event_log WHERE timestamp < '2017-01-10' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) as quantidade_execucoes FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY quantidade_execucoes DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS quantidade_execucoes FROM event_log WHERE timestamp < '2017-01-10' AND id IN ( SELECT id FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity
SELECT resource, COUNT(*) AS num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(*) AS "Quantidade de casos" FROM event_log GROUP BY resource ORDER BY "Quantidade de casos" DESC;
SELECT resource, COUNT(id) AS num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log GROUP BY resource
Para responder à sua pergunta, você precisará criar uma tabela que relacione os colaboradores com as suas declarações. Suponha que você tenha uma tabela chamada "collaborators" com as seguintes colunas: CREATE TABLE "collaborators" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, você pode criar uma tabela que relacione as declarações com os colaboradores. Suponha que você tenha uma tabela chamada "declarations" com as seguintes colunas: CREATE TABLE "declarations" ( "id" int, "collaborator_id" int, "event_log_id" int, PRIMARY KEY("id"), FOREIGN KEY("collaborator_id") REFERENCES "collaborators"("id"), FOREIGN KEY("event_log_id") REFERENCES "event_log"("id") ) Agora, você pode usar a seguinte consulta para obter o número de declarações feitas por cada colaborador: SELECT c.name, COUNT(d.id) AS num_declarations FROM "collaborators" c JOIN "declarations" d ON c.id = d.collaborator_id GROUP BY c.name Essa consulta junta as tabelas "collaborators" e "declarations" pela coluna "id" e conta o número de declarações feitas por cada colaborador. O resultado é uma lista com o nome do colaborador e o número de declarações que ele fez.
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_allocations FROM event_log WHERE activity = 'alocar' -- substitua por 'alocar' ou o valor correto da atividade que você deseja contar GROUP BY resource
SELECT resource, COUNT(*) AS "quantidade_vezes" FROM event_log GROUP BY resource ORDER BY quantidade_vezes DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_times FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource;
Para responder à sua pergunta, você precisaria ter uma tabela que relacione os funcionários com as intervenções registradas no evento_log. Suponha que você tenha uma tabela chamada "funcionarios" com a seguinte estrutura: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) E que a tabela "event_log" tem uma coluna "idcase" que referencia a tabela "funcionarios". Nesse caso, você pode usar a seguinte consulta para obter o número de intervenções feitas por cada funcionário: SELECT f.nome, COUNT(el.id) AS num_intervencoes FROM event_log el JOIN funcionarios f ON el.idcase = f.id GROUP BY f.nome Essa consulta junta as tabelas "event_log" e "funcionarios" pela coluna "idcase", agrupa os resultados pela coluna "nome" da tabela "funcionarios" e conta o número de intervenções (registros) para cada funcionário.
SELECT DISTINCT "idcase" FROM "event_log" WHERE "resource" IN ('Thomas', 'Diana', 'Sara');
SELECT * FROM "event_log" WHERE "resource" IN ('Thomas', 'Diana', 'Sara');
SELECT DISTINCT "idcase" FROM "event_log" WHERE "resource" IN ('Thomas', 'Diana', 'Sara');
SELECT * FROM event_log WHERE resource = 'Thomas' OR resource = 'Diana' OR resource = 'Sara';
SELECT * FROM event_log WHERE activity LIKE '%Thomas%' OR activity LIKE '%Diana%' OR activity LIKE '%Sara%';
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_casos FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_casos FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log WHERE timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-06-01 00:00:00' GROUP BY resource
SELECT resource, COUNT(*) AS num_instances FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
CREATE TEMP TABLE temp_activities AS SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY idcase;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource HAVING COUNT(*) > 0;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource ORDER BY num_cases DESC;
Para responder à sua pergunta, precisamos de uma tabela que relacione os funcionários com as declarações que eles sofreram intervenção. Suponha que essa tabela seja chamada "funcionarios" e tenha as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "name" TEXT COLLATE NOCASE, "idcase" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, para responder à sua pergunta, podemos utilizar a seguinte consulta: SELECT f.name, COUNT(*) AS "quantidade_declaracoes" FROM event_log el JOIN funcionarios f ON el.idcase = f.idcase WHERE el.timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY f.name Essa consulta faz o seguinte: 1. Junta a tabela "event_log" com a tabela "funcionarios" utilizando a coluna "idcase" como chave de junção. 2. Filtre as linhas que tenham um timestamp entre 1/5/2017 e 1/6/2017. 3. Agrupa as linhas por nome do funcionário (da tabela "funcionarios"). 4. Conta o número de linhas (ou seja, a quantidade de declarações) para cada funcionário. A saída da consulta será uma lista com o nome de cada funcionário e a quantidade de declarações que ele sofreu intervenção entre 1/5/2017 e 1/6/2017.
SELECT DISTINCT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') ORDER BY activity, resource;
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa')
SELECT DISTINCT activity, resource FROM event_log WHERE resource NOT LIKE '%Joshua%' AND resource NOT LIKE '%Teresa%' ORDER BY activity, resource;
SELECT DISTINCT e.activity, f.name FROM event_log e JOIN funcionario f ON e.idcase = f.id WHERE e.activity LIKE '%intervenção%' AND e.idcase NOT IN ( SELECT idcase FROM event_log WHERE activity LIKE '%Joshua%' OR activity LIKE '%Teresa%' ) ORDER BY e.activity, f.name;
SELECT activity FROM event_log WHERE resource NOT LIKE '%joshua%' AND resource NOT LIKE '%teresa%' AND activity LIKE '%declarações%';
SELECT * FROM "event_log" WHERE activity IN ('início da viagem', 'fim da viagem') AND NOT EXISTS ( SELECT 1 FROM "event_log" AS log2 WHERE log2.idcase = "event_log".idcase AND log2.activity IN ('requisição de pagamento', 'pagamento efetuado') )
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem') AND NOT EXISTS ( SELECT 1 FROM event_log WHERE activity IN ('requisição de pagamento', 'pagamento efetuado') AND idcase = event_log.idcase )
SELECT idcase FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem') AND activity NOT IN ('requisição de pagamento', 'pagamento efetuado')
SELECT * FROM "event_log" WHERE activity IN ('início da viagem', 'fim da viagem') AND NOT EXISTS ( SELECT 1 FROM "event_log" WHERE activity IN ('requisição de pagamento', 'pagamento efetuado') AND "idcase" = "event_log"."idcase" )
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem') AND NOT (activity ='requisição de pagamento' OR activity = 'pagamento efetuado');
SELECT * FROM event_log WHERE activity IN ('iniciada', 'finalizada') AND cost IS NULL;
SELECT idcase FROM event_log WHERE activity IN ('start_trip', 'end_trip') AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('payment_request', 'payment_effectuation') ) GROUP BY idcase HAVING COUNT(CASE WHEN activity IN ('start_trip', 'end_trip') THEN 1 ELSE NULL END) > 1 AND COUNT(CASE WHEN activity IN ('payment_request', 'payment_effectuation') THEN 1 ELSE NULL END) = 0;
SELECT * FROM "event_log" WHERE "activity" IN ('start', 'end') -- verifica se é início ou fim da viagem AND "cost" IS NULL -- verifica se não há registro de pagamento AND NOT EXISTS ( SELECT 1 FROM "event_log" WHERE "idcase" = "event_log"."idcase" -- verifica se há outro registro com o mesmo idcase AND "activity" = 'payment' -- verifica se é um registro de pagamento )
SELECT * FROM "event_log" WHERE "activity" NOT IN ('viagem_inicio', 'viagem_fim') OR "cost" IS NULL;
SELECT * FROM "event_log" WHERE "activity" IN ('start', 'end') AND ("activity" NOT IN ('payment_request', 'payment') OR "cost" IS NULL)
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource = '' OR resource IS NULL;
SELECT activity FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT * FROM event_log WHERE resource IS NULL;
SELECT activity FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE activity LIKE '%funcionario%' AND idcase IS NULL OR idcase = '';
SELECT DISTINCT idcase FROM event_log WHERE timestamp >= '2017-03-01' AND timestamp <= '2017-03-31' ORDER BY idcase;
SELECT * FROM event_log WHERE DATE(timestamp) < '2017-03-01';
SELECT * FROM event_log WHERE activity = 'first' AND timestamp < '2017-03-01 00:00:00'
SELECT * FROM event_log WHERE DATE(timestamp) < '2017-03-01';
SELECT idcase, MIN(timestamp) AS first_log_date FROM event_log WHERE timestamp < '2017-03-01 00:00:00' GROUP BY idcase
SELECT DISTINCT "resource" FROM "event_log" WHERE "activity" = 'first_execution' -- suponha que "first_execution" seja o valor que indica a primeira execução de atividade AND "timestamp" < '2017-03-01' -- março de 2017 ORDER BY "resource";
SELECT * FROM event_log WHERE timestamp < '2017-03-01 00:00:00';
SELECT activity FROM event_log WHERE timestamp < '2017-03-01' AND id = (SELECT MIN(id) FROM event_log);
SELECT * FROM event_log WHERE timestamp < '2017-03-01' AND activity LIKE '%intervenção%';
SELECT * FROM event_log WHERE DATE(timestamp) < '2017-03-01';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'inicio da viagem' AND EXTRACT(MONTH FROM timestamp) = 3 AND EXTRACT(YEAR FROM timestamp) = 2017 AND idcase IS NOT NULL;
SELECT idcase, timestamp FROM event_log WHERE activity = 'inicio da viagem' AND timestamp BETWEEN '2017-03-01 00:00:00' AND '2017-03-31 23:59:59' GROUP BY idcase ORDER BY timestamp ASC LIMIT 1;
SELECT * FROM event_log WHERE activity = 'inicio da viagem' AND timestamp >= '2017-03-01 00:00:00' AND timestamp < '2017-04-01 00:00:00' AND idcase IS NOT NULL;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'inicio da viagem' AND SUBSTRING(timestamp, 1, 7) = '2017-03-01' ORDER BY id LIMIT 1;
WITH ranked_events AS ( SELECT id, activity, timestamp, resource, cost, idcase, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS row_num FROM event_log WHERE activity = 'inicio da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' ) SELECT id FROM ranked_events WHERE row_num = 1;
SELECT DISTINCT id FROM event_log WHERE activity = 'inicio da viagem' AND timestamp BETWEEN '2017-03-01 00:00:00' AND '2017-03-31 23:59:59' AND id NOT IN ( SELECT id FROM event_log WHERE activity!= 'inicio da viagem' GROUP BY id HAVING MIN(timestamp) > '2017-03-01 00:00:00' )
SELECT * FROM "event_log" WHERE "activity" LIKE '%início da viagem%' AND "timestamp" >= '2017-03-01 00:00:00' AND "timestamp" < '2017-04-01 00:00:00';
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS quantidade_vezes FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource, COUNT(*) AS frequency FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5 ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource HAVING COUNT(*) > 5;
SELECT idcase, COUNT(*) AS num_intervencoes FROM event_log GROUP BY idcase HAVING COUNT(*) > 5
SELECT resource, COUNT(*) as count FROM event_log GROUP BY resource HAVING COUNT(*) > 5 ORDER BY count DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC LIMIT 10;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC LIMIT 10;
SELECT f.nome, SUM(el.cost) AS total_cost FROM event_log el JOIN funcionarios f ON el.idcase = f.idcase WHERE el.activity = 'aprovacao' AND el.resource ='supervisor' GROUP BY f.nome ORDER BY total_cost DESC LIMIT 10;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as frequency FROM event_log WHERE activity = 'declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC;
SELECT e.id, e.activity, e.timestamp, e.resource, e.cost, e.idcase, f.name, SUM(e.cost) AS total_cost FROM event_log e JOIN employees f ON e.id = f.id WHERE e.activity = 'aproveitar declaração' AND e.resource LIKE '%supervisor%' GROUP BY e.id, f.name ORDER BY total_cost DESC;
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND (resource = 'Eugene' OR resource = 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND (resource = 'Eugene' OR resource = 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND (resource = 'Eugine' OR resource = 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugine', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%aprovou%' AND resource LIKE '%Eugene%' OR resource LIKE '%Marie%';
SELECT COUNT(*) FROM event_log WHERE activity = 'APROVADO' AND (resource LIKE '%Eugene%' OR resource LIKE '%Marie%');
SELECT DISTINCT el1.activity FROM event_log el1 WHERE el1.idcase = 'declaração 49464' AND NOT EXISTS ( SELECT 1 FROM event_log el2 WHERE el2.idcase = 'declaração 76667' AND el1.activity = el2.activity )
SELECT activity FROM event_log WHERE idcase = 'declaração 49464' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase = 'declaração 76667' )
SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaração 49464' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase = 'declaração 76667' )
Um desafio! Infelizmente, não há informações suficientes para responder essa pergunta, pois não há nenhuma declaração 49464 ou 76667 mencionada no esquema de banco de dados fornecido. O esquema de banco de dados apenas define a estrutura da tabela "event_log", mas não há nenhuma informação sobre as declarações 49464 e 76667. Se você puder fornecer mais contexto ou informações sobre essas declarações, posso tentar ajudar a responder sua pergunta.
SELECT resource, COUNT(*) AS num_vezes FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) as quantidade FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS "Número de vezes" FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT f.name, COUNT(*) AS "quantidade_de_requisicoes" FROM event_log el JOIN funcionarios f ON el.idcase = f.idcase WHERE el.activity ='requisitar declaração' GROUP BY f.name HAVING COUNT(*) > 2;
SELECT * FROM event_log WHERE activity ='requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity ='requisição de pagamento' AND timestamp >= '2017-05-01 00:00:00' AND timestamp < '2017-05-11 00:00:00';
SELECT DISTINCT "resource" FROM "event_log" WHERE "activity" ='requisição de pagamento' AND EXTRACT(MONTH FROM "timestamp") = 5 AND EXTRACT(DAY FROM "timestamp") <= 10 AND EXTRACT(YEAR FROM "timestamp") = 2017;
SELECT DISTINCT idcase FROM event_log WHERE activity ='requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT idcase FROM event_log WHERE activity ='requisição de pagamento' AND timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59' AND idcase IS NOT NULL;
SELECT DISTINCT idcase FROM event_log WHERE activity ='requisição de pagamento' AND timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT * FROM "event_log" WHERE "timestamp" BETWEEN '2017-05-01' AND '2017-05-10' AND "activity" LIKE '%payment%' AND "idcase" LIKE '%case%';
SELECT * FROM "event_log" WHERE "activity" LIKE '%requisição de pagamento%' AND "timestamp" BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(resource) AS quantidade_recursos FROM event_log GROUP BY idcase;
SELECT idcase, resource, COUNT(*) AS num_resources FROM event_log GROUP BY idcase, resource
SELECT idcase, COUNT(DISTINCT resource) AS quantidade_recursos FROM event_log GROUP BY idcase;
SELECT idcase, SUM(cost) AS total_cost, SUM(CASE WHEN resource IS NOT NULL THEN cost ELSE 0 END) AS total_resource_cost FROM event_log GROUP BY idcase
SELECT activity, COUNT(*) AS num_funcionarios FROM event_log GROUP BY activity
SELECT * FROM event_log WHERE activity = 'Tratado' AND idcase IN ( SELECT idcase FROM event_log WHERE username = 'Christopher' )
SELECT idcase FROM event_log WHERE activity = 'CASE_CLOSED' AND username = 'Christopher';
SELECT * FROM event_log WHERE idcase = 'Christopher';
SELECT * FROM event_log WHERE resource = 'Christopher' GROUP BY activity HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log);
SELECT * FROM event_log WHERE resource = 'Christopher' AND idcase IS NULL;
SELECT * FROM event_log WHERE activity LIKE '%Christopher%';
SELECT el.* FROM event_log el JOIN cases c ON el.idcase = c.idcase WHERE el.activity ='Christopher' AND c.status = 'fechado'
Para responder essa pergunta, precisamos saber quais são as atividades realizadas pelo funcionário Christopher. Suponha que tenhamos uma tabela "employee" com as seguintes colunas: CREATE TABLE "employee" ( "id" int, "name" TEXT COLLATE NOCASE, "activity" TEXT COLLATE NOCASE ) E que a tabela "event_log" contenha as seguintes entradas relacionadas ao funcionário Christopher: INSERT INTO "event_log" ("id", "activity", "timestamp", "resource", "cost", "idcase") VALUES (1,'Christopher logged in', '2022-01-01 08:00:00', 'login', 0, '12345'), (2,'Christopher created a new case', '2022-01-01 08:30:00', 'case', 10, '67890'), (3,'Christopher updated a case', '2022-01-01 09:00:00', 'case', 5, '12345'), (4,'Christopher logged out', '2022-01-01 17:00:00', 'logout', 0, '12345'); Agora, podemos responder à pergunta com a seguinte consulta: SELECT * FROM "event_log" WHERE "activity" IN ( SELECT "activity" FROM "employee" WHERE "name" = 'Christopher' ); Essa consulta retorna as seguintes linhas: | id | activity | timestamp | resource | cost | idcase | |----|---------------------------|-------------------|----------|------|--------| | 1 | Christopher logged in | 2022-01-01 08:00:00| login | 0 | 12345 | | 2 | Christopher created a new case | 2022-01-01 08:30:00| case | 10 | 67890 | | 3 | Christopher updated a case | 2022-01-01 09:00:00| case | 5 | 12345 | | 4 | Christopher logged out | 2022-01-01 17:00:00| logout | 0 | 12345 | Essas são as declarações que foram de interia responsabilidade do funcionário Christopher.
SELECT resource, SUM(cost) AS total_cost FROM event_log GROUP BY resource HAVING SUM(cost) = 0;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) = COUNT(*)
SELECT resource, idcase FROM event_log GROUP BY resource, idcase HAVING COUNT(DISTINCT id) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log)
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT c.name, e.activity, e.timestamp, e.resource, e.cost, e.idcase FROM event_log e JOIN collaborators c ON e.idcase = c.id GROUP BY c.name, e.activity, e.timestamp, e.resource, e.cost, e.idcase HAVING COUNT(DISTINCT e.id) = 1;
SELECT DISTINCT "resource" AS "Processo", "idcase" AS "Funcionário" FROM "event_log" WHERE "activity" LIKE '%processo%' -- ajuste para o tipo de atividade que você está procurando ORDER BY "Funcionário", "Processo";
SELECT "idcase" AS funcionario, COUNT(*) AS num_decl FROM "event_log" GROUP BY "idcase" HAVING COUNT(*) = 1;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
SELECT DISTINCT idcase FROM event_log WHERE timestamp >= DATE('now') - INTERVAL 1 DAY GROUP BY idcase HAVING COUNT(*) > 1;
SELECT DISTINCT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT DISTINCT "resource" FROM "event_log" WHERE "timestamp" >= DATE('now') - INTERVAL 1 DAY GROUP BY "resource" HAVING COUNT(*) > 1;
SELECT COUNT(*) AS num_interventions, DATE(timestamp) AS date FROM event_log GROUP BY DATE(timestamp) HAVING COUNT(*) > 1;
SELECT resource, idcase, COUNT(*) AS num_events FROM event_log WHERE cost IS NULL GROUP BY resource, idcase;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE cost IS NULL GROUP BY resource
SELECT "idcase", "resource", COUNT(*) AS "quantidade_eventos" FROM "event_log" WHERE "cost" IS NULL GROUP BY "idcase", "resource"
SELECT resource, COUNT(*) AS num_null_cost_events FROM event_log WHERE cost IS NULL GROUP BY resource
SELECT resource, COUNT(*) AS num_events, SUM(CASE WHEN cost IS NULL THEN 1 ELSE 0 END) AS num_null_cost_events FROM event_log GROUP BY resource
SELECT el.idcase AS "Processo", el.resource AS "Colaborador", COUNT(*) AS "Quantidade de eventos de custo nulo" FROM event_log el WHERE el.cost IS NULL GROUP BY el.idcase, el.resource
SELECT idcase, COUNT(*) AS num_intervencoes_sem_custo FROM event_log WHERE cost = 0 GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_intervencoes_sem_custo FROM event_log WHERE cost = 0 GROUP BY idcase;
SELECT * FROM event_log WHERE activity = 'permissão rejeitada pelo diretor';
SELECT * FROM "event_log" WHERE "activity" = 'permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'permissao rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity LIKE '%permissao rejeitada%' AND resource LIKE '%diretor%';
SELECT * FROM event_log WHERE activity LIKE '%permission rejection%' AND idcase = '<director_case_id>';
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS dia, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY dia;
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(cost) AS soma_custo FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(cost) AS soma_eventos FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT * FROM "event_log" WHERE "cost" > 1000 AND "resource" LIKE '%supervisor%' OR "resource" LIKE '%diretor%';
SELECT * FROM event_log WHERE activity IN ('execução', 'alteração') AND cost > 1000;
SELECT el.activity, el.timestamp, el.resource, el.cost FROM event_log el JOIN users u ON el.idcase = u.idcase WHERE el.cost > 1000 AND u.role IN ('supervisor', 'diretor') ORDER BY el.cost DESC;
SELECT activity FROM event_log WHERE activity LIKE '%supervisor%' OR activity LIKE '%director%' AND cost > 1000;
SELECT * FROM "event_log" WHERE "cost" > 1000 AND ("resource" LIKE '%supervisor%' OR "resource" LIKE '%diretor%');
SELECT * FROM event_log WHERE activity IN ('supervisor', 'diretor') AND cost > 1000;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase;
SELECT "resource", COUNT(*) AS "quantidade_eventos" FROM "event_log" GROUP BY "resource"
SELECT idcase, COUNT(*) AS num_intervencoes FROM event_log GROUP BY idcase;
SELECT resource, COUNT(*) AS num_tasks FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_atividades FROM event_log GROUP BY resource ORDER BY quantidade_atividades DESC;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS quantidade_tarefas FROM event_log GROUP BY resource ORDER BY quantidade_tarefas DESC;
SELECT "idcase", COUNT(*) AS "number_of_actions" FROM "event_log" GROUP BY "idcase";
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%Alexis%' GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE idcase LIKE '%Alexis%' GROUP BY idcase ORDER BY num_activities DESC;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%Alexis%' -- Filtra apenas as atividades que envolvem a Alexis GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_atividades FROM event_log WHERE resource = 'Alexis' GROUP BY idcase;
SELECT el.idcase AS caso, COUNT(*) AS quantidade_atividades FROM event_log el WHERE el.activity LIKE '%Alexis%' -- Filtra apenas as atividades de Alexis GROUP BY el.idcase -- Agrupa por caso ORDER BY caso;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE idcase = 'Alexis' GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_actions, GROUP_CONCAT(DISTINCT activity) AS activities FROM event_log WHERE idcase LIKE '%Alexis%' GROUP BY idcase ORDER BY num_actions DESC;
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM event_log AS prev_event WHERE prev_event.id < event_log.id AND prev_event.activity = 'início da viagem' );
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM event_log AS prev_event WHERE prev_event.activity = 'início da viagem' AND prev_event.timestamp < event_log.timestamp )
SELECT COUNT(*) FROM "event_log" WHERE "activity" = 'permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM "event_log" WHERE "activity" = 'início da viagem' AND "timestamp" > (SELECT "timestamp" FROM "event_log" WHERE "activity" = 'permissão final aprovada pelo supervisor' AND "id" = (SELECT MAX("id") FROM "event_log" WHERE "activity" = 'permissão final aprovada pelo supervisor')) )
SELECT COUNT(DISTINCT idcase) AS num_instances FROM event_log WHERE activity = 'permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM event_log AS prev_event WHERE prev_event.activity = 'início da viagem' AND prev_event.timestamp < event_log.timestamp )
SELECT COUNT(*) FROM "event_log" WHERE "activity" = 'início da viagem' AND "id" IN ( SELECT "idcase" FROM "event_log" WHERE "activity" = 'permissão final aprovada pelo supervisor' ORDER BY "timestamp" )
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%início da viagem%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE '%permissão com aprovação final do supervisor%');
SELECT COUNT(*) FROM event_log WHERE activity = 'APROVADO' AND EXISTS ( SELECT 1 FROM event_log AS log2 WHERE log2.activity = 'INICIO_VIAGEM' AND log2.timestamp > event_log.timestamp )
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%permissao%' AND idcase LIKE '%viagem%' AND cost > 0 AND timestamp < (SELECT MIN(timestamp) FROM event_log WHERE activity LIKE '%inicio_viagem%');
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp < '2017-12-12 00:00:00' OR timestamp > '2017-12-12 23:59:59';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp < '2017-12-12' OR timestamp > '2017-12-12';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp < '2017-12-12' OR timestamp > '2017-12-12';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp < '2017-12-13' OR timestamp > '2017-12-11';
SELECT * FROM event_log WHERE timestamp NOT LIKE '%2017-12-12%' AND activity = 'fim da viagem';
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND timestamp < '2017-12-12 00:00:00' OR timestamp > '2017-12-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%fim de viagem%' AND timestamp NOT LIKE '%2017-12-12%' AND timestamp NOT LIKE '%2017-12-12 00:00:00%' AND timestamp NOT LIKE '%2017-12-12 23:59:59%';
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT "resource", COUNT(*) AS "number_of_executions" FROM "event_log" GROUP BY "resource"
Para responder à sua pergunta, você precisará criar uma tabela intermediária que relacione os eventos com os responsáveis. Suponha que você tenha uma tabela "responsaveis" com a seguinte estrutura: CREATE TABLE "responsaveis" ( "id" int, "nome" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, você pode criar uma tabela intermediária "event_log_responsaveis" com a seguinte estrutura: CREATE TABLE "event_log_responsaveis" ( "id_evento" int, "id_responsavel" int, PRIMARY KEY("id_evento", "id_responsavel"), FOREIGN KEY("id_evento") REFERENCES "event_log"("id"), FOREIGN KEY("id_responsavel") REFERENCES "responsaveis"("id") ) Agora, você pode usar a seguinte consulta para obter a quantidade de eventos que cada responsável atuou: SELECT r.nome, COUNT(el.id) AS quantidade_eventos FROM "event_log_responsaveis" er JOIN "responsaveis" r ON er.id_responsavel = r.id GROUP BY r.nome ORDER BY quantidade_eventos DESC; Essa consulta junta a tabela "event_log_responsaveis" com a tabela "responsaveis" e agrupa os resultados por responsável. A função COUNT(el.id) contabiliza a quantidade de eventos para cada responsável.
Para responder à sua pergunta, precisamos de uma tabela que relacione as pessoas responsáveis com as atividades registradas no evento log. Suponho que essa tabela seja a "case" com as seguintes colunas: CREATE TABLE "case" ( "id" int, "responsible" TEXT COLLATE NOCASE, "idcase" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, podemos utilizar a seguinte consulta para obter o número de vezes que cada pessoa responsável atuou no processamento de declarações: SELECT c.responsible, COUNT(el.id) AS num_activities FROM event_log el JOIN case c ON el.idcase = c.idcase GROUP BY c.responsible ORDER BY num_activities DESC; Essa consulta junta as tabelas "event_log" e "case" pela coluna "idcase", contabiliza o número de atividades para cada pessoa responsável e ordena os resultados por número de atividades em ordem decrescente.
Para responder à sua pergunta, você precisará criar uma tabela intermediária que relacione as ações do log de eventos com as pessoas atuantes no processo de declarações de viagens. Suponha que você tenha uma tabela chamada "users" com as seguintes colunas: CREATE TABLE "users" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) E que você tenha uma tabela chamada "cases" com as seguintes colunas: CREATE TABLE "cases" ( "id" int, "user_id" int, "status" TEXT COLLATE NOCASE, PRIMARY KEY("id"), FOREIGN KEY("user_id") REFERENCES "users"("id") ) Agora, você pode criar uma tabela intermediária chamada "case_activities" que relaciona as ações do log de eventos com as pessoas atuantes no processo de declarações de viagens: CREATE TABLE "case_activities" ( "case_id" int, "activity_id" int, PRIMARY KEY("case_id", "activity_id"), FOREIGN KEY("case_id") REFERENCES "cases"("id"), FOREIGN KEY("activity_id") REFERENCES "event_log"("id") ) Agora, você pode responder à sua pergunta com a seguinte consulta: SELECT u.name AS "User", COUNT(e.id) AS "Number of activities" FROM "case_activities" ca JOIN "cases" c ON ca.case_id = c.id JOIN "users" u ON c.user_id = u.id JOIN "event_log" e ON ca.activity_id = e.id GROUP BY u.name ORDER BY "Number of activities" DESC; Essa consulta retorna a lista de usuários atuantes no processo de declarações de viagens, juntamente com o número de ações que ficaram sob sua responsabilidade.
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS quantidade_atividades FROM event_log GROUP BY resource ORDER BY quantidade_atividades DESC;
SELECT resource, COUNT(*) AS quantidade_atividades FROM event_log GROUP BY resource;
CREATE TABLE "collaborators" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") )
SELECT DISTINCT activity FROM event_log WHERE resource!= 'Virginia' ORDER BY activity;
SELECT DISTINCT activity FROM event_log WHERE activity NOT IN ( SELECT resource FROM event_log WHERE resource = 'Virginia' ) ORDER BY activity;
SELECT activity FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE idcase LIKE '%Virginia%');
SELECT DISTINCT activity FROM event_log WHERE idcase NOT LIKE '%Virginia%' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase LIKE '%Virginia%' ) ORDER BY activity;
SELECT DISTINCT el.activity FROM event_log el WHERE el.idcase NOT IN ( SELECT ec.idcase FROM event_log ec JOIN employees e ON ec.idcase = e.id WHERE e.name = 'Virginia' ) ORDER BY el.activity;
SELECT activity FROM event_log WHERE idcase!= 'Virgínia' GROUP BY activity HAVING COUNT(DISTINCT idcase) = 0
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" ='rejeitada';
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" ='rejeitada';
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity ='rejeitada' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" ='rejeitada'
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" ='rejeitada';
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" = 'DECLARACAO_VIAGEM' AND "idcase" LIKE '%REJEICAO%'
SELECT AVG(e.cost) AS media_custo FROM event_log e WHERE e.idcase LIKE '%rejeitada%'
SELECT idcase, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' GROUP BY idcase
SELECT idcase, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' GROUP BY idcase
SELECT idcase, activity, TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY idcase, activity ORDER BY timestamp), timestamp) AS duration FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' ORDER BY idcase, timestamp;
SELECT idcase, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' GROUP BY idcase
SELECT idcase, TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp), timestamp) AS duration FROM event_log WHERE activity = 'declaração aprovada pelo supervisor' ORDER BY idcase, timestamp;
SELECT * FROM "event_log" WHERE "activity" = 'Declaração aprovada pelo supervisor';
SELECT TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM event_log WHERE activity = 'enviar declaração' AND idcase = 'declaração_id'), (SELECT timestamp FROM event_log WHERE activity = 'aprovar declaração' AND idcase = 'declaração_id')) AS tempo_espera FROM event_log WHERE activity = 'aprovar declaração' AND idcase = 'declaração_id';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) FROM "event_log" WHERE "activity" = 'declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) AS "Número de rejeições" FROM "event_log" WHERE "activity" = 'REJEITADA' AND "idcase" LIKE '%PRÉ-APROVAÇÃO%';
SELECT COUNT(*) FROM event_log WHERE activity = 'REJECT_CASE';
SELECT "idcase", "resource", MAX("timestamp") AS "data_ocorrencia" FROM "event_log" WHERE "activity" = 'fim da viagem' GROUP BY "idcase", "resource" ORDER BY "resource";
SELECT idcase, timestamp FROM event_log WHERE activity = 'fim da viagem' ORDER BY resource;
SELECT resource, timestamp FROM event_log WHERE activity = 'fim da viagem' ORDER BY resource;
SELECT resource, timestamp FROM event_log WHERE activity = 'fim da viagem' ORDER BY resource;
SELECT e.activity, e.timestamp, r.name AS responsible_name FROM event_log e JOIN ( SELECT idcase, (SELECT name FROM users WHERE id = (SELECT user_id FROM cases WHERE idcase = e.idcase)) AS name FROM event_log WHERE activity = 'Fim da viagem' ) r ON e.idcase = r.idcase ORDER BY r.name;
SELECT "idcase" AS "Código da declaração processada", MAX("timestamp") AS "Data da finalização da viagem", "resource" AS "Nome do funcionário" FROM "event_log" WHERE "activity" = 'FINALIZOU_VIAGEM' GROUP BY "resource" ORDER BY "resource";
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase;
SELECT "idcase", COUNT(*) AS "number_of_events" FROM "event_log" GROUP BY "idcase";
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase;
SELECT "idcase", COUNT(*) AS "number_of_events" FROM "event_log" GROUP BY "idcase";
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_actions FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_intervencoes FROM event_log GROUP BY idcase
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'fim da viagem' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%viagem%' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT COUNT(*) FROM event_log WHERE activity = 'final da viagem' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59';
SELECT "idcase", "resource", "id", "timestamp" FROM "event_log" WHERE "activity" = 'envio de lembrete' ORDER BY "timestamp" DESC;
SELECT "idcase" AS "Identificador do Caso", "resource" AS "Recurso", "id" AS "Identificador do Evento", "timestamp" AS "Data de Finalização" FROM "event_log" WHERE "activity" = 'envio de lembrete' ORDER BY "timestamp" ASC;
SELECT el.id, el.resource, el.timestamp FROM event_log el WHERE el.activity = 'envio de lembrete' ORDER BY el.timestamp DESC;
SELECT el.id, el.activity, el.resource, el.timestamp, el.cost, el.idcase FROM event_log el WHERE el.activity = 'envio de lembrete' ORDER BY el.timestamp DESC;
SELECT idcase, id, resource, timestamp FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC;
SELECT el.id, el.resource, el.timestamp FROM event_log el WHERE el.activity = 'envio de lembrete' ORDER BY el.timestamp DESC;
SELECT idcase, resource, id, timestamp AS "data_finalizacao" FROM event_log WHERE activity LIKE '%envio de lembrete%' ORDER BY timestamp DESC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
Para responder à sua pergunta, precisamos analisar o esquema de banco de dados fornecido e identificar as informações relevantes. No entanto, noto que o esquema não inclui informações sobre funcionários ou processos de declaração. O esquema apenas define uma tabela chamada "event_log" que registra atividades em um sistema, com campos como "activity", "resource", "cost", etc. Portanto, não é possível responder à sua pergunta com base no esquema fornecido, pois não há informações sobre funcionários ou processos de declaração. Se você fornecer mais informações sobre o banco de dados, como tabelas adicionais ou relações entre as tabelas, posso ajudar a responder à sua pergunta.
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(idcase) > 200;
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(*) > 200;
SELECT DISTINCT resource FROM event_log WHERE activity = 'viagem' AND id IN ( SELECT id FROM event_log GROUP BY resource HAVING COUNT(*) > 200 ) ORDER BY COUNT(*) DESC;
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaração de viagem' GROUP BY resource HAVING COUNT(*) > 200;
SELECT DISTINCT person_name FROM travel_declaration JOIN event_log ON travel_declaration.event_log_id = event_log.id GROUP BY person_name HAVING COUNT(*) > 200;
SELECT e.name FROM employees e JOIN ( SELECT idcase, COUNT(*) as num_requests FROM event_log WHERE activity = 'travel_request' GROUP BY idcase HAVING COUNT(*) > 200 ) t ON e.id = t.idcase
SELECT DISTINCT resource, COUNT(*) as count FROM event_log WHERE activity = 'viagem' GROUP BY resource HAVING COUNT(*) > 200 ORDER BY count DESC;
SELECT COUNT(DISTINCT "resource") AS "Number of resources" FROM "event_log";
SELECT COUNT(DISTINCT "resource") AS "Number of resources" FROM "event_log";
SELECT COUNT(DISTINCT "idcase") AS "quantidade_funcionarios" FROM "event_log" WHERE "activity" LIKE '%tratamento%declaração%' OR "activity" LIKE '%declaração%tratamento%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declarações%';
Uma pergunta interessante! No entanto, é importante notar que o esquema de banco de dados fornecido não contém informações sobre pessoas. O campo "resource" parece ser um campo que pode conter nomes de recursos, como arquivos, páginas web, etc., mas não há um campo que indique a associação com pessoas. Portanto, não é possível responder a essa pergunta com base nos dados fornecidos. Se você tiver mais informações sobre o banco de dados ou os dados que estão sendo armazenados, posso ajudar a fornecer uma resposta mais precisa.
Uma pergunta interessante! No entanto, ao analisar o esquema de banco de dados fornecido, não há uma coluna que indique a quantidade de pessoas associadas à execução de atividades no log de eventos. A coluna "idcase" pode ser uma referência a um caso ou um identificador único, mas não há informações sobre as pessoas envolvidas. Portanto, não é possível responder essa pergunta com base no esquema de banco de dados fornecido. Seria necessário adicionar mais informações ou alterar o esquema para incluir essa informação. Se você tiver mais informações sobre o banco de dados ou puder fornecer mais contexto, posso ajudar a responder essa pergunta.
SELECT COUNT(DISTINCT responsável) AS "Número de pessoas responsáveis" FROM event_log;
Para responder à sua pergunta, precisamos analisar o esquema de banco de dados e identificar a coluna que representa a responsabilidade por tratamento de declarações. No entanto, não há nenhuma coluna no esquema que indique a responsabilidade por tratamento de declarações. Portanto, não é possível responder à sua pergunta com base no esquema fornecido. Se você tiver mais informações sobre o banco de dados, como uma tabela de usuários ou uma tabela de casos, poderíamos ajudar a responder à sua pergunta.
SELECT COUNT(DISTINCT resource) AS num_funcionarios FROM event_log WHERE activity LIKE '%processamento de declarações%';
SELECT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE '%declaração%';
SELECT * FROM event_log WHERE activity LIKE '%declaração%';
SELECT * FROM "event_log" WHERE "activity" LIKE '%declaração%';
SELECT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT * FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT * FROM event_log WHERE activity LIKE '%declaração%';
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS media_custo FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS average_cost FROM event_log WHERE activity LIKE '%declaração de viagem%' -- ajuste essa condição para incluir apenas as ações relacionadas às declarações de viagem GROUP BY activity;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost IS NULL;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT * FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permission%' OR activity LIKE '%declare%';
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
SELECT activity FROM event_log WHERE activity LIKE '%permissao%' OR activity LIKE '%declaracao%';
SELECT activity FROM event_log WHERE activity LIKE '%permissao%' OR activity LIKE '%declaracao%';
SELECT * FROM event_log WHERE activity LIKE '%permissao%' OR activity LIKE '%declaracao%';
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
SELECT * FROM "event_log" WHERE "activity" LIKE '%permissão%' OR "activity" LIKE '%declaração%';
Based on the provided database schema, here are the actions related to permissions and explicit declarations in the process of managing declarations: **Permissions:** 1. **SELECT**: The `SELECT` statement is used to retrieve data from the `event_log` table. This action requires the necessary permissions to access the table, which can be granted or denied by the database administrator. 2. **INSERT**: The `INSERT` statement is used to add new records to the `event_log` table. This action requires the necessary permissions to write to the table, which can be granted or denied by the database administrator. 3. **UPDATE**: The `UPDATE` statement is used to modify existing records in the `event_log` table. This action requires the necessary permissions to update the table, which can be granted or denied by the database administrator. 4. **DELETE**: The `DELETE` statement is used to delete records from the `event_log` table. This action requires the necessary permissions to delete from the table, which can be granted or denied by the database administrator. **Explicit Declarations:** 1. **Primary Key**: The `id` column is declared as the primary key of the `event_log` table, which ensures that each record has a unique identifier. 2. **Data Types**: The data types for each column are explicitly declared, such as `int` for the `id` column, `TEXT` for the `activity`, `timestamp`, and `resource` columns, and `NUMERIC` for the `cost` column. 3. **Collation**: The `COLLATE NOCASE` clause is used to specify the collation for the `activity` and `resource` columns, which determines the sorting and comparison rules for these columns. These explicit declarations and permissions are essential for ensuring data integrity, security, and consistency in the database.
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM "event_log" WHERE "activity" = 'declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declaração rejeitada pelo diretor%';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração de rejeição de responsabilidade da direção';
SELECT AVG("cost") AS "custo_medio" FROM "event_log";
SELECT AVG("cost") AS "average_cost" FROM "event_log";
SELECT AVG("cost") AS "average_cost" FROM "event_log";
SELECT AVG("cost") AS "custo_medio" FROM "event_log" GROUP BY "activity"
SELECT AVG("cost") AS media_custo FROM "event_log";
SELECT AVG("cost") AS "custo_medio" FROM "event_log";
SELECT AVG("cost") AS "custo_medio" FROM "event_log" GROUP BY "activity"
SELECT AVG("cost") AS "average_cost" FROM "event_log";
SELECT AVG("cost") AS "average_cost" FROM "event_log";
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "idcase" IS NOT NULL GROUP BY "idcase";
SELECT resource, COUNT(*) as num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(idcase) AS quantidade_casos FROM event_log GROUP BY resource ORDER BY quantidade_casos DESC;
SELECT resource, COUNT(idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC;
Para responder à sua pergunta, você precisará criar uma tabela intermediária que relacione os funcionários com as suas declarações. Suponha que você tenha uma tabela "funcionarios" com a seguinte estrutura: CREATE TABLE "funcionarios" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, você pode criar uma tabela intermediária "funcionario_event_log" que relaciona os funcionários com as suas declarações no evento log: CREATE TABLE "funcionario_event_log" ( "funcionario_id" int, "event_log_id" int, PRIMARY KEY("funcionario_id", "event_log_id"), FOREIGN KEY("funcionario_id") REFERENCES "funcionarios"("id"), FOREIGN KEY("event_log_id") REFERENCES "event_log"("id") ) Agora, você pode usar a seguinte consulta para contar em quantas declarações cada funcionário já atuou: SELECT f.name, COUNT(el.id) AS num_declaracoes FROM funcionarios f JOIN funcionario_event_log fel ON f.id = fel.funcionario_id GROUP BY f.name Essa consulta junta as tabelas "funcionarios" e "funcionario_event_log" e agrupa os resultados por funcionário. O campo "num_declaracoes" contém o número de declarações para cada funcionário.
SELECT COUNT(*) FROM event_log WHERE idcase = 'Peter';
Para responder à sua pergunta, você precisaria ter uma tabela que relacione os eventos do log com os usuários, como por exemplo: CREATE TABLE "users" ( "id" int, "name" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) CREATE TABLE "event_user" ( "id_event" int, "id_user" int, PRIMARY KEY("id_event", "id_user"), FOREIGN KEY("id_event") REFERENCES "event_log"("id"), FOREIGN KEY("id_user") REFERENCES "users"("id") ) Com essa estrutura, você poderia fazer uma consulta para contar o número de eventos vinculados ao usuário Peter: SELECT COUNT(*) FROM "event_user" WHERE "id_user" IN (SELECT "id" FROM "users" WHERE "name" = 'Peter') No entanto, se você não tiver essa estrutura, você não poderia fazer essa consulta direta, pois não há uma coluna que relacione os eventos com os usuários.
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS "rendimento" FROM "event_log" WHERE "resource" = 'Peter';
WITH activity_counts AS ( SELECT idcase, COUNT(*) AS num_activities FROM event_log GROUP BY idcase ) SELECT idcase FROM activity_counts WHERE num_activities > 3;
SELECT idcase, COUNT(*) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT u.iduser, COUNT(*) AS num_cases FROM event_log el JOIN case_users cu ON el.idcase = cu.idcase JOIN users u ON cu.iduser = u.iduser GROUP BY u.iduser HAVING COUNT(*) > 3;
SELECT f.nome FROM funcionarios f JOIN ( SELECT idcase, COUNT(*) AS num_cases FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ) c ON f.id = (SELECT idcase FROM event_log WHERE idcase = c.idcase)
CREATE TABLE "pessoa" ( "id" int, "nome" TEXT COLLATE NOCASE, PRIMARY KEY("id") )
Para responder à sua pergunta, precisamos fazer uma consulta que relacione a tabela "event_log" com outra tabela que contenha informações sobre os funcionários e os processos associados a eles. Suponha que a tabela "funcionarios" tenha as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, "idcase" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, podemos fazer a seguinte consulta para encontrar os funcionários que foram associados a mais de três instâncias de processo: SELECT f.nome FROM funcionarios f JOIN event_log el ON f.idcase = el.idcase GROUP BY f.nome HAVING COUNT(el.id) > 3 Essa consulta faz o seguinte: 1. Junta a tabela "funcionarios" com a tabela "event_log" usando a coluna "idcase" como chave de junção. 2. Agrupa os resultados pela coluna "nome" da tabela "funcionarios". 3. Filtre os resultados para incluir apenas os funcionários que têm mais de três registros na tabela "event_log" (ou seja, que foram associados a mais de três instâncias de processo). A saída da consulta será uma lista de nomes de funcionários que foram associados a mais de três instâncias de processo.
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity ='requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as quantidade_eventos FROM event_log WHERE activity ='requisição de pagamento' GROUP BY idcase ORDER BY quantidade_eventos ASC;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity LIKE '%requisição de pagamento%' GROUP BY idcase ORDER BY quantidade_eventos ASC;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity ='requisição de pagamento' GROUP BY idcase ORDER BY quantidade_eventos ASC;
SELECT idcase, COUNT(*) AS num_events, activity FROM event_log WHERE activity ='requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity ='requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_activities, SUM(cost) AS total_cost FROM event_log WHERE activity LIKE '%payment%' GROUP BY idcase ORDER BY num_activities ASC;
SELECT idcase, COUNT(*) AS num_actions FROM event_log GROUP BY idcase ORDER BY num_actions;
SELECT timestamp FROM event_log WHERE activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário') ORDER BY timestamp ASC;
SELECT timestamp FROM event_log WHERE activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário') ORDER BY timestamp ASC;
SELECT timestamp FROM event_log WHERE activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário') ORDER BY timestamp ASC;
SELECT timestamp FROM event_log WHERE activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário') ORDER BY timestamp ASC;
SELECT timestamp FROM event_log WHERE activity IN ('fim da viagem', 'closed') ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário') ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity LIKE '%fim de viagem%' OR activity LIKE '%declaração rejeitada por funcionário%' ORDER BY timestamp ASC;
SELECT timestamp, activity, resource, idcase FROM event_log WHERE activity IN ('Fim de viagem', 'Rejeição de declaração') ORDER BY timestamp ASC;
SELECT resource, COUNT(*) AS "Ocorrências" FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS num_execucoes FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS num_execucoes FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS num_execucoes FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS num_executions FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS ocorrências FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS num_occurrences FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) as ocorrencias FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT f.nome, COUNT(el.id) AS quantidade_atuacoes FROM funcionarios f JOIN event_log el ON f.nome = el.idcase GROUP BY f.nome ORDER BY f.nome;
SELECT e.idcase, f.nome, COUNT(*) AS quantidade_acoes FROM event_log e JOIN funcionarios f ON e.idcase = f.id GROUP BY e.idcase, f.nome ORDER BY f.nome;
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT 'E-Submission' AS label, activity FROM event_log WHERE activity LIKE 'SUBMIT%' OR activity LIKE 'UPDATE%' OR activity LIKE 'DELETE%' OR activity LIKE 'CREATE%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT el.id, el.activity, f.nome, el.cost FROM event_log el JOIN funcionarios f ON el.id = f.id WHERE el.activity LIKE '%processamento de declaração%' AND el.cost BETWEEN 50 AND 400;
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaração salva pelo funcionário';
SELECT DISTINCT resource FROM event_log WHERE activity = 'declaração salva pelo funcionário';
SELECT DISTINCT "idcase" AS funcionario FROM "event_log" WHERE "activity" = 'declaração salva';
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%salvar declaração%';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity FROM event_log WHERE timestamp >= '2018-04-12 00:00:00' AND timestamp < '2018-04-13 00:00:00';
SELECT * FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12 23:59:59';
SELECT DISTINCT activity FROM event_log WHERE timestamp LIKE '%2018-04-12%'
SELECT activity FROM event_log WHERE timestamp = '2018-04-12 23:59:59';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12 23:59:59';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12 23:59:59';
SELECT "resource" FROM "event_log" WHERE "timestamp" = '2018-04-12' AND "activity" LIKE '%processamento de declaração%';
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('permissão final aprovada pelo supervisor', 'declaração aprovada pelo supervisor') ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('permissão final aprovada pelo supervisor', 'declaração aprovada pelo supervisor') ORDER BY timestamp DESC;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('permissão final aprovada pelo supervisor', 'declaração aprovada pelo supervisor') ORDER BY timestamp DESC;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('permissão final aprovada pelo supervisor', 'declaração aprovada pelo supervisor') ORDER BY timestamp DESC;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('permissão final aprovada pelo supervisor', 'declaração aprovada pelo supervisor') ORDER BY timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('permissão final aprovada pelo supervisor', 'declaração aprovada pelo supervisor') ORDER BY timestamp DESC;
SELECT * FROM event_log WHERE activity LIKE 'APROVAÇÃO%' OR activity LIKE 'APROVOU%' ORDER BY timestamp DESC;
SELECT id, activity, timestamp FROM event_log WHERE activity LIKE '%aprovar%' OR activity LIKE '%aprovação%' OR activity LIKE '%permissão%' OR activity LIKE '%declaração%' ORDER BY timestamp;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log JOIN permission_grants ON event_log.id = permission_grants.id WHERE event_log.activity = 'processamento de declarações' AND permission_grants.director_id = <id_do_diretor>;
SELECT COUNT(*) FROM event_log WHERE activity = 'permissao_final' AND resource LIKE '%diretor%';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'inicio da viagem' AND resource LIKE '%s';
SELECT DISTINCT timestamp FROM event_log WHERE activity ='start of journey' AND resource LIKE '%s';
SELECT DISTINCT timestamp FROM event_log WHERE activity = 'início de viagem' AND resource LIKE '%s';
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT "activity", "resource", SUM("cost") AS "total_cost" FROM "event_log" GROUP BY "activity", "resource";
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT COUNT(*) FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem');
SELECT activity, COUNT(*) as quantidade FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem') GROUP BY activity;
SELECT COUNT(*) FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem');
SELECT COUNT(*) FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem');
SELECT COUNT(*) FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem');
SELECT COUNT(*) FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem');
SELECT activity, COUNT(*) as ocorrencias FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem') GROUP BY activity;
SELECT activity, COUNT(*) as quantidade FROM event_log WHERE activity IN ('início da viagem', 'fim da viagem') GROUP BY activity;
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'START_%' OR activity LIKE 'END_%';
SELECT COUNT(*) AS quantidade FROM event_log WHERE activity LIKE 'INICIO_VIAGEM' OR activity LIKE 'FIM_VIAGEM';
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3 ORDER BY count DESC;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3 ORDER BY count DESC;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3 ORDER BY count DESC;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3 ORDER BY count DESC;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3 ORDER BY count DESC;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY id DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY id DESC LIMIT 1;
SELECT "activity", "resource", "idcase" FROM "event_log" ORDER BY "timestamp" DESC LIMIT 1;
SELECT "activity", "resource" FROM "event_log" WHERE "idcase" LIKE '%declarações de viagem%' ORDER BY "timestamp" DESC LIMIT 1;
SELECT el1.activity, el1.resource, el1.timestamp, el1.cost, el1.idcase FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.timestamp > el2.timestamp WHERE el1.activity!= 'fim da viagem' AND el2.activity = 'fim da viagem';
SELECT el1.activity, el1.timestamp, el1.resource, el1.cost, el1.idcase, u.username FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el2.activity = 'fim da viagem' JOIN users u ON el1.id = u.id WHERE el1.timestamp > el2.timestamp ORDER BY el1.timestamp;
SELECT id FROM event_log WHERE activity = 'fim da viagem' ORDER BY timestamp ASC;
SELECT el1.* FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.activity = 'fim da viagem' AND el1.id < el2.id ORDER BY el1.timestamp;
SELECT el1.* FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.activity = 'fim da viagem' AND el1.id < el2.id ORDER BY el1.timestamp;
SELECT el.id, el.activity, el.timestamp, el.resource, el.cost, el.idcase, u.name AS responsible_name FROM event_log el JOIN cases c ON el.idcase = c.id JOIN users u ON c.responsable_id = u.id WHERE el.activity = 'fim da viagem' AND el.timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'fim da viagem' ) ORDER BY el.timestamp;
SELECT el1.activity, el1.timestamp, el1.resource, el1.cost, el1.idcase, u.username FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el2.activity = 'fim da viagem' JOIN users u ON el1.id = u.id WHERE el1.timestamp > el2.timestamp ORDER BY el1.timestamp;
SELECT id FROM event_log WHERE activity = 'fim da viagem' ORDER BY timestamp DESC LIMIT 1;
SELECT el1.* FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.timestamp > el2.timestamp WHERE el2.activity = 'fim da viagem' ORDER BY el1.timestamp;
SELECT el1.activity, el1.resource, el1.timestamp, el1.cost, el1.idcase, u.username FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.timestamp < el2.timestamp JOIN users u ON el1.id = u.id WHERE el2.activity = 'fim da viagem' ORDER BY el1.timestamp;
SELECT el1.activity, el1.resource, el1.idcase, el2.activity AS responsavel FROM event_log el1 JOIN event_log el2 ON el1.id < el2.id AND el1.activity = 'fim da viagem' WHERE el2.timestamp > el1.timestamp ORDER BY el1.timestamp;
SELECT el2.activity, el2.resource, el2.idcase, el2.timestamp FROM event_log el2 WHERE el2.id > ( SELECT MAX(id) FROM event_log el1 WHERE el1.activity = 'fim da viagem' ) ORDER BY el2.timestamp;
SELECT el.activity, el.resource, el.timestamp, el.cost, el.idcase FROM event_log el WHERE el.id > 123 ORDER BY el.timestamp;
SELECT el2.* FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.activity = 'fim da viagem' WHERE el1.timestamp < el2.timestamp ORDER BY el2.timestamp;
SELECT el2.* FROM event_log el2 JOIN event_log el1 ON el2.idcase = el1.idcase WHERE el1.activity = 'fim da viagem' AND el2.timestamp > el1.timestamp ORDER BY el2.timestamp;
SELECT el.activity, el.timestamp, el.resource, el.cost, c.case_name, c.case_responsible FROM event_log el JOIN case c ON el.idcase = c.case_id WHERE el.activity!= 'Fim de Viagem' AND el.id IN ( SELECT id FROM event_log WHERE activity = 'Fim de Viagem' ) ORDER BY el.timestamp;
Para responder essa pergunta, precisamos fazer uma consulta que combine as informações da tabela "event_log" com as informações de viagem. Suponho que você tem uma tabela "trips" com as seguintes colunas: CREATE TABLE "trips" ( "id" int, "start_timestamp" DATETIME, "end_timestamp" DATETIME, "employee_id" int, PRIMARY KEY("id") ) Agora, podemos fazer a consulta: SELECT e.activity, e.timestamp, e.resource, e.cost, e.idcase, t.employee_id FROM event_log e JOIN trips t ON e.timestamp > t.end_timestamp WHERE e.activity!='start' AND e.activity!= 'end' Essa consulta seleciona todas as linhas da tabela "event_log" que ocorreram após o registro de finalização da viagem (e.timestamp > t.end_timestamp) e que não são registros de início ou fim da viagem (e.activity!='start' AND e.activity!= 'end'). Além disso, ela também seleciona o ID do funcionário que executou essas ações (t.employee_id). Lembre-se de que essa é uma suposição e que você pode precisar adaptar a consulta para atender às suas necessidades específicas.
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY resource
SELECT COUNT(*) AS quantidade_processamentos FROM event_log WHERE activity = 'processar_viagem' AND idcase IN ( SELECT idcase FROM event_log WHERE activity ='registrar_fim_viagem' ) AND id NOT IN ( SELECT id FROM event_log WHERE activity ='registrar_fim_viagem' )
SELECT "resource" AS funcionario, COUNT(*) AS num_ações FROM "event_log" WHERE "activity" NOT LIKE '%checkout%' GROUP BY "resource"
SELECT DISTINCT idcase, MIN(timestamp) AS first_event_timestamp FROM event_log GROUP BY idcase ORDER BY first_event_timestamp DESC;
SELECT idcase, MIN(timestamp) AS start_date FROM event_log GROUP BY idcase ORDER BY start_date DESC;
SELECT DISTINCT idcase FROM event_log ORDER BY timestamp DESC;
SELECT idcase, MIN(timestamp) AS start_date FROM event_log GROUP BY idcase ORDER BY start_date DESC;
SELECT DISTINCT idcase AS "Declaração de Viagem", (SELECT timestamp FROM event_log WHERE idcase = e.idcase ORDER BY timestamp LIMIT 1) AS "Data da Primeira Ação" FROM event_log e WHERE activity LIKE '%declaração de viagem%' ORDER BY "Data da Primeira Ação";
SELECT id FROM event_log WHERE activity = 'declaração de viagem' ORDER BY timestamp ASC;
SELECT COUNT(*) FROM event_log WHERE activity ='requisição de pagamento';
SELECT COUNT(*) FROM event_log WHERE activity ='requisição de pagamento';
SELECT COUNT(*) FROM event_log WHERE activity ='requisição de pagamento';
SELECT COUNT(*) FROM event_log WHERE activity ='requisição de pagamento';
SELECT COUNT(*) FROM event_log WHERE activity ='requisição de pagamento';
SELECT COUNT(*) FROM "event_log" WHERE "activity" LIKE '%payment%';
SELECT COUNT(*) FROM event_log WHERE activity = 'payment_request';
SELECT idcase FROM event_log WHERE activity = 'declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM event_log WHERE activity = 'declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM event_log WHERE activity = 'declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT resource FROM event_log WHERE activity = 'aprovacao final' AND idcase LIKE '%diretor%' ORDER BY timestamp DESC LIMIT 1;
SELECT el.* FROM event_log el JOIN aprovacoes a ON el.id = a.id_event_log WHERE a.id_diretor = (SELECT id FROM diretores ORDER BY id DESC LIMIT 1) ORDER BY el.timestamp DESC LIMIT 1;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource ORDER BY count DESC;
SELECT resource, COUNT(*) as quantidade FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource ORDER BY quantidade DESC LIMIT 1;
SELECT resource, COUNT(*) as quantidade FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource ORDER BY quantidade DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração aprovada pela administração' GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT "resource" AS "Administrador", COUNT(*) AS "Número de aprovações" FROM "event_log" WHERE "activity" = 'APROVAÇÃO' AND "idcase" LIKE '%DECLARAÇÃO%' GROUP BY "resource" ORDER BY "Número de aprovações" DESC;
SELECT resource, COUNT(*) as num_approvals FROM event_log WHERE activity = 'aprova' GROUP BY resource ORDER BY num_approvals DESC;
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE activity = (SELECT MIN(activity) FROM event_log) GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE id = (SELECT MIN(id) FROM event_log) GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = (SELECT MIN(activity) FROM event_log WHERE idcase = event_log.idcase) GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE id = (SELECT MIN(id) FROM event_log) GROUP BY resource
SELECT resource, COUNT(*) AS first_occurrence FROM event_log WHERE id = (SELECT MIN(id) FROM event_log WHERE idcase = event_log.idcase) GROUP BY resource
SELECT funcionario, COUNT(*) as num_declaracoes FROM event_log WHERE activity = 'primeira ação' GROUP BY funcionario
SELECT resource, COUNT(*) AS num_processamentos FROM event_log WHERE activity = 'processamento de declaração' GROUP BY resource
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(*) FROM event_log WHERE activity COLLATE NOCASE LIKE '%aprovada%';
SELECT COUNT(*) FROM event_log WHERE activity COLLATE NOCASE LIKE '%aprovada%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%aprovada%';
Para responder essa pergunta, precisamos analisar as informações presentes na tabela "event_log". No entanto, não há nenhuma coluna que indique se uma declaração foi aprovada ou não. Portanto, não é possível responder essa pergunta com base nos dados fornecidos. Se você tiver mais informações sobre a tabela "event_log" ou se puder fornecer mais contexto sobre o que é uma "declaração" e como é relacionada às atividades registradas no log, posso ajudar a criar uma consulta para responder essa pergunta.
Para responder à pergunta, precisamos analisar o esquema de banco de dados e identificar as colunas que podem estar relacionadas à aprovação. A coluna "activity" parece ser a mais provável candidata para conter informações sobre as ações de aprovação. No entanto, não há informações suficientes para determinar exatamente quantas declarações (ou "idcase") as ações de aprovação aparecem. Para obter a resposta, precisaríamos de mais informações sobre o conteúdo da coluna "activity" e como as ações de aprovação são registradas no banco de dados. Se a coluna "activity" contiver strings como "aprovar", "reprovar", "aprovado", "reprovado", etc., podemos supor que as ações de aprovação aparecem em uma declaração única (ou seja, um valor único na coluna "idcase"). No entanto, se a coluna "activity" contiver strings mais complexas, como "aprovar solicitação de empréstimo", "reprovar solicitação de empréstimo", etc., pode ser que as ações de aprovação apareçam em várias declarações diferentes. Sem mais informações, não podemos fornecer uma resposta mais específica.
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_rejeitadas FROM event_log WHERE activity ='rejeitada' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_casos FROM event_log WHERE activity ='rejeitada' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_instancias FROM event_log WHERE activity ='rejeitada' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity ='rejeitada' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS dia, COUNT(*) AS quantidade_rejeitadas FROM event_log WHERE activity ='rejeitada' GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS dia, COUNT(*) AS quantidade_rejeitadas FROM event_log WHERE activity ='rejeitada' GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS data, COUNT(*) AS num_rejeitadas FROM event_log WHERE activity LIKE '%rejeitada%' -- ajuste essa condição para incluir apenas as declarações rejeitadas GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_rejeicoes FROM event_log WHERE activity LIKE '%rejeição%' -- ajuste para a sua linguagem de rejeição GROUP BY DATE(timestamp) ORDER BY data;
SELECT idcase, COUNT(*) as num_events, MAX(timestamp) as max_timestamp, MIN(timestamp) as min_timestamp FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_time FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp))) AS total_duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS total_executions, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_duration FROM event_log GROUP BY idcase ORDER BY total_executions DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase ORDER BY duration DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp))) AS total_duration FROM event_log GROUP BY idcase ORDER BY num_events DESC;
SELECT activity, COUNT(*) AS num_actions, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_processing_time FROM event_log GROUP BY activity ORDER BY num_actions DESC LIMIT 5;
WITH processed_time AS ( SELECT activity, timestamp, EXTRACT(EPOCH FROM timestamp - LAG(timestamp) OVER (ORDER BY timestamp)) AS processing_time FROM event_log ) SELECT activity, AVG(processing_time) AS average_processing_time FROM processed_time GROUP BY activity ORDER BY average_processing_time DESC LIMIT 5;
SELECT idcase, COUNT(*) AS quantidade_eventos, MAX(timestamp) - MIN(timestamp) AS duracao FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY quantidade_eventos DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp))) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY num_events DESC LIMIT 5;
SELECT el.idcase AS "Instance", COUNT(*) AS "Number of executions", SUM(el.cost) AS "Total cost", MAX(el.timestamp) AS "Last execution time", MIN(el.timestamp) AS "First execution time" FROM event_log el GROUP BY el.idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_time FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) AS num_events, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log WHERE activity LIKE '%declaração%' AND COUNT(*) >= 20 GROUP BY idcase ORDER BY duration DESC LIMIT 5;
SELECT activity, idcase, COUNT(*) AS num_actions, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_processing_time FROM event_log GROUP BY activity, idcase HAVING COUNT(*) >= 20 ORDER BY total_processing_time DESC LIMIT 5;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' AND idcase IN ( SELECT idcase FROM event_log ORDER BY timestamp DESC LIMIT 10 ) ORDER BY timestamp DESC;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM "event_log" WHERE "idcase" NOT IN ( SELECT "idcase" FROM "event_log" WHERE "activity" ='requisição de pagamento' ) ORDER BY "id" DESC LIMIT 10;
SELECT e1.idcase FROM event_log e1 WHERE NOT EXISTS ( SELECT 1 FROM event_log e2 WHERE e2.idcase = e1.idcase AND e2.activity ='requisição de pagamento' ) ORDER BY e1.timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity!='requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE activity LIKE '%processamento%' AND id NOT IN ( SELECT id FROM event_log WHERE activity LIKE '%pagamento%' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10 ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource HAVING COUNT(*) <= 10
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT DISTINCT "idcase" FROM "event_log" GROUP BY "idcase" HAVING COUNT("id") <= 10;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
SELECT idcase, COUNT(*) AS num_actions FROM event_log GROUP BY idcase HAVING COUNT(*) >= 10;
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity HAVING COUNT(*) <= 10;
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" = 'pagamento efetuado' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" = 'pagamento efetuado' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" = 'pagamento efetuado' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" = 'pagamento efetuado' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") AS media_custo FROM "event_log" WHERE "activity" = 'pagamento efetuado' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "timestamp" < '2018-01-01' AND "activity" = 'pagamento efetuado';
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" = 'pagamento efetuado' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" = 'pagamento efetuado' AND "timestamp" < '2018-01-01 00:00:00';
SELECT AVG("cost") AS "custo_medio" FROM "event_log" WHERE "activity" LIKE '%pagamento%' AND "timestamp" < '2018-01-01 00:00:00';
SELECT idcase, COUNT(*) AS quantidade_atividades FROM event_log WHERE activity = 'permissão' GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_atividades FROM event_log WHERE activity = 'permissão' GROUP BY idcase;
SELECT COUNT(*) as quantidade_execucoes FROM event_log WHERE activity = 'permissão';
SELECT idcase, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity = 'permissão' GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity = 'permissão' GROUP BY idcase;
SELECT COUNT(*) AS quantidade_registro FROM event_log WHERE activity = 'permissão';
SELECT idcase, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity = 'permissão' GROUP BY idcase;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity = 'permissão' GROUP BY idcase;
SELECT d.declaration, COUNT(el.id) AS permission_count FROM event_log el JOIN declarations d ON el.idcase = d.id WHERE el.activity = 'permission' GROUP BY d.declaration
SELECT idcase, COUNT(*) AS permissao_count FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase;
SELECT COUNT(*) AS quantidade_casos, resource FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT COUNT(*) AS quantidade_casos, resource FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT resource, COUNT(*) AS quantidade_casos FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT COUNT(DISTINCT "resource") AS "quantidade_de_casos" FROM "event_log" WHERE "activity" = 'declaração rejeitada pelo supervisor';
SELECT resource, COUNT(*) as quantidade_casos FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' GROUP BY resource;
SELECT supervisor, COUNT(*) AS num_rejeicoes FROM event_log WHERE activity ='rejeicao' AND "resource" LIKE '%supervisor%' GROUP BY supervisor
SELECT supervisor, COUNT(*) as num_rejected FROM event_log WHERE activity = 'declaração rejeitada' GROUP BY supervisor;
SELECT activity, COUNT(idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(*) AS quantidade_casos FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as quantidade_casos FROM event_log GROUP BY activity ORDER BY quantidade_casos DESC;
SELECT activity, COUNT(*) as quantidade FROM event_log GROUP BY activity ORDER BY quantidade DESC;
SELECT activity, COUNT(*) as num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(*) AS quantidade_declaracoes FROM event_log GROUP BY activity ORDER BY quantidade_declaracoes DESC;
SELECT activity, COUNT(*) AS num_declarations FROM event_log GROUP BY activity
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' ) ORDER BY timestamp LIMIT 1;
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' ) ORDER BY timestamp
SELECT * FROM event_log WHERE activity LIKE 'R%' AND id > ( SELECT MAX(id) FROM event_log WHERE activity LIKE 'D%' ) ORDER BY timestamp LIMIT 1;
SELECT * FROM event_log WHERE activity LIKE 'R%' AND id NOT IN ( SELECT id FROM event_log WHERE activity LIKE 'D%' ) ORDER BY timestamp;
SELECT * FROM event_log WHERE activity LIKE 'R%' AND id IN ( SELECT id FROM event_log WHERE activity LIKE 'D%' ORDER BY timestamp DESC LIMIT 1 ) ORDER BY timestamp;
SELECT * FROM event_log WHERE timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' ) AND activity LIKE 'R%';
SELECT activity FROM event_log WHERE activity LIKE 'R%' AND id IN ( SELECT id FROM event_log WHERE activity LIKE 'D%' ORDER BY timestamp LIMIT 1 ) ORDER BY timestamp;
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT "resource", "activity", COUNT(*) AS "quantidade_execucoes" FROM "event_log" GROUP BY "resource", "activity" ORDER BY "resource", "activity";
SELECT "resource", "activity", COUNT(*) AS "quantidade_execucoes" FROM "event_log" GROUP BY "resource", "activity" ORDER BY "resource", "activity";
SELECT "resource", "activity", COUNT(*) AS "count" FROM "event_log" GROUP BY "resource", "activity" ORDER BY "resource", "activity";
SELECT "resource", "activity", COUNT(*) AS "quantidade_execucoes" FROM "event_log" GROUP BY "resource", "activity" ORDER BY "resource", "activity";
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource ORDER BY activity, resource;
SELECT el.idcase, el.activity, COUNT(*) AS "quantidade_execucoes" FROM event_log el WHERE el.activity LIKE '%processamento de declaração%' GROUP BY el.idcase, el.activity ORDER BY el.idcase, el.activity;
SELECT "resource", "activity", COUNT(*) AS "quantidade_execucoes" FROM "event_log" GROUP BY "resource", "activity" ORDER BY "resource", "activity";
SELECT DISTINCT activity FROM event_log WHERE timestamp >= '2018-01-01' AND timestamp < '2018-06-30';
SELECT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-06-30 23:59:59';
SELECT * FROM "event_log" WHERE timestamp >= '2018-01-01' AND timestamp < '2018-06-30';
SELECT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT activity FROM event_log WHERE strftime('%Y-%m', timestamp) BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity FROM event_log WHERE timestamp >= DATE_TRUNC('quarter', '2018-01-01') AND timestamp < DATE_TRUNC('quarter', '2018-07-01');
SELECT * FROM "event_log" WHERE timestamp BETWEEN '2018-01-01 00:00:00' AND '2018-06-30 23:59:59' ORDER BY timestamp;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE resource = 'Wayne' ORDER BY timestamp;
SELECT DISTINCT id FROM event_log WHERE resource = 'Wayne' ORDER BY id;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT * FROM event_log WHERE resource = 'Wayne' ORDER BY timestamp;
Para responder essa pergunta, precisamos analisar o esquema de banco de dados e verificar se há alguma coluna que indique o funcionário que trabalhou em uma determinada declaração. No entanto, não há nenhuma coluna que indique isso no esquema fornecido. Portanto, não é possível responder essa pergunta com base no esquema fornecido. Seria necessário adicionar mais informações ao esquema, como uma coluna que indique o funcionário responsável por uma determinada atividade. Se você tiver mais informações sobre o esquema, como uma tabela de funcionários com um ID e um nome, por exemplo, poderíamos criar uma consulta para relacionar as atividades com os funcionários.
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%Wayne%';
SELECT activity, COUNT(*) AS quantidade_casos FROM event_log WHERE timestamp >= '2018-03-12 00:00:00' AND timestamp < '2018-03-13 00:00:00' AND idcase IS NOT NULL GROUP BY activity
SELECT activity, COUNT(*) AS num_instances FROM event_log WHERE DATE(timestamp) = '2018-03-12' AND activity IS NOT NULL GROUP BY activity ORDER BY num_instances DESC;
SELECT activity, COUNT(*) AS quantidade FROM event_log WHERE idcase IS NOT NULL AND timestamp BETWEEN '2018-03-02 00:00:00' AND '2018-03-02 23:59:59' GROUP BY activity ORDER BY quantidade DESC;
SELECT activity, COUNT(*) AS quantidade_casos FROM event_log WHERE timestamp <= '2018-03-02 23:59:59' AND idcase IS NOT NULL AND activity IS NOT NULL GROUP BY activity ORDER BY quantidade_casos DESC;
SELECT activity, COUNT(*) AS quantidade_casos FROM event_log WHERE timestamp <= '2018-03-02 23:59:59' AND idcase IN ( SELECT idcase FROM event_log WHERE activity = 'FINALIZADO' GROUP BY idcase HAVING MAX(timestamp) <= '2018-03-02 23:59:59' ) GROUP BY activity ORDER BY quantidade_casos DESC;
SELECT activity, COUNT(*) AS quantidade_casos FROM event_log WHERE timestamp BETWEEN '2018-03-02 00:00:00' AND '2018-03-02 23:59:59' AND idcase IS NOT NULL GROUP BY activity ORDER BY quantidade_casos DESC;
SELECT activity, COUNT(*) AS num_declaracoes, SUM(CASE WHEN activity LIKE '%processada%' THEN 1 ELSE 0 END) AS num_processadas, SUM(CASE WHEN activity LIKE '%finalizada%' THEN 1 ELSE 0 END) AS num_finalizadas FROM event_log WHERE timestamp >= '2018-03-02 00:00:00' AND timestamp < '2018-03-03 00:00:00' GROUP BY activity;
SELECT activity, COUNT(CASE WHEN activity LIKE 'EXECUTED%' THEN 1 ELSE NULL END) AS executed, COUNT(CASE WHEN activity LIKE 'FINALIZED%' THEN 1 ELSE NULL END) AS finalized FROM event_log WHERE timestamp >= '2018-03-02 00:00:00' AND timestamp < '2018-03-03 00:00:00' GROUP BY activity
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%' AND id = (SELECT MIN(id) FROM event_log);
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%' AND id = 1;
SELECT COUNT(DISTINCT id) FROM event_log WHERE activity LIKE 'permissão%' ORDER BY COUNT(DISTINCT id) DESC;
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%processamento de declaração de viagem%' AND idcase IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%permissao%' AND idcase IS NOT NULL;
SELECT idcase FROM "event_log" WHERE idcase NOT IN ( SELECT idcase FROM "event_log" WHERE activity IN ('requisição de pagamento', 'pagamento efetuado') )
SELECT * FROM "event_log" WHERE "idcase" NOT IN ( SELECT "idcase" FROM "event_log" WHERE "activity" IN ('requisição de pagamento', 'pagamento efetuado') )
SELECT * FROM "event_log" WHERE "idcase" NOT IN ( SELECT "idcase" FROM "event_log" WHERE "activity" IN ('requisição de pagamento', 'pagamento efetuado') )
SELECT * FROM "event_log" WHERE "activity" NOT IN ('requisição de pagamento', 'pagamento efetuado') GROUP BY "idcase" HAVING COUNT(DISTINCT "activity") = (SELECT COUNT(*) FROM "event_log" WHERE "idcase" IN (SELECT "idcase" FROM "event_log" WHERE "activity" IN ('requisição de pagamento', 'pagamento efetuado')))
SELECT DISTINCT "idcase" FROM "event_log" WHERE "activity" NOT IN ('requisição de pagamento', 'pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('requisição de pagamento', 'pagamento efetuado') OR activity IS NULL;
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('requisição de pagamento', 'pagamento efetuado') AND idcase IS NOT NULL;
SELECT pi.id, pi.name FROM process_instances pi LEFT JOIN event_log el ON el.idcase = pi.id WHERE el.id IS NULL AND pi.name NOT IN ( SELECT el2.resource FROM event_log el2 WHERE el2.activity IN ('requisição de pagamento', 'pagamento efetuado') )
SELECT idcase FROM event_log WHERE activity NOT IN ('requisição de pagamento', 'pagamento efetuado');
SELECT * FROM "event_log" AS el WHERE NOT EXISTS ( SELECT 1 FROM "event_log" AS el2 WHERE el2."activity" IN ('requisição de pagamento', 'pagamento efetuado') AND el2."idcase" = el."idcase" )
SELECT COUNT(*) FROM event_log WHERE activity NOT IN ('payment', 'payment_request');
SELECT id, activity, timestamp, resource, cost, idcase FROM event_log WHERE activity IN ('request_payment', 'payment_made') AND cost > 0 AND idcase IS NOT NULL AND timestamp > (SELECT MIN(timestamp) FROM event_log WHERE activity = 'payment_made')
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp ASC, resource ASC;
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT timestamp, resource, activity FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT timestamp, resource, activity FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('início da viagem', 'declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT e.timestamp, r.name AS funcionario, e.activity FROM event_log e JOIN (SELECT DISTINCT resource AS name FROM event_log) r ON e.resource = r.name WHERE e.activity IN ('início de viagem','requisição de declaração') ORDER BY e.timestamp, r.name;
SELECT el.timestamp, el.activity, el.resource, el.cost, el.idcase, f.name FROM event_log el JOIN (SELECT DISTINCT idcase, name FROM event_log WHERE activity = 'início de viagem' OR activity ='requisição de funcionário') f ON el.idcase = f.idcase ORDER BY el.timestamp, f.name;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_registers FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS quantidade_registro FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS quantidade FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS ocorrencias FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS "Quantidade de vezes" FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS quantidade_associações FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY quantidade_associações DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT f.nome, COUNT(*) AS quantidade FROM event_log el JOIN funcionario f ON el.idcase = f.id WHERE el.activity ='salvar declaração de viagem' GROUP BY f.nome ORDER BY f.nome;
Para responder à sua pergunta, precisamos fazer uma consulta que agrupe os funcionários que salvaram declarações e conte a quantidade de vezes que cada um fez isso. No entanto, o esquema de banco de dados fornecido não inclui informações sobre funcionários, portanto, não podemos fazer essa consulta direta. Suponha que você tenha uma tabela "funcionarios" com as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) E que a tabela "event_log" tem uma coluna "idfuncionario" que referencia a tabela "funcionarios". Nesse caso, você pode fazer a seguinte consulta: SELECT f.nome, COUNT(*) as quantidade FROM event_log el JOIN funcionarios f ON el.idfuncionario = f.id WHERE el.activity ='salvar declaração' GROUP BY f.nome ORDER BY f.nome; Essa consulta junta a tabela "event_log" com a tabela "funcionarios" pela coluna "idfuncionario", filtra apenas as linhas onde a atividade é "salvar declaração", agrupa os resultados pela coluna "nome" e conta a quantidade de vezes que cada funcionário salvou uma declaração. Por fim, ordena a resposta por nome de funcionário. Se você não tiver essa informação, você precisará fornecer mais informações sobre o esquema de banco de dados para que possamos ajudá-lo a encontrar uma solução alternativa.
SELECT activity, COUNT(*) AS "quantidade_de_casos" FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) AS num_cases FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as quantidade_casos FROM event_log GROUP BY activity ORDER BY quantidade_casos DESC;
SELECT activity, COUNT(*) AS instances FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_instances FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as quantidade_execucoes FROM event_log GROUP BY activity;
SELECT activity, COUNT(*) as num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as quantidade FROM event_log WHERE activity IN ('CREATE', 'UPDATE', 'DELETE', 'READ') GROUP BY activity ORDER BY quantidade DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(DISTINCT activity) AS quantidade_atividades FROM event_log GROUP BY resource
SELECT "idcase", COUNT(DISTINCT "activity") AS "number_of_actions" FROM "event_log" GROUP BY "idcase" ORDER BY "number_of_actions" DESC;
SELECT "idcase" AS funcionario, COUNT(DISTINCT "activity") AS num_actions FROM "event_log" GROUP BY "idcase"
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity IN ('fim da viagem', 'pagamento efetuado') GROUP BY resource;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity IN ('fim da viagem', 'pagamento efetuado') GROUP BY idcase;
SELECT resource, COUNT(*) AS ocorrencias FROM event_log WHERE activity IN ('fim da viagem', 'pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity IN ('fim da viagem', 'pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity IN ('fim da viagem', 'pagamento efetuado') GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS quantidade_vezes FROM event_log WHERE activity IN ('fim da viagem', 'pagamento efetuado') GROUP BY resource ORDER BY quantidade_vezes DESC;
SELECT COUNT(*) AS "quantidade_vezes", "idcase" AS "idcase" FROM "event_log" WHERE "activity" IN ('fim_viagem', 'efetuar_pagamento') GROUP BY "idcase"
SELECT e.idcase AS funcionario, COUNT(*) AS quantidade_atividades FROM event_log e WHERE e.activity IN ( SELECT activity FROM event_log WHERE activity LIKE '%finalizar viagem%' OR activity LIKE '%efetuar pagamento%' ) GROUP BY e.idcase
SELECT resource, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' AND id = (SELECT MIN(id) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador') GROUP BY resource
SELECT resource, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' GROUP BY resource HAVING COUNT(*) = 1;
SELECT resource, COUNT(*) AS num_instances FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' GROUP BY resource HAVING COUNT(*) = 1;
SELECT resource, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' GROUP BY resource HAVING COUNT(*) = 1 ORDER BY resource;
SELECT resource, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador' GROUP BY resource ORDER BY quantidade_ocorrencias DESC;
SELECT reviewer, COUNT(CASE WHEN activity = 'REVIEW' AND decision = 'REJECTED' THEN 1 ELSE NULL END) AS rejected_cases FROM event_log JOIN cases ON event_log.idcase = cases.idcase WHERE activity = 'REVIEW' AND idcase IN ( SELECT idcase FROM cases WHERE reviewer = cases.reviewer ) GROUP BY reviewer
SELECT e.idcase, COUNT(*) AS num_declarações FROM event_log e WHERE e.activity = 'REJEITAR' AND e.resource LIKE '%DECLARAÇÃO DE VIAGEM%' AND e.idcase NOT LIKE '%APROVAR%' AND e.idcase NOT LIKE '%REJEITAR%' AND e.idcase NOT LIKE '%CANCELAR%' AND e.idcase NOT LIKE '%FINALIZAR%' GROUP BY e.idcase
SELECT idcase, COUNT(*) AS quantidade_ocorrencias FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase HAVING MAX(CASE WHEN activity = 'fim da viagem' THEN id ELSE NULL END) IS NOT NULL;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase HAVING MAX(CASE WHEN activity = 'fim da viagem' THEN 1 ELSE NULL END) IS NOT NULL;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity = 'fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase HAVING COUNT(*) = (SELECT MAX(qtde) FROM (SELECT idcase, COUNT(*) AS qtde FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase) AS subquery)
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'fim da viagem' GROUP BY idcase HAVING MAX(CASE WHEN activity = 'fim da viagem' THEN 1 ELSE NULL END) IS NOT NULL;
SELECT idcase, COUNT(*) AS num_actions FROM event_log WHERE activity = 'FIM DA VIAGEM' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_actions FROM event_log WHERE idcase IS NOT NULL GROUP BY idcase ORDER BY num_actions DESC;
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01' AND timestamp <= '2018-06-30';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01' AND timestamp <= '2018-06-30';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01' AND timestamp <= '2018-06-30';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%Thomas%' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT * FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01' AND timestamp < '2018-06-30';
SELECT DISTINCT activity FROM event_log WHERE timestamp >= '2018-01-01' AND timestamp < '2018-06-30' AND activity LIKE '%Thomas%' OR resource LIKE '%Thomas%';
SELECT DISTINCT activity FROM event_log WHERE EXTRACT(MONTH FROM timestamp) BETWEEN 1 AND 6 AND EXTRACT(YEAR FROM timestamp) = 2018 AND "resource" LIKE '%Thomas%';
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity = 'declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity LIKE '%rejeição%' AND resource LIKE '%declaração%' OR resource LIKE '%viagem%' ORDER BY timestamp ASC;
SELECT * FROM event_log WHERE activity = 'REJECTED' ORDER BY timestamp;
SELECT * FROM event_log WHERE activity = 'início da viagem' AND strftime('%Y-%m', timestamp) < '2018-03' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'fim da viagem' )
SELECT DISTINCT "resource" FROM "event_log" WHERE "activity" = 'início da viagem' AND strftime('%Y-%m', "timestamp") < '2018-03' AND "idcase" IS NOT NULL;
SELECT * FROM event_log WHERE activity = 'início da viagem' COLLATE NOCASE AND timestamp < '2018-03-01 00:00:00';
SELECT * FROM "event_log" WHERE "activity" = 'início da viagem' AND "timestamp" < DATE('2018-03-31 23:59:59') AND "idcase" IS NOT NULL;
SELECT * FROM event_log WHERE activity = 'início da viagem' AND timestamp < '2018-04-01 00:00:00' AND idcase IS NOT NULL;
SELECT * FROM event_log WHERE activity = 'início da viagem' AND timestamp < '2018-04-01 00:00:00' AND idcase IS NOT NULL;
SELECT * FROM event_log WHERE activity = 'início da viagem' AND timestamp < '2018-03-31 23:59:59' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'fim da viagem' )
SELECT DISTINCT "resource" FROM "event_log" WHERE "activity" = 'início da viagem' AND "timestamp" < '2018-03-31 23:59:59' HAVING NOT EXISTS ( SELECT 1 FROM "event_log" WHERE "activity" = 'fim da viagem' AND "resource" = "event_log"."resource" AND "timestamp" <= '2018-03-31 23:59:59' )
SELECT * FROM event_log WHERE activity = 'início da viagem' AND timestamp < '2018-04-01 00:00:00' AND idcase IS NOT NULL;
SELECT * FROM "event_log" WHERE "activity" = 'início da viagem' AND "timestamp" < '2018-03-31 23:59:59' AND "idcase" NOT IN ( SELECT "idcase" FROM "event_log" WHERE "activity" = 'fim da viagem' AND "timestamp" <= '2018-03-31 23:59:59' )
SELECT * FROM event_log WHERE activity = 'início de viagem' AND timestamp <= '2018-03-31 23:59:59' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity LIKE '%fim de viagem%' AND timestamp <= '2018-03-31 23:59:59' )
SELECT * FROM event_log WHERE activity = 'fim da viagem' AND NOT (activity ='requisição de pagamento' OR activity = 'pagamento efetuado') AND resource!= 'idcase' -- ou seja, mais de um recurso atuou ORDER BY id;
SELECT idcase FROM event_log WHERE activity = 'fim da viagem' AND id NOT IN ( SELECT id FROM event_log WHERE activity IN ('requisição de pagamento', 'pagamento efetuado') ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT * FROM "event_log" WHERE activity = 'fim da viagem' AND NOT (activity ='requisição de pagamento' OR activity = 'pagamento efetuado') AND COUNT(DISTINCT resource) > 1 GROUP BY idcase;
SELECT idcase FROM event_log WHERE activity = 'fim da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('requisição de pagamento', 'pagamento efetuado') ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT DISTINCT e1.resource FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase AND e1.timestamp < e2.timestamp WHERE e1.activity = 'fim da viagem' AND e2.activity NOT IN ('requisição de pagamento', 'pagamento efetuado') AND e1.id!= e2.id GROUP BY e1.resource HAVING COUNT(DISTINCT e2.resource) > 1;
SELECT * FROM event_log WHERE activity IN ('fim da viagem') AND activity NOT IN ('requisição de pagamento', 'pagamento efetuado') AND EXISTS ( SELECT 1 FROM event_log AS e2 WHERE e2.id!= event_log.id AND e2.activity IN ('requisição de pagamento', 'pagamento efetuado') AND e2.resource!= event_log.resource );
SELECT DISTINCT el1.resource AS resource1, el2.resource AS resource2 FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity = 'fim da viagem' AND el2.activity NOT IN ('requisição de pagamento', 'pagamento efetuado') AND el1.id < el2.id ORDER BY el1.id;
SELECT * FROM event_log WHERE cost = 0;
SELECT * FROM event_log WHERE activity = 'END_OF_TRIP' AND (cost = 0 OR idcase IS NULL) ORDER BY timestamp;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT resource, COUNT(*) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY resource
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY total_cost DESC;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY total_cost DESC;
SELECT idcase, SUM(cost) AS total_cost, COUNT(resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY total_cost DESC;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log WHERE activity = 'declaração de viagem' GROUP BY idcase;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE 'permissão%' AND id IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 ) GROUP BY idcase ORDER BY num_activities DESC;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' AND id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 )
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) >= 2;
SELECT idcase, activity FROM event_log WHERE activity LIKE 'permissão%' AND activity!= 'permissão' GROUP BY idcase, activity HAVING COUNT(*) > 1;
SELECT idcase, activity FROM event_log WHERE activity LIKE 'permissão%' AND id IN ( SELECT id FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1 ) ORDER BY idcase, activity;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' AND id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 )
SELECT "idcase", "activity" FROM "event_log" WHERE "activity" LIKE 'permissão%' AND "id" IN ( SELECT "id" FROM "event_log" GROUP BY "idcase", "activity" HAVING COUNT("id") > 1 ) ORDER BY "idcase", "activity";
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' AND id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 );
SELECT * FROM event_log WHERE activity LIKE '%permission%' OR activity LIKE '%grant%' OR activity LIKE '%revoke%' OR activity LIKE '%alter%';
SELECT activity, COUNT(*) AS count FROM event_log GROUP BY activity HAVING COUNT(*) > 1;
SELECT id FROM event_log ORDER BY timestamp DESC LIMIT 10;
SELECT idcase, id, timestamp FROM ( SELECT idcase, id, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY timestamp;
SELECT idcase, id, timestamp FROM ( SELECT idcase, id, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY timestamp;
SELECT id FROM event_log WHERE idcase IS NOT NULL ORDER BY timestamp DESC;
SELECT id, activity, timestamp, resource, cost, idcase, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ORDER BY row_num;
SELECT id FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY timestamp DESC;
SELECT id, activity, timestamp FROM ( SELECT id, activity, timestamp, ROW_NUMBER() OVER (PARTITION BY resource ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY timestamp;
SELECT id FROM event_log ORDER BY timestamp DESC
SELECT idcase, MAX(id) AS last_event_id FROM event_log GROUP BY idcase ORDER BY last_event_id DESC;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 100;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 100 ORDER BY count DESC;
SELECT activity FROM event_log WHERE activity LIKE '%processamento de declarações%' GROUP BY activity HAVING COUNT(*) > 100;
Para resolver essa questão, você precisará criar uma tabela que relacione cada grupo de funcionários com as atividades que eles são responsáveis. Em seguida, você pode utilizar essa tabela para filtrar as atividades registradas no evento_log e contar a quantidade de casos para cada grupo. Suponha que você tenha uma tabela chamada "groups" com as seguintes colunas: CREATE TABLE "groups" ( "group_name" TEXT COLLATE NOCASE, "activities" TEXT COLLATE NOCASE ) E que essa tabela contenha os seguintes dados: INSERT INTO "groups" VALUES ('funcionário', 'atividade_funcionário'), ('supervisor', 'atividade_supervisor,atividade_funcionário'), ('administração', 'atividade_administração'), ('pré-aprovador', 'atividade_pré_aprovador'), ('responsável pelo orçamento', 'atividade_orçamento'), ('diretor', 'atividade_diretor,atividade_supervisor') Agora, você pode utilizar a seguinte consulta para contar a quantidade de casos para cada grupo: SELECT g.group_name, COUNT(*) AS quantidade_casos FROM event_log el JOIN groups g ON el.activity IN (SELECT activities FROM groups WHERE group_name = g.group_name) GROUP BY g.group_name Essa consulta junta a tabela event_log com a tabela groups, filtrando apenas as atividades que estão relacionadas com cada grupo. Em seguida, ela conta a quantidade de casos para cada grupo e retorna os resultados. Lembre-se de que essa é uma solução simplificada e pode precisar ser adaptada para atender às necessidades específicas do seu banco de dados.
Para responder essa pergunta, precisamos criar uma tabela que relacione os funcionários com seus respectivos grupos. Suponho que essa tabela seja a seguinte: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, "grupo" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, podemos criar uma query que conta o número de casos em que alguém do grupo foi acionado. Para isso, podemos utilizar a seguinte query: SELECT grupo, COUNT(*) AS num_casos FROM event_log JOIN funcionarios ON event_log.idcase = funcionarios.id GROUP BY grupo Essa query junta a tabela "event_log" com a tabela "funcionarios" utilizando a coluna "idcase" como chave de ligação. Em seguida, agrupa os resultados pela coluna "grupo" e conta o número de casos em que alguém do grupo foi acionado utilizando a função COUNT(*). A saída da query será uma tabela com as seguintes colunas: * grupo: o nome do grupo de funcionários * num_casos: o número de casos em que alguém do grupo foi acionado Exemplo de saída: | grupo | num_casos | |--------------|-----------| | funcionário | 10 | | supervisor | 20 | | administração| 5 | | pré-aprovador| 3 | | responsável pelo orçamento | 2 | | supervisor | 15 | | diretor | 1 | Lembre-se de que essa é apenas uma suposição e que a tabela "funcionarios" pode ter um esquema diferente na sua base de dados real.
Para responder essa pergunta, você precisará criar uma tabela que relacione cada grupo de funcionários com as atividades associadas. Suponha que você tenha uma tabela "groups" com as seguintes colunas: CREATE TABLE "groups" ( "group_name" TEXT COLLATE NOCASE, "group_description" TEXT COLLATE NOCASE ) E que você tenha preenchido essa tabela com os seguintes dados: INSERT INTO "groups" VALUES ('funcionário', 'Funcionário'), ('supervisor', 'Supervisor'), ('administração', 'Administração'), ('pré-aprovador', 'Pré-aprovador'), ('responsável pelo orçamento', 'Responsável pelo orçamento'), ('diretor', 'Diretor') Agora, você pode criar uma tabela que relacione cada grupo de funcionários com as atividades associadas. Suponha que você tenha uma tabela "group_activities" com as seguintes colunas: CREATE TABLE "group_activities" ( "group_name" TEXT COLLATE NOCASE, "activity" TEXT COLLATE NOCASE ) E que você tenha preenchido essa tabela com os seguintes dados: INSERT INTO "group_activities" VALUES ('funcionário', 'atividade1'), ('funcionário', 'atividade2'), ('supervisor', 'atividade3'), ('administração', 'atividade4'), ('pré-aprovador', 'atividade5'), ('responsável pelo orçamento', 'atividade6'), ('diretor', 'atividade7'), ('funcionário', 'atividade8'), ('supervisor', 'atividade9'), ('administração', 'atividade10') Agora, você pode usar a seguinte consulta para contar a quantidade de casos nos quais uma atividade associada a cada grupo foi executada: SELECT g.group_name, COUNT(e.id) AS "quantidade_de_casos" FROM "event_log" e INNER JOIN "group_activities" ga ON e.activity = ga.activity INNER JOIN "groups" g ON ga.group_name = g.group_name GROUP BY g.group_name ORDER BY g.group_name; Essa consulta irá contar a quantidade de casos nos quais uma atividade associada a cada grupo foi executada e ordenar os resultados por grupo.
SELECT CASE WHEN activity LIKE '%funcionário%' THEN 'Funcionário' WHEN activity LIKE '%supervisor%' THEN 'Supervisor' WHEN activity LIKE '%administração%' THEN 'Administração' WHEN activity LIKE '%pré-aprovador%' THEN 'Pré-aprovador' WHEN activity LIKE '%responsável pelo orçamento%' THEN 'Responsável pelo orçamento' WHEN activity LIKE '%diretor%' THEN 'Diretor' END AS grupo, COUNT(*) AS quantidade_casos FROM event_log GROUP BY grupo
Para resolver essa questão, você precisará criar uma tabela de mapeamento entre as atividades e os grupos de funcionários. Suponha que você tenha uma tabela chamada "groups" com as seguintes colunas: CREATE TABLE "groups" ( "group_name" TEXT COLLATE NOCASE, "group_description" TEXT COLLATE NOCASE ) E que você tenha preenchido essa tabela com os seguintes dados: INSERT INTO "groups" VALUES ('funcionario', 'Funcionário'), ('supervisor', 'Supervisor'), ('administracao', 'Administração'), ('pre-aprovador', 'Pré-aprovador'), ('responsavel_orcamento', 'Responsável pelo orçamento'), ('diretor', 'Diretor'); Agora, você pode criar uma tabela de mapeamento entre as atividades e os grupos de funcionários. Suponha que você tenha uma tabela chamada "activity_groups" com as seguintes colunas: CREATE TABLE "activity_groups" ( "activity" TEXT COLLATE NOCASE, "group_name" TEXT COLLATE NOCASE ) E que você tenha preenchido essa tabela com os seguintes dados: INSERT INTO "activity_groups" VALUES ('activity_funcionario', 'funcionario'), ('activity_supervisor','supervisor'), ('activity_administracao', 'administracao'), ('activity_pre-aprovador', 'pre-aprovador'), ('activity_responsavel_orcamento','responsavel_orcamento'), ('activity_diretor', 'diretor'); Agora, você pode usar a seguinte consulta para obter a quantidade de declarações nas quais uma atividade de responsabilidade do grupo foi registrada: SELECT g.group_name, COUNT(el.id) AS count FROM "event_log" el JOIN "activity_groups" ag ON el.activity = ag.activity JOIN "groups" g ON ag.group_name = g.group_name GROUP BY g.group_name ORDER BY g.group_name; Essa consulta junta as tabelas "event_log", "activity_groups" e "groups", e then agrupa os resultados por grupo de funcionários e conta a quantidade de declarações para cada grupo.
SELECT resource, activity, COUNT(*) AS frequency, GROUPING SETS (resource, (resource, activity)) AS grouping_sets FROM event_log GROUP BY GROUPING SETS (resource, (resource, activity)) ORDER BY frequency DESC, grouping_sets;
SELECT group_concat(DISTINCT activity ORDER BY activity SEPARATOR ', ') AS grupo, COUNT(*) AS quantidade_execucoes FROM event_log GROUP BY CASE WHEN resource LIKE '%funcionário%' THEN 'Funcionário' WHEN resource LIKE '%supervisor%' THEN 'Supervisor' WHEN resource LIKE '%administração%' THEN 'Administração' WHEN resource LIKE '%pré-aprovador%' THEN 'Pré-aprovador' WHEN resource LIKE '%responsável pelo orçamento%' THEN 'Responsável pelo Orçamento' WHEN resource LIKE '%diretor%' THEN 'Diretor' END ORDER BY quantidade_execucoes DESC;
SELECT SUBSTRING(activity, INSTR(activity, '(') + 1, INSTR(activity, ')') - INSTR(activity, '(') - 1) AS cargo, COUNT(*) AS quantidade FROM event_log WHERE activity REGEXP '^[^()]*\(' -- filtro para apenas ações que contenham um parênteses GROUP BY cargo ORDER BY quantidade DESC;
SELECT * FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Finalização da viagem' ) AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'Finalização da viagem' )
SELECT idcase FROM event_log WHERE activity!= 'FINALIZA_VIAGEM' AND id IN ( SELECT id FROM event_log WHERE activity = 'FINALIZA_VIAGEM' ORDER BY timestamp DESC LIMIT 1 ) ORDER BY idcase;
SELECT * FROM "event_log" WHERE "activity" = 'FINALIZAÇÃO_VIAGEM' ORDER BY "timestamp" DESC;
SELECT * FROM event_log WHERE idcase = '123' AND timestamp < (SELECT MAX(timestamp) FROM event_log WHERE idcase = '123')
SELECT DISTINCT idcase FROM event_log WHERE idcase > idcase_end_trip ORDER BY idcase;
SELECT DISTINCT resource FROM event_log WHERE activity IN ('checkin', 'checkout', 'end_trip', 'finish_trip') ORDER BY resource;
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(*) FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(*) FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(*) FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(*) FROM event_log WHERE activity = 'envio de lembrete';
SELECT DISTINCT resource FROM event_log WHERE timestamp >= '2018-03-31 00:00:00' AND timestamp < '2018-04-01 00:00:00' AND activity!= 'WORKING';
SELECT DISTINCT resource FROM "event_log" WHERE "timestamp" >= '2018-03-31 00:00:00' AND "timestamp" < '2018-04-01 00:00:00' EXCEPT SELECT resource FROM "event_log" GROUP BY resource HAVING COUNT(*) = 0;
SELECT DISTINCT resource FROM event_log WHERE timestamp NOT LIKE '%2018-03-31%' AND resource NOT IN ( SELECT resource FROM event_log WHERE timestamp LIKE '%2018-03-31%' )
SELECT DISTINCT resource FROM event_log WHERE timestamp BETWEEN '2018-03-31 00:00:00' AND '2018-03-31 23:59:59' AND cost = 0;
Para responder essa pergunta, precisamos fazer uma consulta que combine as informações da tabela "event_log" com outras informações do banco de dados. Suponha que tenhamos uma tabela "funcionarios" com as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, "idcase" TEXT COLLATE NOCASE ) E que a coluna "idcase" na tabela "funcionarios" seja igual à coluna "idcase" na tabela "event_log". Agora, podemos fazer a seguinte consulta para encontrar os funcionários ociosos no processo de declaração de viagem em 31 de março de 2018: SELECT f.nome FROM funcionarios f WHERE f.id NOT IN ( SELECT el.idcase FROM event_log el WHERE el.activity LIKE '%declaração de viagem%' AND el.timestamp >= '2018-03-31 00:00:00' AND el.timestamp < '2018-04-01 00:00:00' ) AND f.id NOT IN ( SELECT el.idcase FROM event_log el WHERE el.activity NOT LIKE '%declaração de viagem%' AND el.timestamp >= '2018-03-31 00:00:00' AND el.timestamp < '2018-04-01 00:00:00' ) Essa consulta verifica se um funcionário não está presente na lista de funcionários que realizaram atividades relacionadas à declaração de viagem em 31 de março de 2018, nem em outras atividades realizadas nesse período. Os funcionários que não estão presentes nessa lista são considerados ociosos no processo de declaração de viagem nesse dia.
Para responder à sua pergunta, precisamos criar uma consulta que combine as informações da tabela "event_log" com as informações de alocamento de funcionários. Suponho que você tem uma tabela "funcionarios" com as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, "idcase" TEXT COLLATE NOCASE ) Agora, podemos criar a consulta que você está procurando: SELECT f.nome FROM funcionarios f LEFT JOIN event_log el ON f.idcase = el.idcase WHERE el.activity LIKE '%processamento de declaração%' AND el.timestamp >= '2018-03-31 00:00:00' AND el.timestamp < '2018-04-01 00:00:00' GROUP BY f.nome HAVING COUNT(el.id) = 0 Essa consulta faz o seguinte: 1. Junta a tabela "funcionarios" com a tabela "event_log" usando a coluna "idcase" como chave de junção. 2. Filtre as linhas que contenham a palavra "processamento de declaração" na coluna "activity" e que tenham uma data de timestamp entre 31 de março de 2018 e 1 de abril de 2018. 3. Agrupa as linhas por nome de funcionário. 4. Filtre as linhas que não tenham nenhuma linha associada à tabela "event_log" (ou seja, os funcionários que não estavam alocados a nenhuma ação de processamento de declaração no dia 31 de março de 2018). A consulta retorna a lista de funcionários que não estavam alocados a nenhuma ação de processamento de declaração no dia 31 de março de 2018.
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' AND idcase = 'finalizado' GROUP BY activity ORDER BY quantidade_eventos DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' AND idcase NOT LIKE '%open%' -- considerando apenas casos finalizados GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE idcase = 'concluido' AND timestamp BETWEEN '2018-12-01 00:00:00' AND '2018-12-05 23:59:59' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE idcase NOT LIKE '%open%' AND timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' AND idcase = 'finalizado' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE activity LIKE '%finalizado%' AND timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT COUNT(DISTINCT idcase) AS "Número de casos sem registro de pagamento efetuado" FROM event_log WHERE activity!= 'pagamento efetuado';
SELECT COUNT(*) FROM event_log WHERE activity!= 'pagamento efetuado';
SELECT COUNT(*) FROM event_log WHERE activity!= 'pagamento efetuado';
SELECT COUNT(*) FROM event_log WHERE activity!= 'pagamento efetuado';
SELECT COUNT(*) FROM event_log WHERE activity!= 'pagamento efetuado';
SELECT COUNT(DISTINCT idcase) AS num_declarações_sem_pagamento FROM event_log WHERE activity NOT LIKE '%payment%'
SELECT COUNT(*) FROM "event_log" WHERE "activity"!= 'payment' OR "cost" IS NULL;
SELECT idcase FROM event_log WHERE activity!= 'payment_realization' ORDER BY idcase;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity ORDER BY num_resources DESC;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity ORDER BY activity;
SELECT activity, COUNT(DISTINCT resource) AS quantidade_recursos FROM event_log GROUP BY activity ORDER BY quantidade_recursos DESC;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity ORDER BY num_resources DESC;
SELECT el.activity, COUNT(DISTINCT el.resource) AS num_resources FROM event_log el GROUP BY el.activity ORDER BY num_resources DESC;
SELECT DISTINCT el1.activity FROM event_log el1 JOIN event_log el2 ON el1.id < el2.id AND el2.activity = 'envio de lembrete' ORDER BY el1.activity;
SELECT activity FROM event_log WHERE activity = 'envio de um lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT el1.activity AS "Antecedente", el2.activity AS "Lembrete" FROM event_log el1 JOIN event_log el2 ON el1.id = el2.id - 1 WHERE el1.activity LIKE '%viagem%' AND el2.activity LIKE '%lembrete%' AND el1.timestamp < el2.timestamp;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC;
SELECT idcase, COUNT(*) AS num_events, COUNT(*)/ (SELECT COUNT(DISTINCT idcase) FROM event_log) AS percentage FROM event_log GROUP BY idcase ORDER BY num_events DESC;
SELECT COUNT(idcase) AS quantidade_eventos, idcase AS caso FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC;
SELECT idcase, COUNT(*) as event_count FROM event_log GROUP BY idcase ORDER BY event_count DESC;
SELECT COUNT(*) AS "quantidade_de_eventos", "resource" AS "declaração" FROM "event_log" GROUP BY "resource" ORDER BY "quantidade_de_eventos" DESC;
SELECT AVG(total_cost) AS average_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(total_cost) AS average_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(total_cost) AS average_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT AVG(SUM("cost")) AS media_custo_total FROM "event_log" GROUP BY "idcase"
SELECT AVG(SUM(cost)) AS media_custo_total FROM event_log GROUP BY idcase;
SELECT AVG("cost") AS "media_custo" FROM "event_log" WHERE "activity" = 'declaração';
SELECT resource, AVG(cost) AS media_custo FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS media_custo FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS media_custo FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS media_custo FROM event_log GROUP BY resource;
SELECT resource, AVG(cost) AS media_custo FROM event_log GROUP BY resource;
Para calcular o valor médio associado aos eventos de responsabilidade de cada um dos funcionários, precisamos adicionar uma tabela que relacione os funcionários com os eventos de responsabilidade. Suponha que essa tabela seja chamada "responsibility" e tenha as seguintes colunas: CREATE TABLE "responsibility" ( "id" int, "employee" TEXT COLLATE NOCASE, "event_id" int, PRIMARY KEY("id"), FOREIGN KEY("event_id") REFERENCES "event_log"("id") ) Agora, podemos calcular o valor médio associado aos eventos de responsabilidade de cada funcionário com a seguinte consulta: SELECT r.employee, AVG(el.cost) AS average_cost FROM "responsibility" r INNER JOIN "event_log" el ON r.event_id = el.id GROUP BY r.employee Essa consulta junta as tabelas "responsibility" e "event_log" pela coluna "event_id", agrupa os resultados por funcionário e calcula o valor médio da coluna "cost" para cada grupo.
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 10;
Para responder à sua pergunta, precisamos criar uma tabela que relacione os funcionários com as atividades registradas no evento log. Suponho que você tem uma tabela "funcionarios" com as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) Agora, podemos criar uma tabela temporária que relacione os funcionários com as atividades registradas no evento log: CREATE TEMPORARY TABLE "funcionario_event_log" AS SELECT f.id AS funcionario_id, f.nome AS funcionario_nome, e.activity AS atividade, e.timestamp AS timestamp, e.resource AS recurso, e.cost AS custo, e.idcase AS idcase FROM "funcionarios" f LEFT JOIN "event_log" e ON f.id = e.idcase WHERE e.activity LIKE '%processamento de declarações de viagens%' Agora, podemos agrupar os funcionários pelas atividades e contar o número de vezes que cada funcionário foi requisitado: SELECT funcionario_nome, COUNT(*) AS quantidade_de_requisitos FROM "funcionario_event_log" GROUP BY funcionario_nome ORDER BY quantidade_de_requisitos DESC LIMIT 10; Isso deve fornecer os 10 funcionários mais requisitados para o processamento de declarações de viagens.
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_ocorrencias FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_acoes FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT el1.id, el1.activity, el1.timestamp, el1.resource, el1.idcase, el2.resource AS "Subsequent Resource" FROM event_log el1 JOIN event_log el2 ON el1.id = el2.id - 1 WHERE el1.activity = el2.activity AND el1.resource!= el2.resource ORDER BY el1.id;
SELECT el1.activity, el1.resource AS resource1, el2.resource AS resource2 FROM event_log el1 JOIN event_log el2 ON el1.activity = el2.activity AND el1.id = el2.id - 1 WHERE el1.resource!= el2.resource;
SELECT activity, idcase, resource, timestamp FROM event_log WHERE activity IN ( SELECT activity FROM event_log GROUP BY activity, idcase HAVING COUNT(DISTINCT resource) > 1 ) ORDER BY timestamp;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'declaração final aprovada pelo diretor' GROUP BY idcase
SELECT COUNT(*) AS num_eventos_antecedentes FROM event_log WHERE activity = 'declaração final aprovada pelo diretor' AND id IN ( SELECT id FROM event_log WHERE activity!= 'declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1 OFFSET 0 );
SELECT idcase, COUNT(*) AS num_intervencoes FROM event_log WHERE activity LIKE '%aprovado%' AND idcase IS NOT NULL GROUP BY idcase
SELECT TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM event_log WHERE activity = 'permissão requisitada pelo funcionário'), (SELECT timestamp FROM event_log WHERE activity = 'permissão aprovada pela administração') ) AS tempo_passado FROM event_log WHERE activity IN ('permissão requisitada pelo funcionário', 'permissão aprovada pela administração') GROUP BY idcase HAVING COUNT(DISTINCT activity) = 2;
WITH grouped_events AS ( SELECT idcase, activity, timestamp, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS prev_timestamp FROM event_log WHERE activity IN ('permissão requisitada pelo funcionário', 'permissão aprovada pela administração') ) SELECT idcase, activity, timestamp, TIMESTAMPDIFF(SECOND, prev_timestamp, timestamp) AS time_interval FROM grouped_events WHERE activity = 'permissão aprovada pela administração' AND prev_timestamp IS NOT NULL;
SELECT TIMESTAMPDIFF(SECOND, (SELECT timestamp FROM event_log WHERE activity = 'REQUISICAO_PERMISSAO' AND idcase = 'X'), (SELECT timestamp FROM event_log WHERE activity = 'APROVACAO_PERMISSAO' AND idcase = 'X')) AS tempo_passado FROM event_log WHERE activity IN ('REQUISICAO_PERMISSAO', 'APROVACAO_PERMISSAO') AND idcase = 'X';
SELECT idcase, activity, COUNT(*) AS num_activities FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1;
SELECT idcase, resource, COUNT(*) as num_accesses FROM event_log WHERE timestamp >= DATE_SUB(CURRENT_TIMESTAMP, INTERVAL 1 DAY) -- ajuste o período de tempo desejado GROUP BY idcase, resource HAVING COUNT(*) > 1;
SELECT * FROM event_log WHERE activity LIKE '%retrabalho%' OR activity LIKE '%rework%';
A pergunta é um pouco vaga, mas vou tentar ajudar. Em SQL, "retrabalho" (ou "rework" em inglês) se refere ao uso de colunas ou índices que já existem em uma tabela, em vez de criar novos. No entanto, no esquema de banco de dados fornecido, não há declarações que indiquem retrabalho. A declaração `CREATE TABLE` é a única declaração fornecida, e ela cria uma tabela com sete colunas. Não há nenhuma coluna ou índice que seja reutilizado de outra tabela. Portanto, a resposta é: não há declarações que indiquem retrabalho no esquema de banco de dados fornecido.
A pergunta é um pouco confusa, pois não há nenhuma declaração de SQL que precise ser executada. No entanto, se você estiver perguntando sobre quais colunas do esquema de banco de dados "event_log" podem ter problemas com retrabalho, aqui estão algumas possibilidades: * A coluna "id" pode ter problemas com retrabalho se não for gerada automaticamente pelo banco de dados, pois isso pode causar duplicatas. * A coluna "idcase" pode ter problemas com retrabalho se não for única para cada caso, pois isso pode causar confusão ao tentar relacionar as atividades com os casos. * A coluna "resource" pode ter problemas com retrabalho se não for verificada se o recurso existe antes de ser adicionado ao log de eventos. Em resumo, essas colunas podem ter problemas com retrabalho se não forem implementadas corretamente.
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS count FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ORDER BY count DESC;
SELECT * FROM ( SELECT *, LAG(activity) OVER (ORDER BY timestamp) AS prev_activity FROM event_log ) AS t WHERE activity = prev_activity;
SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE id IN ( SELECT id FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1 ) ORDER BY idcase, activity;
SELECT activity, COUNT(*) AS consecutivos FROM event_log WHERE activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 1 ) GROUP BY activity ORDER BY consecutivos DESC;
A pergunta é um pouco confusa, pois não há declarações que tenham problemas de intervenções iguais e seguidas. No entanto, posso tentar ajudar. A declaração `CREATE TABLE "event_log"` é uma declaração de criação de tabela, e não há problemas de intervenções iguais e seguidas nessa declaração. A declaração `SELECT` não é uma declaração que tenha problemas de intervenções iguais e seguidas, pois é uma declaração de seleção de dados e não tem intervenções. Se você está se referindo a problemas de intervenções iguais e seguidas em uma query SQL, é importante notar que esses problemas são comuns em queries que envolvem operações de agrupamento, ordenação e filtragem. Se você pode fornecer mais informações sobre o problema que você está enfrentando, posso tentar ajudar a resolver.
SELECT resource, activity FROM event_log WHERE id = LAG(id) + 1 AND activity = LAG(activity) ORDER BY resource, activity;
O problema é que o esquema de banco de dados fornecido não contém informações sobre funcionários ou supervisores. O esquema "event_log" parece ser um registro de atividades no sistema, com campos como "activity", "timestamp", "resource", "cost" e "idcase". Portanto, não é possível responder a essa pergunta com base no esquema fornecido. Seria necessário adicionar uma tabela de funcionários e uma tabela de relações entre funcionários e supervisores para responder essa pergunta.
Para responder à sua pergunta, precisamos analisar o esquema de banco de dados e identificar quais informações estão disponíveis. No entanto, não há informações sobre funcionários ou supervisores no esquema fornecido. O esquema "event_log" parece ser um registro de atividades no sistema, com informações sobre a atividade realizada, o tempo em que foi realizada, o recurso utilizado, o custo da atividade e um identificador de caso. Não há informações sobre funcionários ou supervisores. Portanto, não é possível responder à sua pergunta com base no esquema fornecido. Se você tiver mais informações sobre o banco de dados ou quaisquer outras tabelas relacionadas, posso ajudar a responder à sua pergunta.
Para responder essa pergunta, precisamos de mais informações sobre o esquema de banco de dados. Infelizmente, o esquema fornecido não inclui informações sobre funcionários ou orçamento. No entanto, se você tiver uma tabela de funcionários com informações sobre suas responsabilidades, poderíamos criar uma consulta para relacionar os funcionários com as atividades de orçamento no evento_log. Suponha que tenhamos uma tabela "funcionarios" com as seguintes colunas: CREATE TABLE "funcionarios" ( "id" int, "nome" TEXT COLLATE NOCASE, "responsabilidade" TEXT COLLATE NOCASE, PRIMARY KEY("id") ) E suponha que a coluna "responsabilidade" contenha informações sobre as responsabilidades de cada funcionário, incluindo orçamento. Então, poderíamos criar uma consulta para relacionar os funcionários com as atividades de orçamento no evento_log da seguinte maneira: SELECT f.nome FROM funcionarios f JOIN event_log el ON f.id =? (identificar como relacionar os funcionários com as atividades de orçamento) WHERE el.activity LIKE '%orçamento%' Lembre-se de que essa é apenas uma suposição e que a consulta real dependeria das informações específicas do seu banco de dados.
SELECT DISTINCT resource AS funcionario FROM event_log WHERE activity LIKE '%orçamento%' OR activity LIKE '%budget%';
