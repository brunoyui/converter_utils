select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem'; Essa query retorna a quantidade de vezes que a atividade 'Fim da viagem' foi registrada no banco de dados.
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem'; Essa consulta contará o número de linhas na tabela "event_log" onde a coluna "activity" tem o valor 'Fim da viagem'.
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James' Essa consulta verifica se o campo "activity" tem o valor 'Fim da viagem' e o campo "resource" tem o valor 'James', e retorna o número de linhas que atendem a essas condições.
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James'
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James' Essa consulta seleciona todas as linhas da tabela `event_log` onde a atividade é 'Fim da viagem' e o recurso é 'James', e então conta o número de linhas encontradas.
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James'
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource ORDER BY quantidade_eventos DESC;
A resposta é: SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource; Essa consulta retorna a quantidade de eventos associados a cada recurso, mostrando o recurso e a quantidade de eventos associados a ele.
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log GROUP BY resource Essa query contará o número de eventos em que cada recurso atuou e mostrará o resultado agrupado por recurso.
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_actions FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Essa query contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter', o que representa o número de eventos executados pelo recurso 'Peter'.
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Essa query contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter', o que representa o número de vezes que o recurso 'Peter' executou uma atividade.
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Essa query contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter', o que representa o número de vezes que o funcionário Peter executou uma atividade.
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Essa query contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter', o que representa o número de eventos executados pelo funcionário Peter.
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS total_actions FROM event_log WHERE resource = 'Peter';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31' AND idcase IS NOT NULL;
SELECT idcase FROM event_log WHERE EXTRACT(MONTH FROM timestamp) = 3 AND EXTRACT(YEAR FROM timestamp) = 2018 GROUP BY idcase
SELECT idcase FROM event_log WHERE strftime('%Y-%m', timestamp) = '2018-03' AND activity = 'Declaração final aprovada pelo diretor';
SELECT idcase FROM event_log WHERE timestamp = (SELECT MAX(timestamp) FROM event_log WHERE strftime('%Y-%m', timestamp) = '2018-03')
SELECT idcase FROM event_log WHERE timestamp LIKE '%-03-31%' OR timestamp LIKE '%-03-30%' OR timestamp LIKE '%-03-29%'
SELECT idcase FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31' GROUP BY idcase
SELECT idcase FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31'
SELECT * FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT * FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource <> 'Douglas'
SELECT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT * FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query contará o número de recursos únicos presentes no log de eventos.
SELECT COUNT(DISTINCT resource) FROM event_log;
Para responder à pergunta "Quantas recursos existem no log de eventos?", você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT resource) FROM event_log; Essa consulta contará o número de recursos únicos presentes no log de eventos.
Para responder à pergunta, você precisa agrupar os dados por "idcase" e contar o número de atividades diferentes executadas por caso. Você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT idcase) AS num_cases, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1 Essa consulta contará o número de casos (idcase) que têm mais de uma atividade diferente executada.
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log Essa query retorna o número de recursos diferentes presentes no log de eventos.
SELECT COUNT(DISTINCT idcase) FROM event_log
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query retorna o número de recursos diferentes que aparecem no log de eventos.
Para responder à pergunta "Quantos recursos diferentes executaram atividades?", você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT resource) FROM event_log Essa consulta contará o número de recursos únicos (ou seja, diferentes) que executaram atividades no banco de dados.
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query retorna o número de recursos diferentes presentes no log de eventos.
SELECT COUNT(DISTINCT user) FROM event_log
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
SELECT resource, SUM(COUNT(*)) AS total_actions FROM event_log GROUP BY resource
SELECT idcase FROM event_log WHERE cost > 2.225 GROUP BY idcase HAVING COUNT(*) > 0
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log WHERE cost > 2225 Essa consulta seleciona os identificadores dos casos que possuem eventos com custos maiores que 2.225.
SELECT idcase FROM event_log WHERE cost > 2.225 GROUP BY idcase HAVING COUNT(*) > 3
Based on the provided SQL examples, the most common actions in the process of declarations are: 1. **Filtering**: Filtering data based on specific conditions, such as selecting all tuples with a cost associated (SELECT * FROM event_log WHERE cost IS NOT NULL). 2. **Grouping**: Grouping data by specific columns, such as grouping by activity (SELECT activity from event_log GROUP BY activity) or by date (SELECT strftime('%Y-%m-%d', timestamp), count(DISTINCT idcase) FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY strftime('%Y-%m-%d', timestamp)). 3. **Aggregation**: Performing aggregation operations, such as counting the number of distinct resources (SELECT COUNT (DISTINCT resource) FROM event_log) or counting the number of occurrences of each activity (SELECT resource, activity, count (*) FROM event_log group by resource, activity). 4. **Sorting**: Sorting data based on specific columns, such as sorting by the count of occurrences of each activity (SELECT activity from event_log GROUP BY activity HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY activity ORDER BY COUNT(*) desc LIMIT 1)). 5. **Joining**: Joining data from multiple tables, which is not shown in the provided examples. The SQL query that answers the question "Quais declarações estão associadas a ações que custaram mais do que 2.225?" is: SELECT * FROM event_log WHERE cost > 2225
SELECT idcase FROM event_log WHERE cost > 2225
A pergunta! A resposta é a mesma para as quatro primeiras perguntas, pois elas são equivalentes: SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1) Essa consulta retorna os recursos que participaram de mais eventos e a quantidade de eventos em que eles participaram. A razão pela qual as outras perguntas são equivalentes é que elas estão procurando por recursos que participaram de um número específico de eventos, que é o maior número de eventos participados por qualquer recurso. A consulta acima faz isso ao: 1. Contar o número de eventos para cada recurso (GROUP BY resource, COUNT(*)). 2. Ordenar esses resultados em ordem decrescente (ORDER BY COUNT(*) DESC). 3. Limitar o resultado para apenas o recurso com o maior número de eventos (LIMIT 1). 4. Fazer um join com a tabela original para obter o recurso e a quantidade de eventos (SELECT resource, COUNT(*) FROM event_log GROUP BY resource). As outras perguntas são equivalentes porque elas estão usando a mesma lógica, mas com diferentes palavras-chave.
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC;
SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1;
SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1;
SELECT resource FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1;
SELECT resource, COUNT(*) as total_actions FROM event_log GROUP BY resource ORDER BY total_actions DESC LIMIT 5;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_actions FROM event_log GROUP BY resource ORDER BY total_actions DESC LIMIT 10;
A resposta é: SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC; Essa consulta lista todos os recursos e a quantidade de eventos relacionados a cada um, em ordem decrescente em relação ao número de eventos.
A resposta é: SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC; Essa query lista todos os recursos presentes no log de eventos, acompanhados do número de eventos relacionados a cada um deles, e ordena a resposta por ordem descrescente no número de eventos.
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC Essa query lista todos os recursos e a quantidade de eventos sob responsabilidade de cada um, ordenando a resposta por ordem descrescente em relação ao número de eventos.
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource ORDER BY total_events DESC;
A resposta é: SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log GROUP BY resource ORDER BY quantidade_execucoes DESC; Essa query seleciona a coluna "resource" (os recursos) e a contagem da quantidade de vezes que cada recurso executou atividades (COUNT(*)), agrupando os resultados por recurso. Em seguida, ordena a resposta em ordem decrescente pela quantidade de execuções de atividades.
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC;
Aqui estão as respostas para as perguntas: 1. Em quantos casos todos os eventos possuem custo nulo? A resposta é fornecida pela primeira query: `SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)`. Esta query retorna o número de casos que possuem apenas eventos com custo nulo. 2. Selecione todas as tuplas onde o custo do evento não é nulo. A resposta é fornecida pela terceira query: `SELECT * FROM event_log WHERE cost IS NOT NULL`. Esta query retorna todas as tuplas da tabela `event_log` onde o custo do evento não é nulo. 3. Selecione todos os eventos cujo custo não é nulo. A resposta é a mesma da pergunta 2. 4. Apresente os eventos de maior custo. A resposta é fornecida pela quarta query: `SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)`. Esta query retorna todas as tuplas da tabela `event_log` que possuem o custo máximo. 5. Quantos casos possuem apenas eventos sem custo? A resposta é a mesma da pergunta 1. 6. Quais eventos possuem custo diferente de nulo? A resposta é fornecida pela sexta query: `SELECT * FROM event_log WHERE cost IS NOT NULL`. Esta query retorna todas as tuplas da tabela `event_log` que possuem um custo diferente de nulo.
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL Essa consulta seleciona todas as linhas da tabela "event_log" onde o campo "cost" não é nulo.
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL
SELECT * FROM event_log WHERE cost IS NOT NULL;
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todos os registros da tabela "event_log" onde o campo "cost" tem um valor não nulo, o que significa que há custo informado para esses eventos.
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL Essa consulta retorna todas as ocorrências no processamento das declarações que acarretaram em custos para a universidade.
SELECT * FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Requisição de pagamento'
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Requisição de pagamento');
Aqui estão as respostas para os exemplos de SQL fornecidos: 1. Informe para quais casos não há registro de eventos associados às atividades'requisição de pagamento' ou 'pagamento efetuado'. SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') Essa consulta retorna os casos que não têm eventos associados às atividades'requisição de pagamento' ou 'pagamento efetuado'. 2. Informe para quais instâncias de processos não há registro de eventos associados às atividades'requisição de pagamento' ou 'pagamento efetuado'. SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') Essa consulta é idêntica à anterior e retorna os casos que não têm eventos associados às atividades'requisição de pagamento' ou 'pagamento efetuado'. 3. Recupere as informações sobre eventos relacionados às atividades 'início da viagem' e 'declaração requisitada pelo funcionário', do mais antigo para o mais novo e então ordenados por recurso. SELECT * FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Declaração requisitada pelo funcionário' ORDER BY timestamp, resource Essa consulta retorna todos os eventos relacionados às atividades 'início da viagem' e 'declaração requisitada pelo funcionário', ordenados por data e hora (timestamp) e, em caso de empate, por recurso. 4. Recupere os dados dos eventos associados às atividades'requisição de pagamento' existentes no log de eventos. SELECT * FROM event_log WHERE activity = 'Requisição de pagamento' Essa consulta retorna todos os eventos associados à atividade'requisição de pagamento'. 5. Apresente todas as informações disponíveis referentes aos eventos relacionado à execução da atividade 'início da viagem'. SELECT * FROM event_log WHERE activity = 'Início da viagem' Essa consulta retorna todos os eventos relacionados à atividade 'início da viagem'. 6. Retorne as informações associadas aos eventos relacionados às atividades 'início da viagem' ou'requisição de pagamento'. SELECT * FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Requisição de pagamento' Essa consulta retorna todos os eventos relacionados às atividades 'início da viagem' ou'requisição de pagamento'.
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Requisição de pagamento')
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Requisição de pagamento')
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 1;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 5;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 1;
A resposta é: SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC; Essa query retorna o nome das atividades e a quantidade de vezes que elas ocorrem no log de eventos, ordenando a lista de forma decrescente pelo número de ocorrências das atividades.
A resposta é: SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC; Essa consulta retorna uma lista com as atividades do processo de negócio e a frequência com que elas foram executadas, ordenada pela frequência em ordem decrescente (ou seja, a atividade mais frequente é a primeira na lista).
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC;
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017'
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017'
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017' ORDER BY timestamp;
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017'
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31' GROUP BY activity ORDER BY count DESC;
SELECT DISTINCT activity FROM event_log WHERE strftime('%Y', timestamp) = '2017' ORDER BY activity;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
SELECT idcase FROM event_log group by idcase having count(*) <= 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
SELECT idcase, COUNT(*) as count_activities FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
/* Responda o seguinte: Liste todas as declarações que possuem até 20 eventos associados. */ SELECT idcase, count(*) as num_events FROM event_log GROUP BY idcase HAVING count(*) <= 20
SELECT * FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20)
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
SELECT resource, COUNT(*) as num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC LIMIT 5;
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC LIMIT 5;
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC LIMIT 5;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC LIMIT 5;
SELECT resource, COUNT(*) as num_declaracoes FROM event_log GROUP BY resource ORDER BY num_declaracoes DESC LIMIT 5;
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 5; Essa query lista os recursos que trabalharam na maior quantidade de eventos, ordenados em ordem decrescente (ou seja, os recursos que trabalharam mais eventos aparecem primeiro) e limitados a apenas 5 resultados.
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 5;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 5;
SELECT resource, COUNT(*) as total_declarações FROM event_log GROUP BY resource ORDER BY total_declarações DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS total_occurrences FROM event_log WHERE activity = 'Início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource
SELECT resource, COUNT(*) AS num_actions FROM event_log WHERE timestamp BETWEEN '2016-01-01' AND '2017-01-01' AND activity = 'Início de viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log WHERE activity LIKE '%início da viagem%' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
A resposta é: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contabiliza a quantidade de vezes que cada recurso executou a atividade 'declaração rejeitada pelo supervisor', agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS ocorrencias, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará o número de ocorrências da atividade 'declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
SELECT resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
A resposta é: SELECT COUNT(*) AS ocorrencias, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará o número de ocorrências da atividade 'Declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) que passaram pela atividade 'Declaração rejeitada pelo supervisor' para cada recurso (resource), agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS ocorrencias, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará o número de ocorrências da atividade 'Declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
SELECT COUNT(*) AS num_execucoes, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(*) as ocorrencias FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource ORDER BY ocorrencias DESC;
SELECT resource, COUNT(*) as ocorrencias FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(*) as total_occurrences FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa query contabiliza a quantidade de vezes que cada funcionário (representado pelo campo "resource") rejeitou uma declaração no papel de supervisor (atividade "Declaração rejeitada pelo supervisor").
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase, count(*) as num_intervencoes FROM event_log GROUP BY idcase HAVING count(*) > 20
SELECT idcase, COUNT(*) as total_events FROM event_log GROUP BY idcase ORDER BY total_events DESC LIMIT 1;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 1;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(DISTINCT activity) DESC LIMIT 1;
SELECT idcase, COUNT(*) as num_events, MIN(timestamp) as start_time, MAX(timestamp) as end_time FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_actions FROM event_log GROUP BY idcase ORDER BY num_actions DESC LIMIT 10;
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!= 'Requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!= 'Requisição de pagamento'
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!='requisição de pagamento' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity ='requisição de pagamento' )
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!= 'Requisição de pagamento'
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity!= 'Requisição de pagamento' AND e.resource = 'Sara'
SELECT * FROM event_log WHERE employee = 'Sara' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento')
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaração 143598';
SELECT * FROM event_log WHERE idcase = 'declaração 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE idcase = 'declaração 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaração 143598';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = '143598';
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa consulta contará o número de casos únicos (idcase) para cada recurso (resource) que trabalhou no período especificado.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa consulta contará o número de casos únicos (idcase) para cada recurso (resource) que atuou no período especificado.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) em que cada recurso está associado, considerando apenas os eventos ocorridos entre '2017-01-01' e '2017-05-31'.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp between '2017-01-01' and '2017-05-31' GROUP BY resource Essa query contabiliza o número de casos (idcase) em que cada recurso (resource) esteve associado, considerando apenas os registros com timestamp entre '2017-01-01' e '2017-05-31'.
A resposta é: SELECT COUNT(DISTINCT idcase) AS casos, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource; Essa query contabiliza o número de casos (idcase) em que cada recurso (resource) esteve associado, considerando apenas os registros com timestamp entre '2017-01-01' e '2017-05-31'.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa consulta contabiliza o número de casos (idcase) para cada recurso, considerando apenas os eventos ocorridos entre 1º de janeiro de 2017 e 31º de maio de 2017.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa query contabiliza o número de casos (idcase) em que cada recurso trabalhou no período especificado.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp between '2017-01-01' and '2017-05-31' GROUP BY resource Essa query contabiliza o número de casos (idcase) em que cada recurso (resource) atuou no período especificado.
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
A resposta certa é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa consulta agrupa os casos pelo campo "idcase", contabiliza o número de eventos para cada caso e ordena a lista em ordem decrescente. Em seguida, limita a lista para os 10 casos com mais eventos. As outras consultas fornecidas são equivalentes, mas podem ser escritas de forma mais concisa e eficiente.
SELECT idcase, COUNT(*) AS num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query lista os 10 casos com mais execuções de atividades, em ordem descrescente.
A resposta certa é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query lista os 10 casos que possuem mais execuções de atividades, em ordem descrescente, sem a necessidade de subconsultas ou uso de funções de agregação complexas. A query original fornecida é um exemplo de over-engineering, pois utiliza uma subconsulta para obter a contagem de eventos por caso e outra subconsulta para obter os 10 casos com mais eventos. Além disso, a cláusula `HAVING` é desnecessária, pois a cláusula `ORDER BY` e `LIMIT` podem ser usadas para obter os resultados desejados. A query mais simples e eficiente é a que foi fornecida como resposta.
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) AS num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT activity) AS num_actions, COUNT(*) AS total_actions FROM event_log GROUP BY idcase ORDER BY total_actions DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT activity) as activity_count FROM event_log GROUP BY idcase ORDER BY activity_count DESC LIMIT 10;
A resposta certa é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa consulta agrupa os casos pelo campo "idcase", contabiliza o número de atividades (ou eventos) para cada caso e ordena a lista em ordem decrescente (mais eventos primeiro). Em seguida, limita a lista para os 10 casos com mais eventos. As outras consultas fornecidas são similares, mas algumas delas incluem erros ou não são necessárias. Por exemplo, a consulta que inclui a subconsulta `HAVING COUNT(activity) IN (SELECT Count(activity) FROM event_log GROUP BY idcase ORDER BY Count(activity) Desc LIMIT 10)` é mais complexa do que necessário e pode ser mais lenta e menos eficiente.
SELECT idcase, COUNT(*) as total_events FROM event_log GROUP BY idcase ORDER BY total_events DESC LIMIT 10;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query agrupa os casos pelo campo "idcase", contabiliza a quantidade de eventos para cada caso e ordena a lista em ordem decrescente pela quantidade de eventos. O LIMIT 10 limita a lista a apenas os 10 casos com a maior quantidade de eventos.
Aqui está a resposta: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query lista os 10 casos com mais eventos, em ordem descrescente, sem a necessidade de utilizar subconsultas ou funções de agregação complexas.
A resposta certa é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query lista os 10 casos que possuem mais eventos, em ordem descrescente, contando o número de eventos para cada caso e ordenando por esse número em ordem decrescente.
A resposta é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query agrupa os casos pelo campo "idcase", contabiliza o número de eventos para cada caso e ordena a lista em ordem decrescente pelo número de eventos. O LIMIT 10 limita a lista a apenas os 10 casos com mais eventos.
SELECT idcase, COUNT(*) AS total_actions FROM event_log GROUP BY idcase ORDER BY total_actions DESC LIMIT 10;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) as total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY COUNT(*) DESC; Essa query seleciona todos os recursos que atuaram em pelo menos 100 eventos, agrupa os resultados por recurso e ordena as informações por ordem descrescente de quantidade de eventos por recurso.
resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY quantidade_eventos DESC;
SELECT idcase, COUNT(*) as total_activities FROM event_log GROUP BY idcase HAVING COUNT(*) >= 100 ORDER BY total_activities DESC;
SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp
SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp
SELECT idcase, MIN(timestamp) AS start_time, id FROM event_log GROUP BY idcase ORDER BY idcase, start_time;
Aqui está a resposta: SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp ASC; Essa consulta retorna todos os eventos do log, ordenados primeiro pelo identificador do caso e então pela data de início do evento.
Aqui está a resposta: SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp ASC; Essa consulta lista todos os casos e seus eventos, ordenando-os primeiro pelo identificador do caso e em seguida pela data de início do evento (timestamp).
SELECT idcase, timestamp, activity, resource, cost FROM event_log ORDER BY idcase, timestamp
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS total_executions FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS total_executions FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) as occurrences FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource Essa query contabiliza o número de vezes que cada funcionário (representado pelo campo "resource") aprovou uma declaração no papel de administrador (indicado pela atividade "Declaração aprovada pela administração").
SELECT COUNT(*) AS num_events, resource FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS quantidade FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT activity, COUNT(*) AS occurrences FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS quantidade FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity
SELECT activity, count(*) as frequency FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31' GROUP BY activity ORDER BY frequency DESC;
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT activity, SUM(cost) AS total_cost FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity ORDER BY total_cost DESC;
SELECT activity, MAX(timestamp) AS latest_timestamp FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS recent_timestamp FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_execution_date FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_execution FROM event_log GROUP BY activity ORDER BY last_execution DESC;
SELECT activity, MAX(timestamp) AS last_execution FROM event_log GROUP BY activity ORDER BY activity;
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS latest_timestamp FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity
SELECT activity, strftime('%Y', timestamp) AS year, COUNT(*) AS count FROM event_log WHERE activity IN ('Declaração aprovada pelo supervisor', 'Permissão rejeitada pelo funcionário') GROUP BY activity, year ORDER BY activity, year;
SELECT COUNT(CASE WHEN activity = 'Declaração aprovada pelo supervisor' AND strftime('%Y', timestamp) = '2017' THEN 1 END) AS declaração_aprovada_2017, COUNT(CASE WHEN activity = 'Permissão rejeitada pelo funcionário' AND strftime('%Y', timestamp) = '2018' THEN 1 END) AS permissao_rejeitada_2018 FROM event_log;
SELECT COUNT(CASE WHEN activity = 'Declaração aprovada pelo supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 ELSE NULL END) AS casos_2017, COUNT(CASE WHEN activity = 'Permissão rejeitada pelo funcionário' AND EXTRACT(YEAR FROM timestamp) = 2018 THEN 1 ELSE NULL END) AS casos_2018 FROM event_log;
WITH RankedEvents AS ( SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log ) SELECT idcase, coalesce((strftime('%s', next_timestamp) - strftime('%s', timestamp)),0) as duration FROM RankedEvents WHERE activity='Declaração aprovada pelo supervisor'
SELECT count(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor'
SELECT COUNT(CASE WHEN EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 END) AS aprovações_supervisor_2017, COUNT(CASE WHEN EXTRACT(YEAR FROM timestamp) = 2018 AND activity = 'Declaração rejeitada pelo supervisor' THEN 1 END) AS rejeições_2018 FROM event_log WHERE activity IN ('Permissão final aprovada pelo supervisor', 'Declaração rejeitada pelo supervisor');
SELECT activity, timestamp, id FROM event_log WHERE activity LIKE 'E%' ORDER BY timestamp DESC;
Para responder ao questionário, você pode usar as seguintes consultas SQL: 1. Quantas pessoas estão associadas à execução de atividades no log de eventos? SELECT COUNT (DISTINCT resource) FROM event_log Essa consulta contará o número de recursos únicos (pessoas) presentes no log de eventos. 2. Recupere o identificador do caso, recurso, identificador de evento e data de finalização das ocorrências da atividade 'envio de lembrete'. Ordene as informações em ordem cronológica de data de finalização. SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp Essa consulta recuperará as informações solicitadas para as ocorrências da atividade 'envio de lembrete', ordenadas pela data de finalização. 3. Recupere todos os eventos que registram a execução de atividades iniciadas pela letra 'E'. SELECT * FROM event_log WHERE activity LIKE 'E%' Essa consulta recuperará todos os eventos que começam com a letra 'E', independentemente do resto da atividade. 4. Liste o identificador do evento, a atividade associada e a data de término da execução, de todos os eventos associados às atividades 'permissão final aprovada pelo supervisor' ou 'declaração aprovada pelo supervisor', ordernados por data de término. SELECT id, activity, timestamp FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' OR activity = 'Declaração aprovada pelo supervisor' ORDER BY timestamp Essa consulta recuperará as informações solicitadas para as ocorrências das atividades especificadas, ordenadas pela data de término. 5. Informe quantos eventos estão associados à execução de cada atividade? SELECT activity, count(*) FROM event_log GROUP BY activity Essa consulta contará o número de eventos associados a cada atividade. 6. Recupere a atividade, a data de término da execução e o identificador do evento e ordene o resultado pela data de término execução. SELECT activity, timestamp, id FROM event_log ORDER BY timestamp Essa consulta recuperará as informações solicitadas e as ordenará pela data de término da execução.
Aqui está a resposta: SELECT id, activity, timestamp FROM event_log ORDER BY timestamp; Essa consulta seleciona todas as colunas do registro (id, activity e timestamp) e ordena a lista pela coluna timestamp, o que significa que a lista será ordenada pela data de término da execução das ações.
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'declaração requisitada pelo funcionário';
SELECT SUM(CASE WHEN activity = 'declaração requisitada pelo funcionário' THEN 1 ELSE 0 END) AS total_activities FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' AND resource = 'Thomas';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'Declaração requisitada pelo funcionário'; Essa consulta contará o número de vezes que o recurso "Thomas" executou a atividade "Declaração requisitada pelo funcionário" no banco de dados.
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity LIKE '%declaração%';
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT * FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT activity, COUNT(*) AS num_events FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity
SELECT activity FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT resource) AS recursos_atuantes FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT COUNT(DISTINCT resource) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
A resposta para a pergunta "Quais recursos foram responsáveis pela atividade 'declaração rejeitada pelo pré-aprovador'?" é: SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'; Essa consulta retorna uma lista de recursos que foram responsáveis pela atividade 'declaração rejeitada pelo pré-aprovador', sem repetir recursos.
Aqui estão as respostas para as perguntas: 1. Em quantos casos cada recurso foi responsável por executar a primeira ocorrência da atividade 'declaração rejeitada pelo pré-aprovador'? SELECT resource, COUNT(*) AS num_cases FROM (SELECT resource, MIN(timestamp) AS first_occurrence FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase) AS first_occurrences GROUP BY resource; 2. Quantas vezes a atividade 'declaração rejeitada pelo pré-aprovador' foi executada? SELECT COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'; 3. Em quantas instâncias de processo cada recurso foi responsável por executar a primeira ocorrência da atividade 'declaração rejeitada pelo pré-aprovador'? SELECT resource, COUNT(*) AS num_cases FROM (SELECT resource, MIN(timestamp) AS first_occurrence FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase) AS first_occurrences GROUP BY resource; 4. Quantas vezes a atividade 'declaração rejeitada pelo pré-aprovador' ocorreu? SELECT COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'; 5. Liste todos os casos que passaram pela atividade 'declaração rejeitada pelo pré-aprovador', exceto aqueles em que a atividade foi executada pelo recurso Douglas. SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'; 6. Quais recursos foram associados à atividade 'declaração rejeitada pelo pré-aprovador'? SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador';
Aqui está a resposta: SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' Essa consulta retorna uma lista de recursos (ou usuários) que foram associados a instâncias da atividade 'declaração rejeitada pelo pré-aprovador'.
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource
SELECT count(*), resource FROM (SELECT resource, MIN(timestamp) FROM event_log where activity = 'Declaração rejeitada pelo pré-aprovador' GROUP by resource, idcase) GROUP by resource
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31'
SELECT COUNT(DISTINCT e.idcase) FROM event_log e WHERE e.activity = 'Declaração final aprovada pelo diretor' AND e.timestamp BETWEEN '2017-01-01' AND '2017-05-31';
SELECT COUNT(*) AS num_declarações FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' AND activity = 'Declaração final aprovada' AND resource LIKE '%diretor%'
SELECT idcase FROM event_log WHERE resource = 'Charles' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND timestamp BETWEEN '2018-01-01' AND '2018-01-31' )
SELECT idcase FROM event_log WHERE resource = 'Charles' AND strftime('%Y-%m', timestamp)!= '2018-01' GROUP BY idcase HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log WHERE resource = 'Charles' AND strftime('%Y-%m', timestamp)!= '2018-01')
SELECT idcase FROM event_log WHERE resource = 'Charles' AND id NOT IN ( SELECT id FROM event_log WHERE timestamp LIKE '2018-01-%' )
SELECT DISTINCT activity FROM event_log WHERE resource = 'Charles' AND timestamp NOT BETWEEN '2018-01-01' AND '2018-01-31'
SELECT idcase FROM event_log WHERE resource = 'Charles' AND timestamp > '2018-01-01' GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
A pergunta! Vou ajudar a responder a última pergunta: /* Responda o seguinte: Quais declarações passaram por mais de três intervenções de natureza diferentes? */ SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3 Explicação: * A cláusula `GROUP BY idcase` agrupa as linhas do evento_log por idcase. * A cláusula `HAVING COUNT(DISTINCT activity) > 3` filtra as agrupações que têm mais de 3 atividades diferentes (ou intervenções) associadas a cada idcase. Essa consulta retorna as idcases que passaram por mais de três intervenções de natureza diferentes.
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 Essa consulta agrupa os casos pelo identificador do caso e conta o número de eventos associados a cada caso. Em seguida, ela filtra os casos que possuem mais de 3 eventos, retornando apenas os identificadores dos casos que atendem a essa condição.
SELECT COUNT (DISTINCT resource) FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3)
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 Essa query agrupa os casos pelo campo "idcase" e conta o número de eventos executados em cada caso. Em seguida, filtra os casos que possuem mais de 3 eventos executados, utilizando a cláusula HAVING COUNT(*) > 3.
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, AVG(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS average_duration FROM event_log GROUP BY idcase
SELECT COUNT(DISTINCT resource), SUM(cost), idcase FROM event_log GROUP BY idcase
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
A resposta é: SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase) Essa query agrupa as linhas do log de eventos por caso e recurso, e filtra apenas os casos em que todas as atividades foram executadas pelo mesmo recurso.
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(DISTINCT activity) FROM event_log WHERE idcase = event_log.idcase)
A resposta é: SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase) Essa query lista os casos e os recursos nos quais todas as atividades foram alocadas para um mesmo recurso. Ela agrupa os registros do log de eventos por caso e recurso, e verifica se o número de atividades diferentes é igual ao número total de atividades no caso. Se sim, isso significa que todas as atividades do caso foram alocadas para o mesmo recurso.
A resposta é: SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase) Essa query agrupa os casos e recursos que executaram as mesmas atividades e verifica se o número de atividades é igual ao número total de atividades executadas no caso.
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM activity_types)
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) IN ('2016', '2017')
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31' GROUP BY idcase HAVING COUNT(*) > 1
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) BETWEEN '2016' AND '2017'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) BETWEEN '2016' AND '2017'
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) BETWEEN '2016' AND '2017'
SELECT idcase, activity, timestamp FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) IN ('2016', '2017') ORDER BY idcase, timestamp;
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity LIKE '%rejeição%' Essa consulta seleciona todas as linhas da tabela `event_log` onde a coluna `activity` contém a palavra "rejeição" (ignorando maiúsculas e minúsculas, graças ao COLLATE NOCASE). Isso deve retornar as informações das intervenções que signifiquem uma rejeição de declaração.
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity LIKE '%rejeição%' Essa consulta seleciona todas as linhas da tabela "event_log" onde a coluna "activity" contém a palavra "rejeição" (ignorando maiúsculas e minúsculas, graças ao COLLATE NOCASE). Isso fornecerá todas as informações referentes às intervenções de rejeição nas declarações.
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) > 0
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) = (SELECT MAX(cost) FROM event_log WHERE cost > 0)
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) = (SELECT MAX(cost) FROM event_log)
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) = (SELECT MAX(cost) FROM event_log)
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) > 0
SELECT activity, count(*) FROM event_log GROUP BY activity;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT p.idcase, strftime('%s', p.timestamp) - strftime('%s', e.start_time) as 'Fim da viagem', strftime('%s', x.timestamp) - strftime('%s', e.start_time) as 'Declaração rejeitada pelo funcionário', strftime('%s', y.timestamp) - strftime('%s', e.start_time) as 'Pagamento efetuado', f.activity FROM event_log p INNER JOIN (SELECT MIN(timestamp) as start_time, idcase FROM event_log GROUP by idcase) e ON e.idcase = p.idcase LEFT JOIN event_log x ON x.idcase=e.idcase AND x.activity = 'Declaração rejeitada pelo funcionário' LEFT JOIN event_log y ON y.idcase=e.idcase AND y.activity = 'Pagamento efetuado' INNER JOIN (SELECT MAX(timestamp) as end_time, activity, idcase FROM event_log WHERE activity='Fim da viagem' OR activity= 'Declaração rejeitada pelo funcionário' OR activity='Pagamento efetuado' GROUP by idcase) f ON f.idcase=e.idcase WHERE p.timestamp >= e.start_time ORDER BY p.idcase;
SELECT p.idcase, LEAST( strftime('%s', p.timestamp) - strftime('%s', e.start_time), strftime('%s', x.timestamp) - strftime('%s', e.start_time), strftime('%s', y.timestamp) - strftime('%s', e.start_time) ) AS 'Tempo desde o início do caso até o evento final', CASE WHEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) <= (strftime('%s', x.timestamp) - strftime('%s', e.start_time)) AND strftime('%s', p.timestamp) - strftime('%s', e.start_time) <= (strftime('%s', y.timestamp) - strftime('%s', e.start_time)) THEN 'Fim da viagem' WHEN strftime('%s', x.timestamp) - strftime('%s', e.start_time) <= (strftime('%s', y.timestamp) - strftime('%s', e.start_time)) THEN 'Declaração rejeitada pelo funcionário' ELSE 'Pagamento efetuado' END AS 'Atividade final' FROM event_log p INNER JOIN (SELECT MIN(timestamp) AS start_time, idcase FROM event_log GROUP BY idcase) e ON e.idcase = p.idcase LEFT JOIN event_log x ON x.idcase = e.idcase AND x.activity = 'Declaração rejeitada pelo funcionário' LEFT JOIN event_log y ON y.idcase = e.idcase AND y.activity = 'Pagamento efetuado' WHERE p.activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário', 'Pagamento efetuado') ORDER BY p.idcase;
SELECT p.idcase, CASE WHEN x.timestamp IS NOT NULL THEN strftime('%s', x.timestamp) - strftime('%s', e.start_time) WHEN y.timestamp IS NOT NULL THEN strftime('%s', y.timestamp) - strftime('%s', e.start_time) ELSE strftime('%s', p.timestamp) - strftime('%s', e.start_time) END AS tempo_decorrido, f.activity FROM event_log p INNER JOIN (SELECT MIN(timestamp) AS start_time, idcase FROM event_log GROUP BY idcase) e ON e.idcase = p.idcase LEFT JOIN event_log x ON x.idcase = e.idcase AND x.activity = 'Declaração rejeitada pelo funcionário' LEFT JOIN event_log y ON y.idcase = e.idcase AND y.activity = 'Pagamento efetuado' INNER JOIN (SELECT MAX(timestamp) AS end_time, activity, idcase FROM event_log WHERE activity='Fim da viagem' OR activity= 'Declaração rejeitada pelo funcionário' OR activity='Pagamento efetuado' GROUP BY idcase) f ON f.idcase = e.idcase WHERE p.activity = 'Fim da viagem' OR x.activity IS NOT NULL OR y.activity IS NOT NULL ORDER BY p.idcase;
SELECT p.idcase, strftime('%s', p.timestamp) - strftime('%s', e.start_time) as 'Tempo de processamento', f.activity as 'Finalização' FROM event_log p INNER JOIN (SELECT idcase, MIN(timestamp) as start_time FROM event_log GROUP BY idcase) e ON e.idcase = p.idcase LEFT JOIN (SELECT idcase, activity, MAX(timestamp) as end_time FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' OR activity = 'Pagamento efetuado' GROUP BY idcase, activity) f ON f.idcase = p.idcase AND (p.timestamp <= f.end_time OR (p.activity = 'Fim da viagem' OR p.activity = 'Declaração rejeitada pelo funcionário' OR p.activity = 'Pagamento efetuado')) ORDER BY p.idcase;
SELECT el1.idcase, strftime('%s', el2.timestamp) - strftime('%s', el1.timestamp) AS 'Tempo desde a primeira intervenção', el2.activity AS 'Ultima atividade' FROM event_log el1 INNER JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity IN ('início da viagem', 'declaração enviada', 'pagamento solicitado') AND el2.activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado') ORDER BY el1.idcase, el1.timestamp;
SELECT p.idcase, (strftime('%s', p.timestamp) - strftime('%s', e.start_time)) as 'Tempo desde o início do caso', (strftime('%s', p.timestamp) - strftime('%s', e.start_time)) - (strftime('%s', x.timestamp) - strftime('%s', e.start_time)) as 'Tempo até declaração rejeitada pelo funcionário', (strftime('%s', p.timestamp) - strftime('%s', e.start_time)) - (strftime('%s', y.timestamp) - strftime('%s', e.start_time)) as 'Tempo até pagamento efetuado' FROM event_log p INNER JOIN ( SELECT MIN(timestamp) as start_time, idcase FROM event_log GROUP BY idcase ) e ON e.idcase = p.idcase LEFT JOIN event_log x ON x.idcase = e.idcase AND x.activity = 'Declaração rejeitada pelo funcionário' LEFT JOIN event_log y ON y.idcase = e.idcase AND y.activity = 'Pagamento efetuado' WHERE p.activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário', 'Pagamento efetuado') ORDER BY p.idcase;
SELECT p.idcase, p.activity, strftime('%s', p.timestamp) - strftime('%s', e.start_time) as 'Tempo decorrido' FROM event_log p INNER JOIN (SELECT idcase, MIN(timestamp) as start_time FROM event_log GROUP BY idcase) e ON e.idcase = p.idcase WHERE p.activity = 'Fim da viagem' OR p.activity = 'Declaração rejeitada pelo funcionário' OR p.activity = 'Pagamento efetuado' ORDER BY p.idcase, p.activity;
SELECT p.idcase, strftime('%s', p.timestamp) - strftime('%s', e.start_time) as 'Tempo decorrido', p.activity as 'Atividade final' FROM event_log p INNER JOIN (SELECT MIN(timestamp) as start_time, idcase FROM event_log GROUP BY idcase) e ON e.idcase = p.idcase WHERE p.activity = 'Fim da viagem' OR p.activity = 'Declaração rejeitada pelo funcionário' OR p.activity = 'Pagamento efetuado' ORDER BY p.idcase;
SELECT p.idcase, p.activity, strftime('%s', p.timestamp) - strftime('%s', e.start_time) as tempo_decorrido FROM event_log p INNER JOIN (SELECT idcase, MIN(timestamp) as start_time FROM event_log GROUP BY idcase) e ON e.idcase = p.idcase WHERE p.activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário', 'Pagamento efetuado') AND p.timestamp > e.start_time
SELECT idcase, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'Início da viagem' AND idcase = event_log.idcase), (SELECT MAX(CASE WHEN activity = 'Fim da viagem' THEN timestamp ELSE NULL END) FROM event_log WHERE idcase = event_log.idcase) ) AS tempo_processamento FROM event_log GROUP BY idcase
SELECT * FROM event_log WHERE activity = 'Requisição de pagamento'
A resposta para a pergunta "Existem registros da atividade'requisição de pagamento' no log de eventos? Se sim, mostre os dados dos eventos associados aos registros." é: SELECT * FROM event_log WHERE activity = 'Requisição de pagamento'; Essa consulta retorna todos os registros da tabela "event_log" onde a coluna "activity" tem o valor 'Requisição de pagamento'. Se houver registros com essa atividade, a consulta retorna os dados desses registros.
SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento'
Aqui está a resposta para a última pergunta: /* Responda o seguinte: Existem intervenções que façam a requisição de pagamento para declarações? Havendo, informe os dados da execução desta intervenção. */ SELECT * FROM event_log WHERE activity = 'Requisição de pagamento' AND idcase IN (SELECT idcase FROM event_log WHERE activity = 'Fim da viagem'); Essa query verifica se existem intervenções que façam a requisição de pagamento para declarações, e se sim, retorna os dados dessas intervenções. A condição `idcase IN (SELECT idcase FROM event_log WHERE activity = 'Fim da viagem')` garante que apenas as declarações que tiveram um registro de "Fim da viagem" sejam consideradas.
SELECT AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(timestamp, timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT AVG(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS avg_duration, activity FROM event_log GROUP BY activity
SELECT AVG(TIMESTAMPDIFF(SECOND, timestamp, timestamp)) AS average_duration, activity FROM event_log GROUP BY activity;
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity;
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS average_duration, activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT activity, AVG(timestamp - LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log;
SELECT AVG(timestamp - LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) AS avg_duration FROM event_log WHERE activity IS NOT NULL GROUP BY activity;
SELECT activity, AVG(timestamp - LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) AS avg_duration FROM event_log GROUP BY activity
Para responder à pergunta "Informe quanto dura, em média, cada atividade", você pode utilizar a função AVG() para calcular a média do tempo de duração de cada atividade. No entanto, o esquema de banco de dados fornecido não inclui uma coluna para o tempo de duração. Portanto, você precisaria adicionar essa coluna ao esquema ou utilizar uma coluna que contenha informações sobre o tempo de duração, como a coluna "timestamp". Suponha que a coluna "timestamp" contenha a hora e minuto em que a atividade foi executada. Você pode calcular a média do tempo de duração de cada atividade utilizando a seguinte consulta: SELECT AVG(DATEDIFF(SECOND, '1970-01-01 00:00:00', timestamp)) AS average_duration, activity FROM event_log GROUP BY activity Essa consulta utiliza a função DATEDIFF() para calcular a diferença entre a hora atual e a hora de início da atividade, convertendo o resultado para segundos. Em seguida, a função AVG() é utilizada para calcular a média desse valor para cada atividade. Lembre-se de que a coluna "timestamp" deve ser no formato de data e hora que o banco de dados suporte. Além disso, a função DATEDIFF() pode variar dependendo do banco de dados utilizado.
SELECT activity, AVG(DATEDIFF(MAX(timestamp), MIN(timestamp))) AS average_duration FROM event_log GROUP BY activity
SELECT AVG(DATEDIFF(SECOND, timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration, activity FROM event_log GROUP BY activity
SELECT AVG(TIMESTAMPDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) / 3600.0) AS avg_duration, activity FROM event_log GROUP BY activity
SELECT AVG(TIMESTAMPDIFF(SECOND, timestamp, timestamp)) AS avg_duration, activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) / 3600) AS average_duration, activity FROM event_log GROUP BY activity;
A resposta é: SELECT AVG(cost) AS average_cost, activity FROM event_log GROUP BY activity; Essa consulta retorna a média do custo (ou duração) de cada atividade, agrupada por atividade. O resultado é uma lista com a média do custo e a atividade correspondente.
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity;
SELECT activity, AVG(DATEDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase ORDER BY max_cost DESC;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ORDER BY total_cost DESC LIMIT 1;
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ORDER BY total_cost DESC LIMIT 1;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ORDER BY total_cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT activity, MAX(cost) AS max_cost FROM event_log GROUP BY activity ORDER BY max_cost DESC;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING SUM(cost) = (SELECT MAX(cost) FROM event_log) Essa query agrupa os casos pelo idcase e soma o custo de cada grupo. Em seguida, ela seleciona os grupos cujo custo é igual ao custo mais alto (obtido com a função MAX).
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
Para responder ao questionário, você pode usar as seguintes consultas SQL: 1. Qual é o valor médio dos custos associados aos eventos? SELECT AVG (cost) FROM event_log 2. Selecione os cinco eventos com os custos mais altos. SELECT * FROM event_log WHERE cost IN (SELECT DISTINCT cost FROM event_log ORDER BY cost DESC LIMIT 5) 3. Qual é o maior valor de custo de evento existente no log de eventos? SELECT MAX(cost) FROM event_log 4. Apresente o custo de cada evento e a atividade executada, ordenando pelo custo do evento. select cost, activity from event_log order by cost 5. Liste os valores dos atributos dos cinco eventos de custos mais altos. SELECT * FROM event_log WHERE cost IN (SELECT DISTINCT cost FROM event_log ORDER BY cost DESC LIMIT 5) 6. Apresente os eventos cujo valor de custo é o mais alto. SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log) Essas consultas devem fornecer as respostas desejadas.
A resposta é: SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log) Essa query seleciona todos os eventos (todas as linhas da tabela `event_log`) cujo valor de custo (`cost`) é igual ao máximo custo (`MAX(cost)`) encontrado na tabela.
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC LIMIT 1;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING SUM(cost) = (SELECT MAX(cost) FROM event_log) Essa query seleciona os casos (idcase) que têm um custo igual ao maior custo já registrado no log de eventos.
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
Para responder às suas perguntas, vou fornecer as respostas SQL correspondentes. **1. Qual é a média de custo dos eventos associados a atividades que não são nomeadas como 'início da viagem' e 'fim da viagem'?** SELECT AVG(cost) FROM event_log WHERE activity!= 'Início da viagem' AND activity!= 'Fim da viagem'; **2. Liste os eventos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem' no mesmo caso.** select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp; **3. Para cada caso, liste os eventos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem'.** select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp; **4. Liste os eventos dos casos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem'.** select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp; **5. Listar os eventos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem' no mesmo caso.** select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp; **6. Liste os eventos, com seus respectivos atributos, que referem à atividade 'início da viagem'.** SELECT * FROM event_log WHERE activity = 'Início da viagem';
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
A resposta é: SELECT * FROM event_log WHERE activity = 'Início da viagem';
Aqui está a resposta: SELECT * FROM event_log WHERE activity = 'Início da viagem';
Aqui está a resposta: SELECT * FROM event_log WHERE activity = 'Início da viagem';
A resposta é: SELECT * FROM event_log WHERE activity = 'Início da viagem';
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
A resposta é: SELECT * FROM event_log WHERE activity = 'Início da viagem';
A resposta é: SELECT * FROM event_log WHERE activity = 'Início da viagem'
Aqui está a resposta: SELECT * FROM event_log WHERE activity = 'Início da viagem';
SELECT * FROM event_log WHERE activity = 'Início da viagem';
SELECT * FROM event_log WHERE activity = 'Início da viagem';
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity = 'Início da viagem' Essa consulta seleciona todas as linhas da tabela "event_log" onde a coluna "activity" tem o valor "Início da viagem", o que significa que apenas as intervenções que geraram um registro de início da viagem serão retornadas.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity = 'Início da viagem'; Essa consulta seleciona todos os registros da tabela "event_log" onde a coluna "activity" tem o valor 'Início da viagem', o que descreve as intervenções que determinam o início de uma viagem.
SELECT activity, COUNT(*) as total_registers FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS count FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity
Para cada atividade, qual a quantidade de eventos relacionados à sua execução? SELECT activity, COUNT(*) as quantidade_eventos FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as quantidade_eventos FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as quantidade_eventos FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity ORDER BY num_events DESC;
A resposta é: SELECT COUNT(DISTINCT idcase), activity FROM event_log GROUP BY activity Essa query contabiliza a quantidade de vezes que cada atividade foi executada, considerando apenas uma execução por caso (idcase).
SELECT activity, COUNT(*) AS num_execucoes FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS count_actions FROM event_log GROUP BY activity ORDER BY count_actions DESC;
SELECT activity, COUNT(*) as quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_interventions FROM event_log GROUP BY activity ORDER BY total_interventions DESC;
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity
SELECT COUNT(*) AS total_interventions, activity FROM event_log GROUP BY activity
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost DESC;
SELECT activity, cost FROM event_log ORDER BY cost;
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
SELECT cost, activity FROM event_log ORDER BY cost;
Aqui está a resposta: SELECT activity, cost, timestamp FROM event_log ORDER BY cost DESC; Este comando seleciona as colunas "activity", "cost" e "timestamp" do banco de dados "event_log". Em seguida, ordena o resultado em ordem decrescente (do maior para o menor) pela coluna "cost". Isso fornecerá um relatório que informa quanto custou cada intervenção realizada sobre as declarações, adicionando a informação sobre a qual ação cada intervenção se refere, e apresenta o relatório ordenado pelo custo em ordem decrescente.
SELECT resource, SUM(cost) AS total_cost FROM event_log GROUP BY resource ORDER BY total_cost DESC;
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
Aqui estão as respostas para os exemplos de SQL fornecidos: 1. Qual é a quantidade de casos cujo primeiro evento está associado a uma atividade com nome iniciando com 'permissão'? Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 2. Liste os casos nos quais há mais de um registro de evento associado a atividade cujo nome inicia com 'permissão'. Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` 3. Quantas vezes atividades 'permissão' foram executadas em cada caso? Resposta: `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` 4. Informe a quantidade de casos nos quais o primeiro evento está associado a uma atividade cujo rótulo inicia com a palavra 'permissão'. Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 5. Quantos eventos associados à atividades de 'permissão' estão registrados para cada caso no log de eventos? Resposta: `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` 6. Quais são os eventos associados à execução da atividade 'permissão'? Liste todos os atributos dos eventos. Resposta: `SELECT * FROM event_log WHERE activity LIKE '%permissão%'` Observações: * Em todos os exemplos, o operador `LIKE` é usado para filtrar as atividades que começam com a palavra 'permissão'. * Em alguns exemplos, o operador `MIN` é usado para obter o primeiro evento associado a cada caso. * Em alguns exemplos, o operador `GROUP BY` é usado para agrupar os resultados por caso. * Em alguns exemplos, o operador `HAVING` é usado para filtrar os resultados agrupados.
Aqui estão as respostas para os exemplos de SQL fornecidos: 1. Qual é a quantidade de casos cujo primeiro evento está associado a uma atividade com nome iniciando com 'permissão'? Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 2. Liste os casos nos quais há mais de um registro de evento associado a atividade cujo nome inicia com 'permissão'. Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` 3. Informe a quantidade de casos nos quais o primeiro evento está associado a uma atividade cujo rótulo inicia com a palavra 'permissão'. Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 4. Quantas vezes atividades 'permissão' foram executadas em cada caso? Resposta: `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` 5. Quantos eventos associados à atividades de 'permissão' estão registrados para cada caso no log de eventos? Resposta: `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` 6. Quais são os eventos associados à execução da atividade 'permissão'? Liste todos os atributos de cada evento. Resposta: `SELECT * FROM event_log WHERE activity LIKE '%permissão%'` Observações: * Em todos os exemplos, o operador `LIKE` é usado para filtrar as atividades que começam com a palavra 'permissão'. * Em alguns exemplos, o operador `MIN` é usado para obter o primeiro evento associado a cada caso. * Em alguns exemplos, o operador `GROUP BY` é usado para agrupar os casos por idcase e contar o número de eventos associados a cada caso. * Em todos os exemplos, o operador `SELECT` é usado para selecionar os dados desejados.
SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'
SELECT el.id, el.activity, el.timestamp, el.resource, el.cost, el.idcase FROM event_log el WHERE el.activity LIKE '%permissão%' ORDER BY el.timestamp;
Based on the provided SQL examples and the given database schema, I'll try to answer the last question: "O que caracteriza os eventos associados à execução da atividade 'permissão'?" The answer is not a simple SQL query, but rather a description of the characteristics of the events associated with the execution of the 'permissão' activity. From the SQL examples, we can infer that the events associated with the 'permissão' activity have the following characteristics: * They have an activity name that starts with the string 'permissão' (e.g., 'permissão_x', 'permissão_y', etc.). * They are associated with a specific case, identified by the 'idcase' column. * They have a timestamp, which represents the time when the event occurred. * They may have a resource associated with them, identified by the'resource' column. * They may have a cost associated with them, identified by the 'cost' column. In summary, the events associated with the 'permissão' activity are characterized by their activity name, case ID, timestamp, resource, and cost.
Aqui estão as respostas para os exemplos de SQL fornecidos: 1. Qual é a quantidade de casos cujo primeiro evento está associado a uma atividade com nome iniciando com 'permissão'? Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 2. Informe a quantidade de casos nos quais o primeiro evento está associado a uma atividade cujo rótulo inicia com a palavra 'permissão'. Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 3. Liste os casos nos quais há mais de um registro de evento associado a atividade cujo nome inicia com 'permissão'. Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` 4. Quantas ocorrências de atividades de 'permissão' existem em cada um dos casos? Resposta: `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` 5. Quantas vezes atividades 'permissão' foram executadas em cada caso? Resposta: `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` 6. Mostre os valores dos atributos dos eventos associados à atividade 'permissão'. Resposta: `SELECT * FROM event_log WHERE activity LIKE '%permissão%'` Observações: * Em todos os exemplos, o uso de `LIKE` com `%` é utilizado para buscar atividades cujo nome inicia com 'permissão'. * Em alguns exemplos, é utilizado um subquery para agrupar os dados por caso e encontrar o primeiro evento associado a uma atividade. * Em outro exemplo, é utilizado o operador `HAVING` para filtrar os resultados e apenas mostrar os casos que têm mais de um registro de evento associado a atividade cujo nome inicia com 'permissão'.
SELECT * FROM event_log WHERE activity LIKE '%permissão%'
SELECT activity, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP BY activity;
Para responder à pergunta, você pode executar a seguinte consulta SQL: SELECT activity, idcase, resource, cost FROM event_log WHERE activity LIKE '%permissao%' Essa consulta seleciona as informações associadas às intervenções de permissão, incluindo a atividade, o ID da declaração, o recurso utilizado e o custo da intervenção. O LIKE '%permissao%' é usado para filtrar as linhas que contenham a palavra "permissao" na coluna "activity".
A resposta é: SELECT MAX(cost) FROM event_log
SELECT MAX(cost) FROM event_log
A resposta é: SELECT MAX(cost) FROM event_log
SELECT MAX(cost) FROM event_log
SELECT MAX(cost) AS maior_custo FROM event_log;
A resposta é: SELECT MAX(cost) FROM event_log Essa consulta retorna o valor máximo da coluna "cost" da tabela "event_log", o que representa o valor gasto na intervenção mais cara já registrada durante o processamento das declarações.
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas'
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas'
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas'
SELECT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas'
SELECT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas' GROUP BY idcase HAVING COUNT(DISTINCT resource) = 2;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas';
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa query contabiliza o número de vezes que cada recurso foi responsável pela execução de uma atividade nomeada 'declaração rejeitada pela administração'.
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contará o número de vezes que cada recurso foi responsável por executar a atividade "Declaração rejeitada pela administração".
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contará o número de vezes que cada recurso foi responsável pela execução de uma atividade nomeada como 'declaração rejeitada pela administração'.
A resposta é: SELECT COUNT(DISTINCT resource) AS quantidade_de_recurso, resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource; Essa consulta contabiliza a quantidade de recursos que estiveram associados à execução da atividade 'Declaração rejeitada pela administração', sem considerar a quantidade de vezes que cada recurso foi associado a essa atividade.
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contabiliza o número de vezes que cada recurso esteve associado à execução da atividade "Declaração rejeitada pela administração".
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contará o número de vezes que cada recurso esteve associado à execução da atividade 'declaração rejeitada pela administração'.
A resposta é: SELECT COUNT(*), resource, idcase FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY idcase, resource Essa query retorna a contagem de eventos associados a uma 'declaração rejeitada pela administração' para cada recurso e caso específico.
SELECT resource, COUNT(*) as count_rejections FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource
A resposta é a mesma para todos os exemplos: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Este comando SQL seleciona todas as linhas da tabela `event_log` onde a coluna `activity` tem o valor `'Declaração rejeitada pela administração'`, e then agrupa essas linhas pelo valor da coluna `resource`. O `COUNT(*)` retorna o número de linhas que atendem a essa condição para cada recurso.
SELECT resource, idcase, COUNT(*) AS count FROM event_log WHERE activity LIKE 'Declaração rejeitada pela administração%' GROUP BY resource, idcase
A resposta é: SELECT COUNT(*), resource, idcase FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase Essa consulta retorna a quantidade de vezes que cada recurso esteve associado à execução de uma atividade nomeada como 'declaração rejeitada pela administração', agrupada por recurso e caso.
SELECT resource, idcase, COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT resource, idcase, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
A resposta é: SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta seleciona a coluna "resource" e a contagem de linhas (COUNT(*)) para cada recurso que esteve associado à execução de uma atividade nomeada como 'Declaração rejeitada pela administração'. O GROUP BY resource agrupa as linhas por recurso, permitindo que sejam calculadas as contagens para cada recurso.
A pergunta é bem clara! A resposta é a mesma que as outras: `SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource` Este comando SQL faz o seguinte: 1. Seleciona todas as linhas da tabela `event_log` onde a coluna `activity` tem o valor `'Declaração rejeitada pela administração'`. 2. Conta o número de linhas que atendem a essa condição para cada recurso (coluna `resource`) e armazena esse valor em uma coluna chamada `COUNT(*)`. 3. Agrupa as linhas por recurso (coluna `resource`) usando o comando `GROUP BY`. O resultado será uma tabela com dois colunas: `COUNT(*)` e `resource`. A coluna `COUNT(*)` mostrará o número de instâncias de execução da atividade nomeada 'declaração rejeitada pela administração' para cada recurso, e a coluna `resource` mostrará o nome do recurso correspondente.
SELECT resource, idcase, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT resource, idcase, COUNT(*) AS count_events FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT resource, COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem')
/* Responda o seguinte: Recupere os atributos dos cinco eventos de custos mais altos. */ SELECT * FROM event_log ORDER BY cost DESC LIMIT 5
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log) ORDER BY cost DESC LIMIT 5;
SELECT activity, resource, cost FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
/* Responda o seguinte: Faça um relatório que organize os dados referentes às cinco intervenções mais caras já registradas. */ SELECT * FROM event_log ORDER BY cost DESC LIMIT 5
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5
SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC LIMIT 5;
Para responder à pergunta, você precisaria ordenar as intervenções por custo em ordem decrescente e limitar o resultado a apenas as cinco intervenções mais custosas. Você pode fazer isso com a seguinte consulta: SELECT * FROM event_log ORDER BY cost DESC LIMIT 5 Essa consulta ordena as intervenções por custo em ordem decrescente (mais custosas primeiro) e limita o resultado a apenas as cinco intervenções mais custosas.
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 Essa query agrupa os casos pelo campo "idcase" e verifica se o número de eventos (ou linhas) para cada caso é maior que 1.
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 Essa query seleciona os casos (idcase) que possuem mais de um evento registrado no log de eventos.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT id) > 1 Essa consulta agrupa os casos pelo campo "idcase" e conta o número de IDs únicos (ou seja, o número de eventos) para cada caso. A condição HAVING COUNT(DISTINCT id) > 1 seleciona apenas os casos que têm mais de um evento.
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT DISTINCT activity FROM event_log GROUP BY activity, idcase HAVING count(activity) > 3
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
A resposta é: SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
Responda o seguinte: Informe os eventos, e seus atributos, ocorridos nas datas '2018-10-01' e '2018-10-02'. SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT activity, COUNT(*) FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(strftime('%Y-%m-%d', timestamp)) BETWEEN '2018-10-01' AND '2018-10-02') GROUP BY activity
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE strftime('%Y-%m-%d', timestamp) IN ('2018-10-01', '2018-10-02')
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE strftime('%Y-%m-%d', timestamp) IN ('2018-10-01', '2018-10-02');
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02' AND idcase IS NOT NULL;
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02' AND idcase IS NOT NULL;
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%' ORDER BY timestamp;
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%' AND activity!= 'Fim da viagem'
SELECT name, activity FROM event_log WHERE resource IN ( SELECT resource FROM event_log WHERE name LIKE 'M%' ) ORDER BY name, activity;
SELECT * FROM event_log WHERE UPPER(resource) LIKE 'M%';
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT activity, idcase, COUNT(*) as num_events FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3
SELECT DISTINCT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT activity FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity, COUNT(*) AS occurrences FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT activity, idcase, COUNT(*) as num_events FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT activity FROM ( SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3 ) as subquery
select activity from event_log where idcase = 'declaração 49464' except select activity from event_log where idcase = 'declaração 76667'
Based on the provided SQL examples and the given database schema, I'll answer the questions: 1. O que ocorreu na declaração 49464 que não ocorreu na declaração 76667? The answer is not provided in the SQL examples, but it can be inferred that the `except` operator is used to find the activities that occurred in one case but not in the other. The result will be a list of activities that are unique to case 'declaração 49464'. 2. Quais atividades existentes no caso 'declaração 49464' não acontecem no caso 'declaração 76667'? The answer is the same as the previous question. The `except` operator is used to find the activities that occurred in case 'declaração 49464' but not in case 'declaração 76667'. 3. Quantos recursos diferentes trabalharam em cada caso e qual é o custo deste caso? The answer is provided in the SQL example: `SELECT COUNT(DISTINCT resource), SUM(cost), idcase FROM event_log GROUP BY idcase`. This query returns the count of distinct resources, the total cost, and the case ID. 4. Recupere o nome das atividades que fizeram parte do caso 'declaração 49464' e não fizeram parte do caso 'declaração 76667'. The answer is the same as the previous questions. The `except` operator is used to find the activities that occurred in case 'declaração 49464' but not in case 'declaração 76667'. 5. Informe o número de casos nos quais cada recurso trabalhou. The answer is provided in the SQL example: `SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource`. This query returns the count of distinct cases and the resource. 6. Qual é o tamanho do trace associado ao case 'declaração 56300'? The answer is not provided in the SQL examples, but it can be inferred that the `SELECT` statement is used to retrieve the size of the trace associated with case 'declaração 56300'. However, the `event_log` table does not have a column to store the size of the trace, so this question cannot be answered based on the provided information.
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) AS num_events FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300'
select activity from event_log where idcase = 'declaração 49464' except select activity from event_log where idcase = 'declaração 76667'
A resposta é: SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1 Essa query seleciona as atividades que foram executadas mais de uma vez antes de 10/01/2017 e retorna a atividade e a frequência com que ela foi executada.
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS num_executions FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1
Here is the answer: SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1 This query will list the activities that were executed more than once before October 1st, 2017, along with the frequency of each activity.
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity
SELECT activity, count(*) FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING count(*) > 1
SELECT resource, COUNT(DISTINCT idcase) as casos FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource Essa query retorna o número de casos (idcase) para os quais cada recurso (resource) foi alocado. O COUNT(DISTINCT idcase) é usado para contar o número de casos únicos para cada recurso.
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(idcase) as num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource; Essa query contabiliza o número de eventos em que cada recurso atuou, agrupando os resultados por recurso.
SELECT COUNT(DISTINCT id) as "Número de vezes", resource FROM event_log GROUP BY resource
A resposta para a pergunta "Quantas vezes um recurso atuou?" é: SELECT COUNT(*) AS total_atuacoes, resource FROM event_log GROUP BY resource Essa consulta contará o número de vezes que cada recurso atuou, agrupando os resultados por recurso.
A quantos eventos cada recurso foi associado? SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource; Essa query retorna a lista de recursos e o número de eventos associados a cada recurso.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource Essa consulta contará o número de ocorrências para cada recurso na tabela "event_log". O resultado será uma lista com o nome do recurso e o número de ocorrências para cada recurso.
SELECT resource, COUNT(*) AS num_executions FROM event_log GROUP BY resource ORDER BY resource;
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT resource, COUNT(*) as num_occurrences FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource Essa consulta seleciona todos os recursos que atuaram na atividade "Declaração requisitada pelo funcionário" e conta o número de vezes que cada recurso atuou. O resultado é um conjunto de linhas com o nome do recurso e o número de ocorrências.
A resposta para a pergunta final é: SELECT resource, COUNT(*) AS num_intervencoes FROM event_log GROUP BY resource Essa consulta contabiliza o número de intervenções feitas por cada funcionário (representado pela coluna "resource") e retorna um relatório com a contagem de intervenções por funcionário.
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT idcase FROM event_log WHERE resource = 'Sara' INTERSECT SELECT idcase FROM event_log WHERE resource = 'Thomas';
SELECT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara')
SELECT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara')
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas', 'Diana');
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
Aqui está a resposta: SELECT resource, COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS casos FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) para cada recurso, considerando apenas os eventos que ocorreram entre 1/5/2017 e 1/6/2017.
SELECT COUNT(DISTINCT activity), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource Essa query retorna a contagem de casos únicos (idcase) para cada recurso, considerando apenas os eventos que ocorreram entre 1/5/2017 e 1/6/2017.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp between '2017-05-01' and '2017-06-01' GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource Essa query contabiliza a quantidade de declarações processadas (idcase) para cada recurso (resource) entre 1/5/2017 e 1/6/2017.
A resposta é: SELECT COUNT(DISTINCT idcase) FROM event_log WHERE timestamp between '2017-05-01' and '2017-06-01' GROUP BY resource Essa query contabiliza o número de casos (idcase) para cada recurso (resource) que ocorreram entre 1/5/2017 e 1/6/2017.
A resposta é: SELECT COUNT(DISTINCT idcase) AS casos, resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource; Essa consulta contará o número de casos únicos (idcase) para cada recurso, considerando apenas os eventos que ocorreram entre 1/5/2017 e 1/6/2017.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp between '2017-05-01' and '2017-06-01' GROUP BY resource Essa query contabiliza a quantidade de declarações (idcase) para cada recurso (resource) que sofreu alguma intervenção entre 1/5/2017 e 1/6/2017.
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') GROUP BY activity, resource
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa')
SELECT DISTINCT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') ORDER BY activity, resource;
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') ORDER BY activity, resource;
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') ORDER BY activity, resource;
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) AND idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' )
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) AND idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' )
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado'))
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado')
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' EXCEPT SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado';
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) AND (activity LIKE '%início da viagem%' OR activity LIKE '%fim da viagem%')
Aqui está a resposta para o problema: SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) Essa consulta seleciona as declarações de viagens (idcase) que têm uma marcação de fim da viagem, mas não têm uma marcação de requisição de pagamento ou pagamento efetuado associada.
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado'))
SELECT * FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL OR resource = ''
SELECT activity FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL
SELECT activity FROM event_log WHERE resource IS NULL
SELECT * FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL OR resource = ''
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01' ORDER BY idcase;
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01'
SELECT DISTINCT idcase FROM event_log WHERE activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING MIN(timestamp) < '2017-03-01' )
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01'
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01'
Here is the answer: SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase HAVING MIN(timestamp) IS NOT NULL; This query uses the `MIN` aggregation function to find the earliest timestamp for each `idcase`, and then filters the results to only include those where the earliest timestamp is before March 1st, 2017. The `IS NOT NULL` clause is used to ensure that the `MIN` function returns a valid result, even if there are no earlier timestamps for a particular `idcase`.
A resposta é: SELECT idcase FROM event_log WHERE timestamp < '2017-03-01' Essa consulta seleciona as declarações (idcase) que começaram a ser processadas antes de março de 2017, baseado na coluna timestamp do evento_log.
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase HAVING MIN(timestamp) = (SELECT MIN(timestamp) FROM event_log WHERE timestamp < '2017-03-01')
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase HAVING COUNT(*) > 0
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp LIKE '2017-03-%'
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp LIKE '2017-03-%'
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y-%m', timestamp) = '2017-03' ORDER BY timestamp ASC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp = ( SELECT MIN(timestamp) FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' GROUP BY idcase )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31'
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-12-31'
SELECT resource FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 ) GROUP BY resource HAVING COUNT(*) > 5 ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 5 ) GROUP BY resource;
SELECT resource, count(*) FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING count(*) > 5;
SELECT resource, COUNT(*) FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 5) GROUP BY resource HAVING COUNT(*) > 5
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5 ORDER BY num_events DESC;
SELECT resource, idcase, COUNT(*) AS num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 5 ) GROUP BY resource, idcase
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5
SELECT resource FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 5;
SELECT resource, idcase, COUNT(*) as num_atuacoes FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 5;
SELECT activity FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 5;
Here is the answer: SELECT resource FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 10; This query will return the 10 resources that most frequently acted in the activity 'Declaração final aprovada pelo supervisor', in descending order of frequency.
SELECT resource FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 10;
SELECT resource, COUNT(*) AS aprovações FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY aprovações DESC LIMIT 10;
SELECT resource, COUNT(*) FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY COUNT(*) DESC;
Aqui está a resposta: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY frequency DESC; Essa query lista todos os recursos em ordem decrescente, considerando o número de vezes em que cada um foi associado à execução da atividade 'declaração final aprovada pelo supervisor'.
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY frequency DESC;
Here is the answer: SELECT resource FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY COUNT(*) DESC This query will present the resources present in the event log, ordered by the number of times each resource acted in the activity 'Declaração final aprovada pelo supervisor', in descending order.
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC;
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie')
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugine', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugine', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' AND resource IN ('Eugene', 'Marie') AND activity LIKE '%aprovada%';
SELECT activity FROM event_log WHERE idcase = 'declaração 49464' EXCEPT SELECT activity FROM event_log WHERE idcase = 'declaração 76667'
SELECT activity FROM event_log WHERE idcase = 'declaração 49464' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase = 'declaração 76667' )
SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaração 49464' EXCEPT SELECT DISTINCT activity FROM event_log WHERE idcase = 'declaração 76667';
SELECT * FROM event_log WHERE idcase = 'declaração 56300';
SELECT resource, COUNT(*) AS num_times FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2 ORDER BY resource;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2 ORDER BY resource;
SELECT resource, count(*) as frequency FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING count(*) > 2 ORDER BY resource;
A resposta é: SELECT resource, COUNT(*) FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2 Essa query seleciona os recursos que atuaram mais do que duas vezes na atividade 'Declaração requisitada pelo funcionário', e retorna o nome do recurso e o número de vezes em que essa atuação ocorreu.
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2
SELECT resource, COUNT(*) as "Quantidade de requisições" FROM event_log WHERE activity = 'Requisição de declaração' GROUP BY resource HAVING COUNT(*) > 2
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp >= '2017-05-01' AND timestamp < '2017-05-11';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp >= '2017-05-01 00:00:00' AND timestamp < '2017-05-11 00:00:00'
Here is the answer: SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
Aqui está a resposta: SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10' Essa consulta recupera os identificadores dos casos nos quais eventos associados à execução da atividade'requisição de pagamento' ocorreram entre '2017-05-01' e '2017-05-10'.
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10'
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity = 'Requisição de pagamento' AND e.timestamp BETWEEN '2017-05-01' AND '2017-05-10' ORDER BY e.timestamp DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) as num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY num_resources DESC;
SELECT COUNT(DISTINCT resource), idcase FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND resource = 'Christopher'
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND MAX(resource) = 'Christopher'
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND resource = 'Christopher'
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE resource = 'Christopher');
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = 1
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = 1
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE resource = 'Christopher' AND idcase = event_log.idcase)
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = 1
SELECT idcase, count(distinct resource) FROM event_log group by idcase
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT id) = (SELECT COUNT(*) FROM event_log WHERE idcase = idcase)
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1
A resposta é: SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase) Essa query agrupa as atividades por caso e recurso, e verifica se todas as atividades de um caso foram executadas pelo mesmo recurso.
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT id) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1
Para responder ao questionário, você pode utilizar as seguintes consultas SQL: /* Responda o seguinte: Informe atividades que estão associadas a mais do que três eventos por caso? */ SELECT DISTINCT activity FROM event_log GROUP BY activity, idcase HAVING count(activity) > 3 Essa consulta agrupa as atividades por caso e verifica se a contagem de atividades para cada caso é maior que 3. /* Responda o seguinte: Informe atividades que estão associadas a mais do que cinco eventos? */ SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5 Essa consulta agrupa as atividades e verifica se a contagem de atividades para cada atividade é maior que 5. /* Responda o seguinte: Recupere todas as informações dos eventos que possuem um custo associado. */ SELECT * FROM event_log WHERE cost IS NOT NULL Essa consulta seleciona todas as linhas da tabela event_log onde o campo cost não é nulo. /* Responda o seguinte: Quais são os cinco casos com mais eventos associados e qual é a duração de cada um desses casos? */ select strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)), idcase FROM event_log where idcase in (select idcase from event_log group by idcase having count(*) IN (select count(*) from event_log group by idcase order by count(*) desc limit 5)) group by idcase Essa consulta primeiro seleciona os 5 casos com mais eventos associados, e em seguida, para cada um desses casos, calcula a duração como a diferença entre o timestamp máximo e o timestamp mínimo. /* Responda o seguinte: Selecione todos os eventos que possuem um custo associado. */ SELECT * FROM event_log WHERE cost IS NOT NULL Essa consulta é a mesma da anterior, pois está selecionando todas as linhas da tabela event_log onde o campo cost não é nulo. /* Responda o seguinte: Informe os casos que estão associados a múltiplos eventos em um dia? */ SELECT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1 Essa consulta agrupa os casos por caso e por data, e verifica se a contagem de eventos para cada caso e data é maior que 1. Isso significa que o caso está associado a múltiplos eventos em um dia.
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE timestamp >= DATE('now', '-1 day') GROUP BY idcase HAVING COUNT(*) > 1;
A resposta é: SELECT idcase, timestamp FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1 ) Essa query lista as declarações que passaram por mais de uma intervenção em um mesmo dia. Ela agrupa as declarações por idcase e data de timestamp, e filtra apenas as que têm mais de uma intervenção no mesmo dia.
SELECT idcase FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase, DATE_TRUNC('day', timestamp) HAVING COUNT(*) > 1;
SELECT resource, idcase, COUNT(*) FROM event_log WHERE cost IS NULL GROUP BY resource, idcase;
SELECT idcase, resource, COUNT(*) FROM event_log WHERE cost IS NULL GROUP BY idcase, resource
SELECT resource, idcase, COUNT(*) FROM event_log WHERE cost IS NULL GROUP BY resource, idcase
SELECT idcase, resource, COUNT(*) AS num_null_cost_events FROM event_log WHERE cost IS NULL GROUP BY idcase, resource
SELECT resource, idcase, COUNT(*) AS num_events FROM event_log WHERE cost IS NULL GROUP BY resource, idcase
SELECT resource, idcase, COUNT(*) AS num_events FROM event_log WHERE cost IS NULL GROUP BY resource, idcase
SELECT resource, COUNT(*) as num_intervencoes_sem_custo FROM event_log WHERE cost = 0 GROUP BY resource
SELECT resource, COUNT(*) AS num_intervencoes_sem_custo FROM event_log WHERE cost = 0 GROUP BY resource
SELECT * FROM event_log WHERE activity = 'permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor' Essa consulta seleciona todos os registros (ou seja, todos os eventos) da tabela "event_log" onde a coluna "activity" tem o valor 'Permissão rejeitada pelo diretor'.
SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor';
Para responder à pergunta, você pode utilizar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor' Essa consulta seleciona todos os registros (ou seja, todos os eventos) da tabela "event_log" onde a coluna "activity" tem o valor "Permissão rejeitada pelo diretor".
Aqui está a resposta: SELECT * FROM event_log WHERE activity = 'Permissão final rejeitada pelo diretor' Essa consulta seleciona todas as linhas da tabela `event_log` onde a coluna `activity` tem o valor 'Permissão final rejeitada pelo diretor'.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity LIKE '%rejeitada pelo diretor%' Essa consulta busca todas as linhas na tabela "event_log" onde a coluna "activity" contém a string "rejeitada pelo diretor", o que indica que a permissão foi rejeitada por um diretor.
SELECT strftime('%Y-%m-%d', timestamp) AS event_day, SUM(cost) AS total_cost FROM event_log GROUP BY strftime('%Y-%m-%d', timestamp)
SELECT strftime('%Y-%m-%d', timestamp) AS event_day, SUM(cost) AS total_cost FROM event_log GROUP BY event_day
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(1) AS eventos FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT strftime('%Y-%m-%d', timestamp) AS event_day, SUM(cost) AS total_cost FROM event_log GROUP BY strftime('%Y-%m-%d', timestamp)
WITH RankedEvents AS (SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log) SELECT idcase, coalesce((strftime('%s', next_timestamp) - strftime('%s', timestamp)),0) as duration FROM RankedEvents WHERE activity='Declaração aprovada pelo supervisor'
SELECT activity, cost FROM event_log WHERE activity LIKE '%supervisor%' OR activity LIKE '%diretor%' AND cost > 1000;
SELECT activity FROM event_log WHERE cost > 1000 AND (activity LIKE '%supervisor%' OR activity LIKE '%diretor%')
Aqui está a resposta: SELECT activity, cost FROM event_log WHERE activity LIKE '%supervisor%' OR activity LIKE '%diretor%' AND cost > 1000; Essa consulta lista as atividades que foram executadas por supervisores ou diretores e cujo custo foi superior a 1000.
/* Responda o seguinte: Quais as ações que tem custo maior que 1000 e necessitam de um supervisor ou de um diretor? */ SELECT * FROM event_log WHERE cost > 1000 AND (activity LIKE '%supervisor%' OR activity LIKE '%diretor%'); /* Explicação: A query seleciona todas as linhas da tabela event_log onde o custo é maior que 1000 e a atividade contém a palavra'supervisor' ou 'diretor'. Isso porque as ações que necessitam de um supervisor ou de um diretor devem ter essas palavras na descrição da atividade.
WITH RankedEvents AS (SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log) SELECT idcase, coalesce((strftime('%s', next_timestamp) - strftime('%s', timestamp)),0) as duration FROM RankedEvents WHERE activity='Declaração aprovada pelo supervisor'
SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase
A resposta é: SELECT count(*), idcase FROM event_log GROUP BY idcase; Essa consulta contará o número de eventos (ou linhas) em cada caso (ou grupo) e exibirá o resultado em uma tabela com duas colunas: a primeira coluna será o número de eventos e a segunda coluna será o idcase.
A resposta para a última pergunta é: SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase; Essa consulta retorna um resultado com dois campos: "idcase" e "events_count". O campo "idcase" contém o identificador do caso, e o campo "events_count" contém a quantidade de eventos associados a cada caso. Se você quiser obter apenas os casos com mais de 20 eventos, você pode adicionar uma cláusula WHERE à consulta: SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase HAVING COUNT(*) > 20; Essa consulta retorna apenas os casos que têm mais de 20 eventos.
A resposta é: SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase; Essa consulta lista a quantidade de eventos associados a cada caso, utilizando a função COUNT(*) para contar o número de linhas para cada grupo de idcase.
A resposta é: SELECT COUNT(*), idcase FROM event_log GROUP BY idcase; Essa query contabiliza o número de eventos (ou linhas) em cada instância de processo (idcase) e retorna o resultado em uma tabela com duas colunas: a contagem de eventos e o idcase.
A resposta é: SELECT idcase, count(*) FROM event_log group by idcase
SELECT resource, COUNT(*) as num_tasks FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_tasks FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource Essa query retorna a quantidade de atividades associadas a cada um dos recursos, agrupando os resultados por recurso.
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as num_actions FROM event_log GROUP BY resource
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log WHERE idcase LIKE '%Alexis%' GROUP BY idcase
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log WHERE idcase LIKE '%Alexis%' GROUP BY idcase
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log WHERE idcase = 'Alexis' GROUP BY idcase
SELECT COUNT(DISTINCT idcase), activity FROM event_log GROUP BY activity
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log WHERE resource = 'Alexis' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE resource = 'Alexis' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_tasks, COUNT(DISTINCT id) AS num_instances FROM event_log WHERE resource = 'Alexis' GROUP BY idcase
SELECT activity from event_log GROUP BY activity HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY activity ORDER BY COUNT(*) desc LIMIT 1)
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM event_log WHERE activity = 'início da viagem' AND idcase = event_log.idcase AND timestamp > event_log.timestamp )
WITH RankedEvents AS ( SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log ) SELECT COUNT(*) FROM RankedEvents WHERE activity = 'Permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM RankedEvents AS prev_event WHERE prev_event.idcase = RankedEvents.idcase AND prev_event.activity = 'Início da viagem' AND prev_event.next_timestamp <= RankedEvents.timestamp )
WITH RankedEvents AS ( SELECT id, activity, timestamp, LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_activity, idcase FROM event_log ) SELECT COUNT(*) AS casos FROM RankedEvents WHERE activity = 'Início da viagem' AND next_activity = 'permissão final aprovada pelo supervisor'
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' AND timestamp < (SELECT timestamp FROM event_log WHERE activity = 'Início da viagem')
WITH RankedEvents AS ( SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log ) SELECT COUNT(*) FROM RankedEvents WHERE activity = 'Início da viagem' AND timestamp > ( SELECT timestamp FROM RankedEvents WHERE activity = 'Permissão final aprovada pelo supervisor' AND idcase = RankedEvents.idcase ) AND idcase IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo supervisor' AND id > (SELECT id FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' ORDER BY timestamp LIMIT 1);
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' AND id < ( SELECT id FROM event_log WHERE activity = 'Viagem iniciada' )
SELECT COUNT(*) FROM event_log JOIN case ON event_log.idcase = case.id WHERE activity = 'Permissão final aprovada pelo supervisor' AND timestamp < (SELECT timestamp FROM case WHERE status = 'início da viagem')
SELECT activity, resource, idcase FROM event_log AS e1 WHERE activity = 'Fim da viagem' AND timestamp!= '2017-12-12'
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 WHERE e1.activity = 'Fim da viagem' AND (e1.timestamp < '2017-12-12' OR e1.timestamp > '2017-12-12')
select DISTINCT idcase FROM (select idcase, timestamp, activity FROM event_log GROUP BY idcase HAVING strftime('%Y-%m', MIN(timestamp)) = '2017-03') where activity = 'Início da viagem'
SELECT * FROM event_log WHERE activity = 'Fim da viagem' AND timestamp <= '2017-12-12' OR timestamp > '2017-12-12'
Here is the SQL query to answer the question: SELECT * FROM event_log WHERE activity = 'Fim da viagem' AND timestamp NOT LIKE '%2017-12-12%'; This query selects all columns (`*`) from the `event_log` table where the `activity` is 'Fim da viagem' and the `timestamp` does not contain the date '2017-12-12'.
SELECT id, activity, timestamp, resource FROM event_log WHERE activity = 'Fim da viagem' AND timestamp NOT LIKE '%2017-12-12%'
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND timestamp < '2017-12-13 00:00:00'; -- dia 12 de dezembro de 2017
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource; Essa query contabiliza o número de eventos em que cada recurso atuou, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS quantidade_eventos, resource FROM event_log GROUP BY resource; Essa consulta contará o número de eventos em que cada recurso atuou e exibirá o resultado em uma coluna chamada "quantidade_eventos".
SELECT COUNT(*), resource FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT id), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT COUNT(*), responsible FROM event_log GROUP BY responsible
SELECT COUNT(DISTINCT activity), resource FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT activity), resource FROM event_log GROUP BY resource Essa query contabiliza a quantidade de atividades únicas (DISTINCT) em que cada recurso atuou, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(DISTINCT activity), resource FROM event_log GROUP BY resource Essa query contabiliza a quantidade de atividades diferentes em que cada recurso trabalhou, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(DISTINCT activity), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) as num_actions FROM event_log GROUP BY resource
SELECT activity FROM activity_list WHERE activity NOT IN ( SELECT activity FROM event_log WHERE resource = 'Virginia' )
SELECT DISTINCT activity FROM event_log WHERE resource!= 'Virginia'
SELECT activity FROM event_log WHERE idcase NOT LIKE '%Virginia%'
SELECT activity FROM event_log WHERE idcase = 'Virginia' AND activity NOT IN ( SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 0 )
SELECT activity FROM event_log WHERE resource NOT IN ( SELECT resource FROM event_log WHERE idcase = 'Virginia' ) GROUP BY activity
Based on the SQL queries provided, the following actions had to be executed more than once: 1. In the query `SELECT DISTINCT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1`, an action had to be executed more than once for each `idcase` that has multiple activities. 2. In the query `SELECT DISTINCT activity FROM event_log GROUP BY activity, idcase HAVING count(activity) > 3`, an action had to be executed more than three times for each `idcase` that has more than three occurrences of that activity. The other queries do not require an action to be executed more than once. As for the last query, it is incomplete and does not provide enough information to answer the question. However, based on the schema provided, it seems that the query is trying to find which activities Virginia has no experience with. To answer this question, we would need to know which activities Virginia has experience with and which ones she does not.
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY idcase;
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity LIKE '%rejeitada%'
SELECT AVG(cost) FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY idcase;
SELECT AVG(cost) FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY idcase
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY idcase;
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity ='rejeição';
SELECT AVG(cost) FROM event_log WHERE activity IN (SELECT activity FROM event_log WHERE activity LIKE '%REJEITADA%')
Baseado nos exemplos de SQL fornecidos, aqui estão as respostas para as perguntas: 1. Em quais casos a atividade 'declaração rejeitada pelo supervisor' foi executada? Forneça a resposta em ordem temporal ascendente em relação ao início do caso. SELECT DISTINCT e1.idcase FROM event_log e1 inner join (SELECT idcase, MIN(timestamp) as timestamp FROM event_log GROUP BY idcase order by timestamp) AS e2 on e1.idcase=e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER by e2.timestamp 2. Em quais casos a atividade 'declaração rejeitada pelo supervisor' foi executada? Forneça a resposta por ordem de data em relação ao início do caso. SELECT DISTINCT e1.idcase FROM event_log e1 inner join (SELECT idcase, MIN(timestamp) as timestamp FROM event_log GROUP BY idcase order by timestamp) AS e2 on e1.idcase=e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER by e2.timestamp 3. Qual a quantidade de casos que passaram pela atividade 'declaração rejeitada pelo supervisor' e quais os recursos associado às execuções dessas atividades? SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource 4. Em quais instâncias de processo a atividade 'declaração rejeitada pelo supervisor' foi executada? Forneça a resposta em ordem temporal ascendente em relação ao início do processo. SELECT DISTINCT e1.idcase FROM event_log e1 inner join (SELECT idcase, MIN(timestamp) as timestamp FROM event_log GROUP BY idcase order by timestamp) AS e2 on e1.idcase=e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER by e2.timestamp 5. Quantas vezes a atividade 'declaração aprovada pelo supervisor' e a atividade 'permissão rejeitada pelo funcionário' foram executadas, considerando respectivamente os anos de 2017 e 2018? SELECT activity, count(*) FROM event_log WHERE activity = 'Declaração aprovada pelo supervisor' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity UNION SELECT activity, count(*) FROM event_log WHERE activity = 'Permissão rejeitada pelo funcionário' AND timestamp BETWEEN '2018-01-01' AND '2019-01-01' GROUP BY activity 6. Qual foi o tempo de duração da atividade 'declaração aprovada pelo supervisor' em cada caso? SELECT... (não há uma resposta fornecida para essa pergunta)
SELECT idcase, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE idcase = e1.idcase AND activity = 'Declaração aprovada pelo supervisor'), (SELECT MAX(timestamp) FROM event_log WHERE idcase = e1.idcase AND activity = 'Declaração aprovada pelo supervisor')) AS duration FROM event_log e1 WHERE activity = 'Declaração aprovada pelo supervisor' GROUP BY idcase
SELECT DISTINCT e1.idcase FROM event_log e1 INNER JOIN ( SELECT idcase, MIN(timestamp) AS timestamp FROM event_log GROUP BY idcase ORDER BY timestamp ) AS e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER BY e2.timestamp;
SELECT DISTINCT e1.idcase FROM event_log e1 inner join (SELECT idcase, MIN(timestamp) as timestamp FROM event_log GROUP BY idcase order by timestamp) AS e2 on e1.idcase=e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER by e2.timestamp
SELECT idcase, TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS duration FROM event_log WHERE activity = 'Declaração aprovada pelo supervisor' GROUP BY idcase ORDER BY idcase;
SELECT activity, COUNT(*) AS count FROM event_log WHERE activity LIKE '%aprovada pelo supervisor%' GROUP BY activity ORDER BY count DESC;
SELECT idcase, MAX(CASE WHEN activity = 'Declaração aprovada pelo supervisor' THEN timestamp END) - MIN(CASE WHEN activity = 'Declaração enviada' THEN timestamp END) AS time_to_approval FROM event_log WHERE activity IN ('Declaração enviada', 'Declaração aprovada pelo supervisor') GROUP BY idcase
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'; Essa consulta contará o número de linhas na tabela "event_log" onde a coluna "activity" tem o valor "Declaração rejeitada pelo pré-aprovador", o que representa o número de vezes que essa atividade foi executada.
A resposta é: SELECT COUNT (*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' Essa query contará o número de linhas na tabela "event_log" onde a coluna "activity" tem o valor 'Declaração rejeitada pelo pré-aprovador'.
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'; Essa consulta contará o número de linhas na tabela "event_log" onde a coluna "activity" tem o valor 'Declaração rejeitada pelo pré-aprovador', o que representa o número de vezes que essa atividade ocorreu.
SELECT COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'; Essa consulta contará o número de ocorrências da atividade 'Declaração rejeitada pelo pré-aprovador' no banco de dados.
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'
SELECT e1.idcase, e1.timestamp, e1.resource FROM event_log AS e1 WHERE e1.activity = 'Fim da viagem' ORDER BY e1.resource
SELECT idcase, timestamp, resource FROM event_log WHERE activity = 'Fim da viagem' ORDER BY resource
Here is the answer: SELECT e1.idcase, e1.timestamp, e1.resource FROM event_log AS e1 WHERE e1.activity = 'Fim da viagem' ORDER BY e1.resource, e1.timestamp; This query will return a list of cases where the activity 'Fim da viagem' occurred, along with the timestamp and resource associated with each event. The results will be ordered by resource and then by timestamp.
/* Responda o seguinte: Quais casos passaram pela atividade 'fim da viagem' e em que data? Ordene a resposta por recurso associado à ocorrência da atividade. */ SELECT e1.idcase, e1.timestamp, e1.resource FROM event_log AS e1 WHERE e1.activity = 'Fim da viagem' ORDER BY e1.resource
SELECT e1.idcase, e1.resource, e1.timestamp FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' ORDER BY e1.resource;
SELECT e1.idcase, strftime('%Y-%m-%d', e2.timestamp) as 'Data de finalização da viagem', e2.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' ORDER BY e2.resource;
SELECT count (*), idcase FROM event_log group by idcase
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase
SELECT count (*), idcase FROM event_log group by idcase
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS event_count FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS num_actions FROM event_log GROUP BY idcase
SELECT COUNT(*) AS num_intervencoes, idcase FROM event_log GROUP BY idcase
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS quantidade FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS quantidade_casos FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(*) FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(strftime('%Y-%m-%d', timestamp)) BETWEEN '2017-05-02' AND '2017-05-12')
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-05-02' AND '2017-05-12' AND activity = 'Final da viagem';
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC;
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC;
SELECT id, activity, resource, timestamp FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp
SELECT el.idcase, el.resource, el.activity, el.timestamp FROM event_log el WHERE el.activity = 'Envio de lembrete' ORDER BY el.timestamp DESC;
SELECT idcase, id, resource, timestamp FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC;
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC;
SELECT idcase, resource, id, timestamp AS "Data de envio", (SELECT MAX(timestamp) FROM event_log WHERE activity = 'Lembrete enviado') AS "Data de finalização" FROM event_log WHERE activity = 'Lembrete enviado' ORDER BY "Data de finalização";
Aqui estão as respostas para as perguntas fornecidas: 1. Liste os casos e o recurso nos quais as atividades foram todas alocadas para um mesmo recurso. SELECT idcase, resource from event_log group by idcase HAVING COUNT(DISTINCT resource) = 1 Essa query agrupa os casos por idcase e verifica se há apenas um recurso associado a cada caso. Se sim, retorna os casos e recursos. 2. Quantas ocorrências de atividades foram atribuídas para cada recurso? Liste em ordem alfabética do recurso. SELECT resource, COUNT(*) FROM event_log GROUP BY resource Essa query agrupa os recursos por resource e conta o número de ocorrências de atividades associadas a cada recurso. 3. Quantas são as ocorrências de atividade quando agrupadas por recurso? Ordene a resposta por ordem alfabética do nome do recurso. SELECT resource, COUNT(*) FROM event_log GROUP BY resource Essa query é idêntica à query 2, mas não há necessidade de ordenar a resposta por ordem alfabética do nome do recurso, pois a coluna resource já está ordenada por padrão. 4. Informe o número de ocorrências da atuação de um recurso. SELECT COUNT(*), resource FROM event_log GROUP BY resource Essa query agrupa os recursos por resource e conta o número de ocorrências de atividades associadas a cada recurso. 5. Liste todos os recursos que atuaram mais de cinco vezes em um mesmo caso e informe em quantos eventos ele atuou. SELECT DISTINCT resource FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5 Essa query agrupa os recursos por resource e idcase, e verifica se o número de ocorrências de atividades associadas a cada recurso e caso é maior que 5. Se sim, retorna os recursos e o número de ocorrências. 6. Liste todos os recursos em ordem alfabética e sem repetições. SELECT DISTINCT resource FROM event_log ORDER BY resource Essa query retorna todos os recursos únicos da tabela event_log, ordenados em ordem alfabética.
A resposta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC
A resposta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC; Essa query lista todos os recursos (ou seja, os valores únicos da coluna "resource") em ordem alfabética, utilizando a função DISTINCT para remover duplicados e a função ORDER BY para ordenar os resultados.
A resposta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC; Essa consulta utiliza a função `DISTINCT` para remover duplicados e ordena os resultados em ordem alfabética utilizando a função `ORDER BY`.
Aqui está a resposta: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC
A resposta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC; Essa query lista os nomes dos recursos registrados no log de eventos, sem repetições, em ordem alfabética.
SELECT DISTINCT resource AS "Funcionário" FROM event_log ORDER BY "Funcionário" ASC;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200
SELECT resource, COUNT(DISTINCT idcase) AS num_instances FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) > 200;
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log Essa consulta contará o número de recursos únicos presentes no log de eventos.
Para responder à pergunta "Quantos recursos estão registrados no log de eventos?", você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT resource) FROM event_log Essa consulta contará o número de recursos únicos presentes no log de eventos.
SELECT COUNT(DISTINCT resource) FROM event_log
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT resource) AS num_people FROM event_log;
Para responder à pergunta "Quantas pessoas estão associadas à execução de atividades no log de eventos?", precisamos considerar que o esquema de banco de dados não inclui uma coluna para identificar as pessoas. Portanto, não é possível responder essa pergunta com base nos dados fornecidos. No entanto, se você tiver uma coluna adicional no esquema de banco de dados que identifique as pessoas, por exemplo, uma coluna chamada "user", você poderia usar a seguinte consulta para obter o resultado: SELECT COUNT(DISTINCT user) FROM event_log Essa consulta contará o número de usuários únicos que estão associados à execução de atividades no log de eventos.
SELECT COUNT(DISTINCT resource) FROM event_log WHERE idcase LIKE '%declaração%';
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE activity LIKE '%tratamento de declarações%';
SELECT COUNT(DISTINCT resource) FROM event_log
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
A resposta é: SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%' Este comando utiliza a cláusula `LIKE` para buscar atividades que contenham a palavra 'declaração' em seu nome. O caractere `%` é um wildcard que representa zero ou mais caracteres, então `'%declaração%'` busca atividades que contenham a palavra 'declaração' em qualquer posição do nome.
SELECT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT idcase, activity FROM event_log WHERE activity LIKE '%declaração%' GROUP BY idcase, activity
Based on the provided SQL examples, the most common actions in processing declarations are: 1. **Counting the frequency of actions**: This is evident in the first example, where the query counts the number of times each activity occurs and returns the most frequent one. 2. **Filtering actions**: The second example shows how to filter actions that start with a specific letter ('E' in this case). 3. **Identifying consecutive actions**: The third example uses window functions to identify consecutive actions performed by different resources (i.e., employees) for the same case. 4. **Retrieving specific information**: The fourth example retrieves a list of resources (employees) that have saved a declaration. 5. **Ranking actions by frequency**: The fifth example returns the top 10 cases with the most actions executed during their processing. 6. **Searching for specific keywords**: The last example is a simple query that retrieves actions with a label containing the word 'declaração'. These actions are common in processing declarations, such as tracking the frequency of actions, filtering specific actions, identifying consecutive actions, retrieving information about specific resources, ranking actions by frequency, and searching for specific keywords.
SELECT activity, AVG(cost) AS avg_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS avg_cost FROM event_log GROUP BY activity
A resposta é: SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity; Essa query agrupa as atividades pelo campo "activity" e calcula a média do campo "cost" para cada grupo.
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity;
SELECT activity, AVG(cost) AS avg_cost FROM event_log GROUP BY activity
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE idcase IS NOT NULL AND cost IS NULL; Essa consulta contará o número de casos que não possuem custo (ou seja, o campo cost é nulo).
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log GROUP BY idcase HAVING SUM(cost) > 0)
SELECT COUNT(*) AS num_cases_without_cost FROM event_log WHERE cost IS NULL OR cost = 0;
SELECT COUNT(idcase) FROM event_log WHERE cost = 0 GROUP BY idcase
Para responder à pergunta, você precisa contar o número de linhas na tabela "event_log" onde o custo é nulo. Você pode fazer isso com a seguinte consulta: SELECT COUNT(*) FROM event_log WHERE cost IS NULL; Isso contará o número de linhas na tabela "event_log" onde o custo é nulo.
SELECT COUNT(*) FROM event_log WHERE cost IS NULL AND idcase IS NOT NULL
SELECT COUNT(*) FROM event_log WHERE cost IS NULL;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
Aqui está a resposta: SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%' Essa consulta seleciona todas as atividades que contenham a palavra "permissão" ou "declaração" em seu nome.
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
Aqui estão as respostas para as perguntas fornecidas: 1. Quantas vezes atividades 'permissão' foram executadas em cada caso? SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase 2. Quantas ocorrências de atividades de 'permissão' existem em cada um dos casos? SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase 3. Quantas atividades de 'permissão' foram realizadas para cada caso? SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase 4. Em quais casos atividades cujo nome inicia com 'permissão' foram executadas mais de uma vez? select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1 5. Quais casos executaram atividades cujo nome inicia com 'permissão' mais de uma vez? select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1 6. Quais das atividades envolvem ações de 'permissão' ou 'declaração'? SELECT * FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%' Observações: * Em todos os casos, o LIKE é usado para buscar atividades que contenham a palavra 'permissão' (ignorando maiúsculas e minúsculas). * No caso 4 e 5, o HAVING é usado para filtrar os resultados e apenas mostrar os casos que têm mais de uma atividade com o nome que começa com 'permissão'. * No caso 6, o OR é usado para buscar atividades que contenham a palavra 'permissão' ou 'declaração'.
Aqui estão as respostas para as perguntas fornecidas: 1. Quantas atividades de 'permissão' foram realizadas para cada caso? SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase 2. Quantas ocorrências de atividades de 'permissão' existem em cada um dos casos? SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase 3. Quantas vezes atividades 'permissão' foram executadas em cada caso? SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase 4. Para cada caso, informe a quantidade de vezes que uma atividade de 'permissão' foi executada. SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase 5. Em quais casos atividades cujo nome inicia com 'permissão' foram executadas mais de uma vez? select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1 6. Quais das atividades existentes no log que envolvem ações de 'permissão' ou 'declaração'? SELECT * FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%' Observações: * Em todos os exemplos, o LIKE é usado com o operador `%` para buscar atividades que contenham a palavra 'permissão' (ou 'declaração' no caso da última pergunta). * O GROUP BY é usado para agrupar as atividades por caso (idcase). * O HAVING é usado para filtrar os resultados e apenas mostrar os casos que têm mais de uma atividade de 'permissão'. * A pergunta 6 é uma consulta de seleção que retorna todas as linhas do log que contenham a palavra 'permissão' ou 'declaração' no campo activity.
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
Aqui está a resposta: SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'; Essa consulta utiliza a cláusula `LIKE` para procurar por atividades cujo nome contenha a palavra 'permissão' ou 'declaração'. O símbolo `%` é um wildcard que representa zero ou mais caracteres, então `'%permissão%'` procura por atividades que contenham a palavra 'permissão' em qualquer posição.
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
Aqui está a resposta: SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'; Essa consulta utiliza a cláusula `LIKE` para buscar atividades que contenham a palavra 'permissão' ou 'declaração' em seu nome identificador. O símbolo `%` é um wildcard que representa zero ou mais caracteres, então `'%permissão%'` busca atividades que contenham a palavra 'permissão' em qualquer posição.
Based on the provided SQL examples and the given database schema, I'll try to answer the question: "Quais as ações relacionadas a permissões e a declarações explícitas no processo de gerenciamento de declarações?" The actions related to permissions and explicit declarations in the process of managing declarations are: 1. **Permissão rejeitada pelo diretor**: This action is related to a permission being rejected by a director, which implies that a declaration was rejected due to lack of permission. 2. **Permissão final aprovada pelo diretor**: This action is related to a final permission being granted by a director, which implies that a declaration was approved after a permission was granted. 3. **Permissão concedida**: This action is related to a permission being granted, which implies that a declaration was approved. 4. **Permissão rejeitada**: This action is related to a permission being rejected, which implies that a declaration was rejected due to lack of permission. These actions are explicit declarations of permission or rejection, which are essential in the process of managing declarations. The SQL queries provided earlier can be used to extract more information about these actions, such as: * Which declarations received a permission (SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase)? * How many times each declaration received a permission (SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase)? * What are the interventions registered in the processing of declarations related to permission rejection by a director (select * from event_log where activity = 'Permissão rejeitada pelo diretor')? * How many times the processing of declarations required a final permission granted by a director (SELECT count(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor')? These queries can help answer more specific questions about the actions related to permissions and explicit declarations in the process of managing declarations.
SELECT count(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declaração rejeitada pelo diretor%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declaração rejeitada pelo diretor%';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pela administração';
SELECT AVG(cost) AS average_cost FROM event_log;
SELECT AVG(cost) AS average_cost FROM event_log;
SELECT AVG(cost) FROM event_log
SELECT AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT AVG(cost) FROM event_log;
SELECT AVG(cost) AS average_cost FROM event_log WHERE cost IS NOT NULL;
SELECT AVG(cost) AS average_cost, activity FROM event_log GROUP BY activity;
SELECT AVG(cost) AS average_cost FROM event_log;
SELECT AVG(cost) AS average_cost FROM event_log WHERE cost IS NOT NULL;
SELECT AVG(cost) AS average_cost FROM event_log WHERE idcase IS NOT NULL;
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource Essa query contabiliza o número de casos únicos (idcase) para cada recurso (resource) e retorna o resultado agrupado por recurso.
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase) AS num_cases, resource FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Essa query contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter'.
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Essa query contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter', o que significa que Peter foi o responsável por esses eventos.
SELECT COUNT(*) AS quantidade_acoes FROM event_log WHERE resource = 'Peter';
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) > 3
SELECT user FROM event_log GROUP BY user HAVING COUNT(DISTINCT idcase) > 3;
SELECT nome FROM funcionarios WHERE id IN ( SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3 )
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity LIKE '%requisição de pagamento%' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') GROUP BY idcase ORDER BY num_activities ASC;
SELECT idcase, COUNT(*) as num_actions FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_actions;
SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário') ORDER BY timestamp;
Aqui está a resposta: SELECT DISTINCT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC; Essa consulta recupera as datas em que foram registradas a execução das atividades 'fim da viagem' ou 'declaração rejeitada pelo funcionário', ordenando da mais antiga para a mais recente. O DISTINCT é usado para remover duplicados, pois uma mesma data pode ser registrada em diferentes linhas do banco de dados.
SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC;
SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'closed' ORDER BY timestamp ASC;
SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('Fim da viagem', 'Declaração rejeitada por funcionário') ORDER BY timestamp ASC;
SELECT e1.timestamp, e1.resource, e1.activity FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity IN ('Fim da viagem', 'Rejeição de declaração') AND e1.timestamp > e2.timestamp ORDER BY e1.timestamp ASC;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource;
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY resource; Essa query retorna a lista de recursos e a quantidade de execuções de atividades para cada recurso, ordenada por ordem alfabética do nome do recurso.
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY resource; Essa query retorna a quantidade de execuções de atividades para cada recurso, ordenada por ordem alfabética do nome do recurso.
resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY resource ASC
resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY resource ASC
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY resource ASC; Essa consulta retorna a lista de recursos, acompanhada do número de vezes que cada recurso foi responsável pela execução de atividades, ordenada em ordem alfabética pelo nome do recurso.
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY resource; Essa query retorna a quantidade de ocorrências de atividade para cada recurso, agrupadas por recurso, e ordenadas por ordem alfabética do nome do recurso.
A resposta é: SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource ASC; Essa consulta agrupa as linhas do evento_log pela coluna "resource" e conta o número de ocorrências para cada recurso. Em seguida, ordena a resposta em ordem alfabética pelo nome do recurso.
SELECT resource, COUNT(*) as occurrences FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource ORDER BY total_actions DESC;
SELECT activity, count(*) FROM event_log WHERE activity LIKE 'E%' GROUP BY activity;
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT activity FROM event_log WHERE activity LIKE 'E%';
SELECT activity, count(*) FROM event_log WHERE activity LIKE 'E%' GROUP BY activity;
SELECT activity FROM event_log WHERE activity LIKE 'E%' AND activity LIKE '%declaração%';
SELECT activity FROM event_log WHERE activity LIKE 'E%';
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
Here is the SQL query to answer the question: SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400; This query will select all rows from the `event_log` table where the `cost` column is between 50 and 400, and return the `id`, `activity`, `resource`, and `cost` columns for those rows.
Here is the answer: SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost; This SQL query will select the events with a cost between 50 and 400, and return the event ID, activity, resource, and cost. The results will be ordered by the cost of the event.
Aqui está a resposta para o último exemplo: SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost; Essa consulta seleciona todos os eventos cujo custo está entre 50 e 400, e retorna os identificadores de evento, as atividades realizadas, os recursos utilizados e os custos correspondentes. A ordenação é feita pelo custo do evento.
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost;
Aqui está a resposta: SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost; Essa consulta seleciona todos os eventos cujo custo está entre 50 e 400, e retorna o identificador do evento, a atividade realizada, o recurso e o custo de cada um desses eventos.
A resposta é: SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost; Essa consulta seleciona todos os eventos (id, activity, resource e cost) do log de eventos onde o custo está entre 50 e 400. O resultado é ordenado pelo custo do evento.
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost;
A resposta para a pergunta é: SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração salva pelo funcionário'; Essa consulta seleciona todos os recursos únicos (DISTINCT) que estão associados à atividade 'Declaração salva pelo funcionário' no banco de dados.
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração salva pelo funcionário';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração salva'
SELECT DISTINCT resource FROM event_log WHERE activity ='save'
SELECT DISTINCT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity, timestamp FROM event_log WHERE timestamp BETWEEN '2018-04-12 00:00:00' AND '2018-04-12 23:59:59' GROUP BY activity, timestamp
SELECT activity FROM event_log WHERE timestamp = '2018-04-12'
SELECT activity FROM event_log WHERE timestamp = DATE('2018-04-12')
SELECT activity FROM event_log WHERE timestamp = '2018-04-12' GROUP BY activity
SELECT activity FROM event_log WHERE timestamp = (SELECT MAX(timestamp) FROM event_log WHERE strftime('%Y-%m-%d', timestamp) = '2018-04-12');
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT t.name FROM tasks t JOIN event_log e ON t.idcase = e.idcase WHERE e.activity IN (SELECT activity FROM event_log WHERE strftime('%Y-%m-%d', timestamp) = '2018-04-12') AND e.activity!= 'Fim da viagem';
Aqui está a resposta: SELECT e.id, e.activity, e.timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp; Essa consulta seleciona o identificador do evento (id), a atividade associada (activity) e a data de término da execução (timestamp) de todos os eventos associados às atividades 'permissão final aprovada pelo supervisor' ou 'declaração aprovada pelo supervisor', e ordena o resultado por data de término.
SELECT e.id, e.activity, e.timestamp AS end_timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp;
Aqui está a resposta: SELECT e.id, e.activity, e.timestamp AS "data de término" FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp; Essa consulta seleciona os eventos associados às atividades 'Permissão final aprovada pelo supervisor' ou 'Declaração aprovada pelo supervisor', e retorna o identificador do evento, a atividade associada e a data de término da execução de cada um deles. A ordenação é feita pela data de término.
SELECT e.id, e.activity, e.timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp DESC;
SELECT e.id, e.activity, e.timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp;
Aqui está a resposta: SELECT e.id, e.activity, e.timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp DESC; Essa consulta seleciona todos os eventos (id, activity e timestamp) da tabela event_log onde a atividade é 'Permissão final aprovada pelo supervisor' ou 'Declaração aprovada pelo supervisor'. Em seguida, ordena os resultados pela data de término da execução (timestamp) em ordem decrescente.
SELECT count(DISTINCT e1.idcase) FROM event_log e1 INNER JOIN event_log e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Permissão final aprovada pelo supervisor' AND e2.activity = 'Início da viagem' AND e1.timestamp < e2.timestamp
SELECT id, activity, timestamp FROM event_log WHERE activity LIKE '%aprovação final de uma permissão%' OR activity LIKE '%aprovação de uma declaração por um supervisor%' ORDER BY timestamp;
A resposta é: SELECT * FROM event_log WHERE cost IS NOT NULL
A resposta é: SELECT * FROM event_log WHERE cost IS NOT NULL
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todas as linhas da tabela "event_log" onde o campo "cost" tem um valor não nulo, o que significa que há um custo associado àquela linha.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todas as linhas da tabela "event_log" onde o campo "cost" tem um valor não nulo, o que significa que há um custo associado àquela atividade.
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL Essa consulta seleciona todos os eventos que possuem um custo associado, ou seja, os eventos que têm um valor não nulo na coluna "cost".
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL Essa consulta seleciona todos os registros da tabela "event_log" onde o campo "cost" não é nulo, ou seja, os eventos que possuem um custo associado.
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT idcase, activity, cost FROM event_log WHERE cost IS NOT NULL ORDER BY idcase;
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) AS num_executions FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final concedida pelo diretor'
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' Essa query contará o número de vezes que a atividade "Declaração final aprovada pelo diretor" foi registrada no banco de dados.
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT timestamp, resource FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp;
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT COUNT(*), resource FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' Essa consulta seleciona todos os registros da tabela "event_log" onde a atividade é "Início da viagem" e o nome do recurso termina com a letra "s".
SELECT timestamp, resource FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp, resource;
SELECT timestamp, resource FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp, resource;
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp;
SELECT DISTINCT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp;
Aqui está a resposta para a última pergunta: SELECT DISTINCT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp; Essa consulta seleciona as datas em que um registro de início de viagem foi registrado por um recurso cujo nome termina com's'. O operador LIKE é usado para filtrar os registros que atendem à condição de que o nome do recurso termine com's'. O ORDER BY é usado para ordenar as datas em ordem ascendente.
Aqui estão as respostas para as perguntas: 1. Liste os 10 recursos que aparecem com maior frequência nas execuções de atividades registradas nos eventos. SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) IN (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 10) Essa query agrupa os recursos pelo número de vezes que eles aparecem nos eventos, e then retorna os 10 recursos que aparecem com maior frequência. 2. Recupere os nomes das atividades e os nomes dos recursos associados a eventos, desconsiderando aqueles em que os recursos Joshua e Teresa estão envolvidos. SELECT activity, resource FROM event_log WHERE resource!= 'Joshua' AND resource!= 'Teresa' Essa query retorna todas as atividades e recursos associados a eventos, exceto aqueles que envolvem Joshua ou Teresa. 3. Informe as atividades e os recursos associados a eventos, desconsiderando aqueles em que os recursos Joshua e Teresa estão envolvidos. SELECT activity, resource FROM event_log WHERE resource!= 'Joshua' AND resource!= 'Teresa' Essa query é idêntica à anterior, mas não há necessidade de especificar que a query deve retornar apenas as atividades e recursos. 4. Recupere o último evento registrado e informe qual a atividade executada e o recurso associado. SELECT resource, activity FROM event_log ORDER BY timestamp DESC LIMIT 1 Essa query ordena os eventos por data e hora em ordem decrescente (ou seja, mais recentes primeiro), e then retorna o evento mais recente, juntamente com a atividade e o recurso associados. 5. Calcule o número de eventos executados por cada recurso que não estejam relacionados à atividade 'fim da viagem'. SELECT COUNT(*), resource FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource Essa query agrupa os recursos pelo número de eventos que eles executaram, exceto aqueles que estão relacionados à atividade 'fim da viagem'. 6. Some os custos dos eventos agrupando por atividade e por recurso. SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource Essa query soma os custos dos eventos para cada atividade e recurso, e then retorna os resultados agrupados.
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT resource, activity, SUM(cost) AS total_cost FROM event_log GROUP BY resource, activity
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
Para responder ao último questionário, você precisará agrupar os dados por "activity" e "resource", e somar o custo total para cada grupo. Aqui está a resposta: SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource ORDER BY total_cost DESC; Essa consulta irá fornecer uma lista de todas as atividades e funcionários, juntamente com o custo total associado a cada uma delas. A lista estará ordenada pelo custo total em ordem decrescente, o que significa que as atividades e funcionários que custaram mais estarão na parte superior da lista.
SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem');
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem')
SELECT COUNT(*), activity FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') GROUP BY activity
SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem');
SELECT activity, COUNT(*) as quantidade FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') GROUP BY activity
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem'); Essa consulta contará o número de ocorrências das atividades 'início da viagem' e 'fim da viagem' no banco de dados.
SELECT COUNT(CASE WHEN activity = 'Início da viagem' THEN 1 ELSE NULL END) AS inicio_viagem, COUNT(CASE WHEN activity = 'Fim da viagem' THEN 1 ELSE NULL END) AS fim_viagem FROM event_log
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem')
SELECT COUNT(CASE WHEN activity = 'Início da viagem' THEN 1 ELSE NULL END) AS 'Início da viagem', COUNT(CASE WHEN activity = 'Fim da viagem' THEN 1 ELSE NULL END) AS 'Fim da viagem' FROM event_log
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT DISTINCT activity FROM event_log GROUP BY activity, idcase HAVING COUNT(activity) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) AS num_registers FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(*), resource FROM (SELECT resource, MIN(timestamp) as first_timestamp from event_log GROUP BY idcase, resource) GROUP BY resource
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT e1.resource, e1.activity FROM event_log AS e1 INNER JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log GROUP BY idcase ) AS e2 ON e1.idcase = e2.idcase AND e1.timestamp = e2.max_timestamp ORDER BY e1.timestamp DESC LIMIT 1;
SELECT e1.idcase, e1.activity, e1.resource, e1.timestamp FROM event_log AS e1 WHERE e1.idcase IN ( SELECT idcase FROM event_log GROUP BY idcase ORDER BY MAX(timestamp) DESC ) ORDER BY e1.timestamp DESC LIMIT 1;
SELECT e1.activity, e1.resource, e1.timestamp FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT el1.* FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el2.activity = 'Fim da viagem' AND el1.timestamp > el2.timestamp WHERE el1.activity = 'Início da viagem'
SELECT e1.*, r.name AS responsible FROM event_log e1 JOIN event_log e2 ON e1.idcase = e2.idcase AND e1.timestamp > e2.timestamp JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log WHERE activity = 'Fim da viagem' GROUP BY idcase ) e3 ON e1.idcase = e3.idcase AND e1.timestamp > e3.max_timestamp JOIN ( SELECT idcase, name FROM resources WHERE resource_type = 'user' ) r ON e1.resource = r.name WHERE e1.activity!= 'Fim da viagem' ORDER BY e1.timestamp;
SELECT e1.id, e1.activity, e1.timestamp, e1.resource, e1.cost, e1.idcase, (SELECT resource FROM event_log WHERE idcase = e1.idcase AND activity = 'Responsável' AND timestamp > e1.timestamp) AS responsible FROM event_log e1 WHERE e1.activity = 'Fim da viagem' ORDER BY e1.idcase, e1.timestamp;
SELECT e1.* FROM event_log AS e1 JOIN event_log AS e2 ON e1.idcase = e2.idcase AND e1.timestamp > e2.timestamp WHERE e2.activity = 'Fim da viagem'
SELECT e1.* FROM event_log AS e1 WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' ) ORDER BY timestamp;
SELECT el1.* FROM event_log el1 JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log WHERE activity = 'Fim da viagem' GROUP BY idcase ) el2 ON el1.idcase = el2.idcase AND el1.timestamp > el2.max_timestamp
SELECT el1.* FROM event_log el1 JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log WHERE activity = 'Fim da viagem' GROUP BY idcase ) el2 ON el1.idcase = el2.idcase AND el1.timestamp > el2.max_timestamp JOIN ( SELECT idcase, id FROM event_log WHERE activity = 'Fim da viagem' ) el3 ON el1.idcase = el3.idcase AND el1.id > el3.id
SELECT el1.* FROM event_log el1 JOIN event_log el2 ON el1.id > el2.id WHERE el2.activity = 'Fim da viagem' ORDER BY el1.timestamp;
SELECT e1.* FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
SELECT e1.idcase, e1.activity, e1.resource, e1.cost, e2.activity AS responsible_activity FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e1.timestamp > e2.timestamp AND e2.activity = 'Fim da viagem' ORDER BY e1.idcase;
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT e1.idcase, e1.resource, e1.activity, e1.timestamp AS timestamp_fim_viagem, e2.activity AS activity_post_fim_viagem, e2.timestamp AS timestamp_post_fim_viagem, e2.resource AS resource_post_fim_viagem FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase AND e1.timestamp < e2.timestamp WHERE e1.activity = 'Fim da viagem' AND e2.activity!= 'Fim da viagem' ORDER BY e1.idcase, e1.timestamp;
SELECT e2.activity, e2.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase AND e1.timestamp < e2.timestamp WHERE e2.activity!= 'Início da viagem' ORDER BY e1.idcase, e2.timestamp;
SELECT e1.idcase, e1.resource, e1.activity FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp ORDER BY e1.idcase, e1.timestamp;
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
select count(*), activity from event_log where activity = 'Início da viagem' or activity = 'Fim da viagem' GROUP BY activity
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, count(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
Here is the answer: SELECT resource, COUNT(*) AS count_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource This query will return the resources that are not responsible for the 'Fim da viagem' activity, along with the count of events executed by each of these resources.
SELECT resource, count(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
Here is the answer: SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_actions FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log WHERE activity = 'Início do caso' ORDER BY timestamp DESC
SELECT idcase FROM event_log WHERE activity = 'Envio de lembrete' GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase, MIN(timestamp) AS first_action_date FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') GROUP BY idcase ORDER BY first_action_date;
SELECT idcase FROM event_log ORDER BY timestamp ASC;
SELECT COUNT(DISTINCT idcase) AS quantidade FROM event_log WHERE activity = 'Requisição de pagamento';
SELECT COUNT(DISTINCT idcase) AS num_instances FROM event_log WHERE activity = 'Requisição de pagamento';
SELECT DISTINCT e.idcase FROM event_log AS e join (SELECT idcase, MIN(timestamp) as start_date FROM event_log GROUP BY idcase) AS e1 ON e1.idcase = e.idcase WHERE e.activity = 'Requisição de pagamento' ORDER BY e1.start_date DESC LIMIT 10
SELECT COUNT(DISTINCT idcase) AS quantidade_casos FROM event_log WHERE activity = 'Requisição de pagamento';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Requisição de pagamento';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Requisição de pagamento'
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Requisição de pagamento'
SELECT idcase FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT e.idcase, e.timestamp FROM event_log e WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as total FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total DESC LIMIT 1;
A resposta é: SELECT resource, COUNT(*) AS quantidade FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY quantidade DESC LIMIT 1; Essa query seleciona a coluna "resource" e a contagem de ocorrências (quantidade) para as linhas da tabela "event_log" onde a atividade é "Declaração aprovada pela administração". Em seguida, agrupa os resultados por recurso e ordena-os em ordem decrescente pela quantidade. Por fim, limita o resultado a apenas uma linha, que é o recurso com a maior quantidade de ocorrências.
SELECT resource, COUNT(*) as total_events FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_work FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_work DESC LIMIT 1;
SELECT resource, COUNT(*) as total_approvals FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_approvals DESC LIMIT 1;
SELECT resource, COUNT(*) as total_aproved FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_aproved DESC LIMIT 1;
SELECT resource, idcase, COUNT(*) FROM (SELECT resource, idcase, ROW_NUMBER() OVER (PARTITION BY resource, idcase ORDER BY timestamp) AS row_num FROM event_log) AS subquery WHERE row_num = 1 GROUP BY resource, idcase
SELECT resource, COUNT(*) FROM event_log WHERE id = (SELECT MIN(id) FROM event_log) GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE id IN ( SELECT MIN(id) FROM event_log GROUP BY idcase, activity ) GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE id = (SELECT MIN(id) FROM event_log WHERE idcase = event_log.idcase) GROUP BY resource
SELECT resource, COUNT(*) AS first_occurrence FROM event_log WHERE id = (SELECT MIN(id) FROM event_log WHERE idcase = event_log.idcase AND resource = event_log.resource) GROUP BY resource
SELECT resource, COUNT(*) AS num_declaracoes FROM event_log WHERE id = (SELECT MIN(id) FROM event_log WHERE resource = event_log.resource) GROUP BY resource
SELECT resource, COUNT(*) AS num_processes FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity NOT LIKE '%rejeitada%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%aprovada%'
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(DISTINCT idcase) AS quantidade_de_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS casos_rejeitados FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp)
SELECT strftime('%Y-%m-%d', timestamp) AS event_day, COUNT(*) FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY event_day
SELECT strftime('%Y-%m-%d', timestamp) AS event_day, COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY event_day
SELECT strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) IN ( SELECT COUNT(*) FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) ) GROUP BY idcase ORDER BY duration DESC LIMIT 5;
SELECT strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) IN ( SELECT COUNT(*) FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) ) GROUP BY idcase;
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 5;
SELECT count (*), idcase FROM event_log group by idcase
SELECT idcase, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_duration FROM event_log GROUP BY idcase ORDER BY total_duration DESC LIMIT 5;
SELECT strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) IN ( SELECT COUNT(*) FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) ) GROUP BY idcase ORDER BY duration DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) IN ( SELECT COUNT(*) FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) ) GROUP BY idcase ORDER BY duration DESC;
SELECT idcase, COUNT(*) AS num_actions, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_time FROM event_log GROUP BY idcase ORDER BY num_actions DESC LIMIT 5;
SELECT idcase, SUM(cost) AS total_cost, AVG(cost) AS avg_cost FROM event_log GROUP BY idcase ORDER BY total_cost DESC LIMIT 5;
SELECT strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase ORDER BY duration DESC;
SELECT idcase, COUNT(*) as events_count, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) as duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase ORDER BY events_count DESC;
SELECT idcase, MAX(timestamp) AS max_timestamp, MIN(timestamp) AS min_timestamp FROM event_log GROUP BY idcase HAVING COUNT(*) > 20 ORDER BY COUNT(*) DESC LIMIT 5;
SELECT idcase, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY total_duration DESC LIMIT 5;
Aqui está a resposta: SELECT strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20 ) GROUP BY idcase ORDER BY duration DESC LIMIT 5;
SELECT strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 5;
SELECT idcase, MAX(strftime('%s', timestamp)) - MIN(strftime('%s', timestamp)) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY duration DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, COUNT(*) AS num_actions FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY num_actions DESC LIMIT 5;
SELECT idcase FROM event_log WHERE activity!= 'Requisição de pagamento' AND activity!= 'Pagamento efetuado' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase, timestamp FROM event_log WHERE activity!= 'Requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE activity!= 'Requisição de pagamento' AND activity!= 'Pagamento efetuado' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado') ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE NOT EXISTS ( SELECT 1 FROM event_log WHERE activity = 'Requisição de pagamento' AND idcase = event_log.idcase ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado') ORDER BY timestamp DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento') ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10;
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10 Essa consulta agrupa os casos pelo campo "idcase" e conta o número de eventos executados para cada caso. Em seguida, ela filtra os casos que tiveram dez ou menos eventos executados, usando a cláusula HAVING com a condição COUNT(*) <= 10.
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase FROM event_log GROUP BY idcase HAVING count(*) <= 10
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10 Essa consulta agrupa os casos pelo campo "idcase" e filtra os resultados para incluir apenas os casos que possuem até 10 eventos (ou seja, a contagem de eventos é menor ou igual a 10).
SELECT idcase, COUNT(*) as num_actions FROM event_log GROUP BY idcase HAVING COUNT(*) >= 10
A resposta para a pergunta "Quais declarações tiveram 10 eventos ou menos?" é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10 Essa consulta agrupa as declarações pelo campo "idcase" e filtra as que tiveram 10 eventos ou menos.
SELECT AVG(cost) FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS custo_medio FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01';
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01 00:00:00' AND DATE(timestamp) <= DATE('2017-12-31 23:59:59');
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01';
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01';
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
Aqui estão as respostas para as perguntas: 1. Em quais casos atividades cujo nome inicia com 'permissão' foram executadas mais de uma vez? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query retorna os casos (idcase) que têm mais de uma atividade cujo nome inicia com 'permissão'. 2. Quais casos executaram atividades cujo nome inicia com 'permissão' mais de uma vez? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query também retorna os casos (idcase) que têm mais de uma atividade cujo nome inicia com 'permissão'. 3. Quais casos possuem mais de uma atividade cujo nome inicia com 'permissão'? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query também retorna os casos (idcase) que têm mais de uma atividade cujo nome inicia com 'permissão'. 4. Para quais casos há mais de um registro da execução de atividades cujo nome inicia com 'permissão'? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query também retorna os casos (idcase) que têm mais de uma atividade cujo nome inicia com 'permissão'. 5. Quais casos possuem duas ou mais atividades cujo nome inicia com 'permissão'? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query também retorna os casos (idcase) que têm mais de uma atividade cujo nome inicia com 'permissão'. 6. Quantas vezes atividades 'permissão' foram executadas em cada caso? Resposta: `SELECT idcase, COUNT(*) AS count_permissao FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase` Essa query retorna os casos (idcase) e a contagem de vezes que atividades cujo nome inicia com 'permissão' foram executadas em cada caso.
SELECT idcase, COUNT(*) as quantidade FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) as count_permissao FROM event_log WHERE activity LIKE 'permissao%' GROUP BY idcase
SELECT idcase, COUNT(*) AS quantidade_registros FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase
Aqui estão as respostas para os exemplos de SQL fornecidos: 1. Para quais casos há mais de um registro da execução de atividades cujo nome inicia com 'permissão'? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query agrupa os registros do evento_log por idcase e conta quantos registros há para cada grupo. A condição `HAVING count(*) > 1` filtra apenas os grupos que têm mais de um registro. 2. Quais casos executaram atividades cujo nome inicia com 'permissão' mais de uma vez? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query é a mesma da resposta anterior. 3. Liste os casos nos quais há mais de um registro de evento associado a atividade cujo nome inicia com 'permissão'. Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query é a mesma da resposta anterior. 4. Em quais casos atividades cujo nome inicia com 'permissão' foram executadas mais de uma vez? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query é a mesma da resposta anterior. 5. A atividade 'permissão' está associada a quais eventos? Liste os valores dos atributos desses eventos. Resposta: `SELECT * FROM event_log WHERE activity LIKE '%permissão%'` Essa query retorna todos os registros do evento_log onde a atividade começa com 'permissão'. 6. Liste, para cada caso, quantos registros sobre a execução de atividades 'permissão' existem. Resposta: `SELECT idcase, COUNT(*) AS count FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase` Essa query agrupa os registros do evento_log por idcase e conta quantos registros há para cada grupo, apenas para as atividades que começam com 'permissão'.
SELECT idcase, count(*) as ocorrencias FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) as count_perm FROM event_log WHERE activity LIKE 'Permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) AS permission_count FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT COUNT(DISTINCT idcase) AS num_cases, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
A resposta certa é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contabiliza a quantidade de casos únicos (idcase) que passaram pela atividade 'declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
SELECT resource, COUNT(*) AS quantidade_casos FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT count(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(*) AS rejeicoes FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT COUNT(DISTINCT e1.idcase) AS num_declaratios_rejeitadas, e1.resource AS supervisor FROM event_log e1 WHERE e1.activity = 'Declaração rejeitada pelo supervisor' GROUP BY e1.resource ORDER BY num_declaratios_rejeitadas DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
Para cada atividade, informe em quantos casos registraram sua execução? SELECT activity, COUNT(*) AS "Quantidade de casos" FROM event_log GROUP BY activity; Essa query utiliza a função COUNT(*) para contar o número de registros para cada atividade, e o GROUP BY activity agrupa os resultados por atividade. O alias "Quantidade de casos" é usado para nomear a coluna que contém o resultado da contagem.
SELECT activity, COUNT(DISTINCT idcase) AS casos FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT idcase, COUNT(*) as num_declaracoes FROM event_log GROUP BY idcase ORDER BY num_declaracoes DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%')
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' ) ORDER BY timestamp LIMIT 10;
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%') AND activity LIKE 'R%';
Aqui está a resposta para a pergunta: /* Responda o seguinte: Quais ações iniciando com letra 'R' ocorreram depois de ações que iniciando com a letra 'D' durante o processamento de uma declaração? */ SELECT el1.activity AS anterior, el2.activity AS subsequente FROM event_log el1 JOIN event_log el2 ON el1.id = el2.id - 1 WHERE el1.activity LIKE 'D%' AND el2.activity LIKE 'R%'; Essa query utiliza uma join para combinar linhas da tabela `event_log` que têm um relacionamento temporal (um registro ocorre imediatamente após outro). A condição `el1.id = el2.id - 1` garante que a linha `el1` seja a linha anterior à linha `el2`. Em seguida, a query filtra apenas as linhas que começam com 'D' e 'R', respectivamente.
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource
SELECT activity, resource, COUNT(*) AS execution_count FROM event_log GROUP BY activity, resource
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource ORDER BY activity, resource;
SELECT resource, activity, COUNT(*) FROM event_log GROUP BY resource, activity
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource
SELECT employee_id, activity, COUNT(*) AS frequency FROM event_log JOIN employees ON event_log.employee_id = employees.id GROUP BY employee_id, activity ORDER BY employee_id, frequency DESC;
SELECT DISTINCT activity FROM event_log WHERE strftime('%Y', timestamp) = '2018' AND strftime('%m', timestamp) BETWEEN '01' AND '06';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity FROM event_log WHERE timestamp >= '2018-01-01' AND timestamp < '2018-06-30'
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-31' AND resource = 'Thomas';
SELECT DISTINCT activity FROM event_log WHERE strftime('%Y', timestamp) = '2018' AND strftime('%m', timestamp) BETWEEN '01' AND '06';
SELECT DISTINCT activity FROM event_log WHERE strftime('%Y', timestamp) = '2018' AND strftime('%m', timestamp) BETWEEN '01' AND '06';
SELECT activity, count(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30' GROUP BY activity;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
A resposta para a pergunta é: SELECT idcase FROM event_log WHERE resource = 'Wayne' GROUP BY idcase ORDER BY idcase; Essa consulta seleciona os identificadores de caso (idcase) em que o recurso 'Wayne' aparece associado à execução de algum evento, ordenando a resposta por identificador de caso.
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' GROUP BY idcase ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT * FROM event_log WHERE resource = 'Wayne' ORDER BY timestamp;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT activity, COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2018-03-12' AND '2018-03-13' GROUP BY activity
SELECT activity, COUNT(DISTINCT idcase) AS num_instances FROM event_log WHERE timestamp BETWEEN '2018-03-12 00:00:00' AND '2018-03-12 23:59:59' GROUP BY activity
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp >= '2018-03-12 00:00:00' AND timestamp < '2018-03-13 00:00:00' AND idcase NOT LIKE '%IN_PROGRESS%' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp <= '2018-03-12 23:59:59' AND idcase IS NOT NULL GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS case_count FROM event_log WHERE timestamp = (SELECT MAX(timestamp) FROM event_log WHERE timestamp < '2018-03-13') GROUP BY activity
SELECT activity, COUNT(*) AS quantidade_de_casos FROM event_log WHERE timestamp = '2018-03-12' AND status = 'finalizado' GROUP BY activity ORDER BY quantidade_de_casos DESC;
SELECT activity, COUNT(*) FROM event_log WHERE strftime('%Y-%m-%d', timestamp) = '2018-03-12' AND idcase IN (SELECT idcase FROM event_log WHERE strftime('%Y-%m-%d', timestamp) = '2018-03-12' GROUP BY idcase HAVING MAX(strftime('%Y-%m-%d', timestamp)) = '2018-03-12') GROUP BY activity;
SELECT idcase, activity, COUNT(*) AS frequency FROM event_log WHERE timestamp = '2018-03-12' AND activity NOT LIKE 'FINALIZADA' GROUP BY idcase, activity
Aqui estão as respostas para as perguntas: 1. Quais casos possuem mais de uma atividade cujo nome inicia com 'permissão'? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query retorna os casos que têm mais de uma atividade cujo nome inicia com 'permissão'. 2. Em quais casos atividades cujo nome inicia com 'permissão' foram executadas mais de uma vez? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query também retorna os casos que têm mais de uma atividade cujo nome inicia com 'permissão'. 3. Quais casos executaram atividades cujo nome inicia com 'permissão' mais de uma vez? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query também retorna os casos que têm mais de uma atividade cujo nome inicia com 'permissão'. 4. Quantas vezes atividades 'permissão' foram executadas em cada caso? Resposta: `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` Essa query retorna o número de vezes que atividades cujo nome inicia com 'permissão' foram executadas em cada caso. 5. Para quais casos há mais de um registro da execução de atividades cujo nome inicia com 'permissão'? Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` Essa query retorna os casos que têm mais de um registro da execução de atividades cujo nome inicia com 'permissão'. 6. Quantos casos iniciaram com um atividade cujo rótulo inicia com a palavra 'permissão'? Resposta: `SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE 'permissão%'` Essa query retorna o número de casos que iniciaram com uma atividade cujo rótulo inicia com a palavra 'permissão'.
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE 'permissão%';
A resposta é: SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE 'permissão%'; Essa consulta contará quantos casos (idcase) iniciaram com uma atividade cujo nome inicia com 'permissão'.
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%' AND id = (SELECT MIN(id) FROM event_log WHERE activity LIKE 'permissão%');
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%' ORDER BY timestamp LIMIT 1;
SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) = 1
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%iniciar permissão%' AND activity LIKE 'iniciar%'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE 'permissão%' AND timestamp = (SELECT MIN(timestamp) FROM event_log WHERE activity LIKE 'permissão%')
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado') ORDER BY e.idcase;
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado')
SELECT DISTINCT e.idcase FROM event_log AS e WHERE NOT EXISTS ( SELECT 1 FROM event_log AS e1 WHERE e1.idcase = e.idcase AND (e1.activity = 'Requisição de pagamento' OR e1.activity = 'Pagamento efetuado') )
SELECT idcase FROM idcase_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') )
A resposta é: SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT DISTINCT idcase FROM event_log where activity = 'Pagamento efetuado') AND idcase NOT IN (SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento'); Essa query verifica quantas declarações não têm registro de pagamento efetuado (ou seja, não estão presentes na tabela de eventos com a atividade "Pagamento efetuado") e também não têm registro de requisição de pagamento (ou seja, não estão presentes na tabela de eventos com a atividade "Requisição de pagamento").
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado') ORDER BY timestamp DESC LIMIT 10;
SELECT timestamp, resource, activity FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource
SELECT * FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Declaração requisitada pelo funcionário' ORDER BY timestamp, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp ASC, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT timestamp, resource FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT resource, timestamp, activity FROM event_log WHERE activity IN ('Início da viagem', 'Requisição de declaração') ORDER BY timestamp, resource;
Aqui está a resposta: SELECT e.id, e.activity, e.timestamp, e.resource, f.name FROM event_log e INNER JOIN (SELECT idcase, name FROM users) f ON e.idcase = f.idcase WHERE e.activity IN ('Início da viagem', 'Requisição de funcionário') ORDER BY e.timestamp, f.name; Essa query seleciona os eventos associados ao início de processamento de uma declaração, ordenando-os pela data e pelo nome do funcionário associado à execução do evento. Ela assume que o esquema de banco de dados inclui uma tabela "users" com as informações dos funcionários, e que a coluna "name" da tabela "users" contém o nome dos funcionários.
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS count_records FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
A resposta é: SELECT resource, COUNT(*) FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource; Essa consulta retorna a quantidade de vezes que cada recurso foi associado à atividade 'declaração salva pelo funcionário', ordenada por nome de recurso.
SELECT resource, COUNT(*) AS occurrences FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, count(*) FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
A resposta é: SELECT resource, COUNT(*) FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource; Essa query seleciona o recurso e a contagem de vezes que cada recurso foi associado à atividade 'declaração salva pelo funcionário', agrupando por recurso e ordenando a resposta por recurso.
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_saves FROM event_log WHERE activity = 'Salvar declaração de viagem' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS salvamentos FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity
A resposta é: SELECT COUNT(DISTINCT idcase), activity FROM event_log GROUP BY activity Essa query contabiliza a quantidade de casos únicos (idcase) para cada atividade e retorna o resultado agrupado por atividade.
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_instances FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT idcase) AS num_instances FROM event_log GROUP BY activity
SELECT idcase, activity, COUNT(*) as count FROM event_log GROUP BY idcase, activity ORDER BY count DESC
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_declarações FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_declaracoes FROM event_log GROUP BY activity
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_actions FROM event_log WHERE activity LIKE '%viagem%' -- ajuste para incluir apenas ações relacionadas ao processamento de declarações de viagens GROUP BY resource ORDER BY num_actions DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) as num_occurrences FROM event_log WHERE activity IN ('Fim da viagem', 'Pagamento efetuado') GROUP BY resource
Aqui estão as respostas para as perguntas fornecidas: 1. Quais declarações foram finalizadas com registro de fim de viagem sem que um pagamento tenha sido efetuado ou pelo menos tenha sido registrado uma requisição de pagamento? A resposta é a mesma para as perguntas 2 e 4: SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' 2. Quais declarações foram finalizadas sem pagamento efetuado ou registrado? A resposta é a mesma para as perguntas 1 e 4: SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' 3. Recupere as instâncias de processos nas quais as atividades 'início da viagem' ou 'fim da viagem' ocorreram mas as atividades'requisição de pagamento' e 'pagamento efetuado' não ocorreram. A resposta é: SELECT DISTINCT idcase from event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') and idcase NOT IN (SELECT idcase from event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase from event_log WHERE activity = 'Pagamento efetuado') 4. Quais são os casos que passaram pela atividade 'fim da viagem' mas não passaram pela atividade'requisição de pagamento' ou 'pagamento efetuado' e nos quais mais de um recurso atuou. A resposta é a mesma para as perguntas 1 e 2: SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' 5. Informe os casos em que ocorreram as atividades 'início da viagem' ou 'fim da viagem' e que não ocorreram as atividades'requisição de pagamento' e 'pagamento efetuado'. A resposta é a mesma para a pergunta 3: SELECT DISTINCT idcase from event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') and idcase NOT IN (SELECT idcase from event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase from event_log WHERE activity = 'Pagamento efetuado') 6. Por quantas atividades de finalização ('fim da viagem', 'pagamento efetuado') cada pessoa foi responsável? A resposta é: SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log WHERE activity IN ('Fim da viagem', 'Pagamento efetuado') GROUP BY idcase
Aqui estão as respostas para as perguntas: 1. Quais instâncias de processos envolveram mais de um recurso, registraram a atividade 'fim da viagem' mas não registraram nem'requisição de pagamento' e nem 'pagamento efetuado'? SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' 2. Recupere as instâncias de processos nas quais as atividades 'início da viagem' ou 'fim da viagem' ocorreram mas as atividades'requisição de pagamento' e 'pagamento efetuado' não ocorreram. SELECT DISTINCT idcase from event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') and idcase NOT IN (SELECT idcase from event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase from event_log WHERE activity = 'Pagamento efetuado') 3. Em quais instâncias de processo houve o registro de envolvimento de mais de um recurso, registro de atividade 'fim da viagem' mas nenhum registro de atividade'requisição de pagamento' ou 'pagamento efetuado'? SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' 4. Em quais casos houve o registro de envolvimento de mais de um recurso, registro de atividade 'fim da viagem' mas nenhum registro de atividade'requisição de pagamento' ou 'pagamento efetuado'? SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' 5. Recupere os casos nos quais há ocorrência das atividades 'início da viagem' ou 'fim da viagem' mas não há ocorrência das atividades'requisição de pagamento' e 'pagamento efetuado'. SELECT DISTINCT idcase from event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') and idcase NOT IN (SELECT idcase from event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase from event_log WHERE activity = 'Pagamento efetuado') 6. Por quantas ocorrências de atividades de finalização ('fim da viagem', 'pagamento efetuado') cada recurso foi responsável? SELECT resource, COUNT(*) AS count FROM event_log WHERE activity IN ('Fim da viagem', 'Pagamento efetuado') GROUP BY resource
SELECT DISTINCT idcase from event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') and idcase NOT IN (SELECT idcase from event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase from event_log WHERE activity = 'Pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado';
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity IN ('Fim da viagem', 'pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) AS total_actions FROM event_log WHERE activity IN ('Fim da viagem', 'Pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) as "Número de vezes" FROM event_log WHERE activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário', 'Pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource HAVING ROW_NUMBER() OVER (PARTITION BY resource, idcase ORDER BY timestamp) = 1
SELECT resource, COUNT(*) AS num_occurrences FROM ( SELECT resource, ROW_NUMBER() OVER (PARTITION BY resource, activity ORDER BY timestamp) AS row_num FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' ) AS subquery WHERE row_num = 1 GROUP BY resource
SELECT resource, COUNT(DISTINCT id) AS num_instances FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource ORDER BY num_instances DESC;
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND id = (SELECT MIN(id) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND idcase = event_log.idcase) GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND id = (SELECT MIN(id) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND idcase = event_log.idcase) GROUP BY resource
SELECT resource, COUNT(*) AS rejeicoes FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_declarações FROM event_log JOIN resource ON event_log.resource = resource.name WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'Início da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase HAVING COUNT(*) < (SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem');
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase HAVING MAX(CASE WHEN activity = 'Fim da viagem' THEN 1 ELSE 0 END) = 1
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) - (SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND idcase = e.idcase ORDER BY timestamp DESC LIMIT 1) AS events_before_end_of_trip FROM event_log e WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) as quantidade_eventos FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase ORDER BY quantidade_eventos DESC;
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, count(*) as num_actions FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase ORDER BY idcase;
SELECT idcase, count(*) as num_actions FROM event_log WHERE activity = 'Fim da viagem' GROUP BY idcase
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01' ORDER BY activity;
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31'
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01'
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30'
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT el.idcase, el.timestamp, el.resource FROM event_log el WHERE el.activity = 'Declaração rejeitada pelo supervisor' ORDER BY el.idcase, el.timestamp;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC
SELECT * FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y-%m', timestamp) = '2017-03' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y-%m', timestamp) <= '2018-03' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
Here is the answer: SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp <= '2018-03-31' AND NOT EXISTS (SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31')
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp <= '2018-03-31' AND id NOT IN ( SELECT id FROM event_log WHERE activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Início da viagem' AND e1.activity!= 'Fim da viagem' AND e1.timestamp < '2018-03-31' GROUP BY e1.idcase
SELECT e1.idcase FROM event_log AS e1 INNER JOIN ( SELECT idcase, MAX(timestamp) AS max_timestamp FROM event_log WHERE activity = 'Fim da viagem' GROUP BY idcase ) AS e2 ON e1.idcase = e2.idcase AND e1.timestamp < e2.max_timestamp WHERE strftime('%Y-%m-%d', e1.timestamp) < '2018-03-31' AND EXISTS ( SELECT 1 FROM event_log AS e3 WHERE e3.idcase = e1.idcase AND e3.activity = 'Início da viagem' )
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('Requisição de pagamento', 'Pagamento efetuado') ) AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' ) )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado')
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
Aqui está a resposta: /* Responda o seguinte: Quantas ocorrências de atividades de 'permissão' existem em cada um dos casos? */ SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase /* Responda o seguinte: Quantas vezes atividades 'permissão' foram executadas em cada caso? */ SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase /* Responda o seguinte: Dado um rol de atividades cujo nome inicia com 'permissão', recupere quantos casos iniciaram com uma dessas atividades. */ SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%' /* Responda o seguinte: Para cada caso, informe a quantidade de vezes que uma atividade de 'permissão' foi executada. */ SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase /* Responda o seguinte: Informe a quantidade de casos nos quais o primeiro evento está associado a uma atividade cujo rótulo inicia com a palavra 'permissão'. */ SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%' /* Responda o seguinte: Recupere os casos nos quais há mais de uma ocorrência de atividades iniciando com o termo 'permissão'. */ SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) >= 2;
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1
Based on the provided SQL examples and the given database schema, here are the answers to the questions: 1. Quais as ações relacionadas a permissões e a declarações explícitas no processo de gerenciamento de declarações? The SQL query `SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'` returns the distinct activities related to permissions and declarations. 2. Quantas vezes cada declaração recebeu uma 'permissão' durante o seu processamento? The SQL query `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` returns the count of times each declaration received a permission during its processing. 3. Quantas vezes permissões foram registradas para cada uma das declarações já processadas? The SQL query `SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%permissão%' GROUP by idcase` returns the count of times permissions were registered for each declaration already processed. 4. O que caracteriza as intervenções que geram uma permissão durante o processamento de uma declaração? The SQL query `SELECT * FROM event_log WHERE activity LIKE '%permissão%'` returns all the events in the event log where the activity is related to a permission. 5. Quais são as intervenções registradas no processamento das declarações que diz respeito a permissão rejeitada por um diretor? The SQL query `select * from event_log where activity = 'Permissão rejeitada pelo diretor'` returns all the events in the event log where the activity is 'Permissão rejeitada pelo diretor'. 6. Ações relacionadas a permissões foram executadas durante o processamento de quais declarações? The SQL query `SELECT * FROM event_log WHERE activity LIKE '%permissão%'` returns all the events in the event log where the activity is related to a permission, which can be used to identify the declarations that had permission-related actions executed during their processing.
SELECT idcase, COUNT(*) as num_actions FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase, id, timestamp FROM event_log WHERE id IN ( SELECT id FROM event_log GROUP BY idcase ORDER BY MAX(timestamp) DESC ) ORDER BY idcase, timestamp;
SELECT idcase, id, timestamp FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY timestamp DESC;
SELECT idcase, id, activity, resource, timestamp FROM event_log WHERE id = (SELECT MAX(id) FROM event_log GROUP BY idcase) ORDER BY timestamp;
SELECT idcase, activity, timestamp FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY idcase, timestamp DESC;
SELECT id, idcase, timestamp FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY timestamp DESC;
SELECT idcase, MAX(id) AS last_event_id FROM event_log GROUP BY idcase ORDER BY MAX(timestamp) DESC;
SELECT id, timestamp FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY timestamp;
/* Responda o seguinte: Liste os últimos eventos executados, considerando cada instância de processo, listando os identificadores seguindo a ordem de execução dos eventos. */ SELECT id, activity, timestamp, resource, cost, idcase FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase )
SELECT idcase, activity, timestamp FROM ( SELECT idcase, activity, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY idcase;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT grupo, COUNT(*) as quantidade_casos FROM (SELECT CASE WHEN activity LIKE '%funcionário%' THEN 'funcionário' WHEN activity LIKE '%supervisor%' THEN'supervisor' WHEN activity LIKE '%administração%' THEN 'administração' WHEN activity LIKE '%pré-aprovador%' THEN 'pré-aprovador' WHEN activity LIKE '%responsável pelo orçamento%' THEN'responsável pelo orçamento' WHEN activity LIKE '%diretor%' THEN 'diretor' END as grupo FROM event_log) as subquery GROUP BY grupo ORDER BY quantidade_casos DESC;
SELECT grupo, COUNT(DISTINCT idcase) AS quantidade_casos FROM (SELECT 'funcionário' AS grupo, idcase FROM event_log WHERE activity LIKE '%funcionário%' UNION SELECT 'supervisor' AS grupo, idcase FROM event_log WHERE activity LIKE '%supervisor%' UNION SELECT 'administração' AS grupo, idcase FROM event_log WHERE activity LIKE '%administração%' UNION SELECT 'pré-aprovador' AS grupo, idcase FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION SELECT 'responsável pelo orçamento' AS grupo, idcase FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION SELECT 'diretor' AS grupo, idcase FROM event_log WHERE activity LIKE '%diretor%') AS subquery GROUP BY grupo ORDER BY quantidade_casos DESC;
SELECT grupo, COUNT(DISTINCT idcase) AS quantidade_casos FROM (SELECT 'funcionário' AS grupo, idcase FROM event_log WHERE activity LIKE '%funcionário%' UNION ALL SELECT 'supervisor' AS grupo, idcase FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT 'administração' AS grupo, idcase FROM event_log WHERE activity LIKE '%administração%' UNION ALL SELECT 'pré-aprovador' AS grupo, idcase FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION ALL SELECT 'responsável pelo orçamento' AS grupo, idcase FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION ALL SELECT 'diretor' AS grupo, idcase FROM event_log WHERE activity LIKE '%diretor%') AS subquery GROUP BY grupo ORDER BY quantidade_casos DESC;
SELECT COUNT(DISTINCT idcase) AS quantidade_casos, grupo FROM (SELECT 'funcionário' AS grupo FROM event_log WHERE activity LIKE '%funcionário%' UNION ALL SELECT 'supervisor' AS grupo FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT 'administração' AS grupo FROM event_log WHERE activity LIKE '%administração%' UNION ALL SELECT 'pré-aprovador' AS grupo FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION ALL SELECT 'responsável pelo orçamento' AS grupo FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION ALL SELECT 'diretor' AS grupo FROM event_log WHERE activity LIKE '%diretor%') AS subquery GROUP BY grupo
SELECT grupo, COUNT(*) as quantidade_declaracoes FROM (SELECT CASE WHEN activity LIKE '%funcionário%' THEN 'funcionário' WHEN activity LIKE '%supervisor%' THEN'supervisor' WHEN activity LIKE '%administração%' THEN 'administração' WHEN activity LIKE '%pré-aprovador%' THEN 'pré-aprovador' WHEN activity LIKE '%responsável pelo orçamento%' THEN'responsável pelo orçamento' WHEN activity LIKE '%diretor%' THEN 'diretor' END as grupo FROM event_log) as subquery GROUP BY grupo ORDER BY quantidade_declaracoes DESC;
SELECT grupo, COUNT(*) AS quantidade_execucoes FROM (SELECT 'funcionário' AS grupo, activity FROM event_log WHERE activity LIKE '%funcionário%' UNION SELECT 'supervisor' AS grupo, activity FROM event_log WHERE activity LIKE '%supervisor%' UNION SELECT 'administração' AS grupo, activity FROM event_log WHERE activity LIKE '%administração%' UNION SELECT 'pré-aprovador' AS grupo, activity FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION SELECT 'responsável pelo orçamento' AS grupo, activity FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION SELECT 'diretor' AS grupo, activity FROM event_log WHERE activity LIKE '%diretor%') AS subquery GROUP BY grupo ORDER BY quantidade_execucoes DESC;
SELECT grupo, activity, COUNT(*) AS frequency FROM ( SELECT 'funcionário' AS grupo, activity, idcase FROM event_log WHERE activity LIKE '%funcionário%' UNION ALL SELECT 'supervisor' AS grupo, activity, idcase FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT 'administração' AS grupo, activity, idcase FROM event_log WHERE activity LIKE '%administração%' UNION ALL SELECT 'pré-aprovador' AS grupo, activity, idcase FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION ALL SELECT 'responsável pelo orçamento' AS grupo, activity, idcase FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION ALL SELECT 'diretor' AS grupo, activity, idcase FROM event_log WHERE activity LIKE '%diretor%' ) AS subquery GROUP BY grupo, activity ORDER BY frequency DESC;
SELECT grupo, COUNT(DISTINCT idcase) AS quantidade FROM (SELECT 'funcionário' AS grupo, idcase FROM event_log WHERE activity LIKE '%funcionário%' UNION SELECT 'supervisor' AS grupo, idcase FROM event_log WHERE activity LIKE '%supervisor%' UNION SELECT 'administração' AS grupo, idcase FROM event_log WHERE activity LIKE '%administração%' UNION SELECT 'pré-aprovador' AS grupo, idcase FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION SELECT 'responsável pelo orçamento' AS grupo, idcase FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION SELECT 'diretor' AS grupo, idcase FROM event_log WHERE activity LIKE '%diretor%') AS subquery GROUP BY grupo ORDER BY quantidade DESC;
SELECT e1.idcase, e1.activity, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
SELECT idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp GROUP BY idcase
SELECT e1.idcase, e1.activity, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND id IN ( SELECT id FROM event_log WHERE activity!= 'Fim da viagem' AND timestamp > ( SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' ORDER BY timestamp DESC LIMIT 1 ) )
SELECT e1.idcase, e1.activity, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp ORDER BY e1.idcase;
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
select distinct(e1.activity) from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Envio de lembrete' and e1.timestamp < e2.timestamp group by e1.idcase, e1.activity
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
select distinct(e1.activity) from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Envio de lembrete' and e1.timestamp < e2.timestamp group by e1.idcase, e1.activity
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declaração%' AND activity = 'Envio de lembrete' AND cost = 0;
SELECT DISTINCT resource FROM event_log WHERE timestamp > '2018-03-31'
SELECT DISTINCT resource FROM event_log WHERE timestamp = '2018-03-31' AND resource IS NOT NULL EXCEPT SELECT DISTINCT resource FROM event_log WHERE timestamp = '2018-03-31' AND resource IS NOT NULL;
SELECT DISTINCT resource FROM event_log WHERE timestamp < '2018-03-31' OR timestamp > '2018-04-01' AND resource IS NOT NULL;
SELECT DISTINCT resource FROM event_log WHERE timestamp = '2018-03-31' AND idcase IS NULL
WITH inactive_cases AS ( SELECT idcase FROM event_log WHERE activity = 'Início da viagem' INTERSECT SELECT idcase FROM event_log GROUP BY idcase HAVING MAX(timestamp) > '2018-03-31' ) SELECT DISTINCT resource FROM event_log WHERE idcase IN (SELECT idcase FROM inactive_cases) AND activity = 'Ocio' AND timestamp >= '2018-03-01' AND timestamp <= '2018-03-31';
SELECT DISTINCT resource FROM event_log WHERE timestamp = '2018-03-31' AND idcase IS NOT NULL
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY idcase HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log WHERE idcase = idcase AND activity = 'Fim da viagem') ) GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' AND idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) = '2018-12-05') GROUP BY activity ORDER BY frequency DESC;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
Aqui estão as respostas para as perguntas: 1. Quais os casos para os quais não há, ainda, registro de ocorrência das atividades'requisição de pagamento' ou 'pagamento efetuado'? SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') 2. Quais os casos que ainda não passaram pelas atividades'requisição de pagamento' ou 'pagamento efetuado'? SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') 3. Quais as instâncias de processo para as quais não há, ainda, registro de ocorrência das atividades'requisição de pagamento' ou 'pagamento efetuado'? SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') 4. Recupere os casos que ainda não passaram pelas atividades'requisição de pagamento' ou 'pagamento efetuado'? SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') 5. Informe os casos em que ocorreram as atividades 'início da viagem' ou 'fim da viagem' e que não ocorreram as atividades'requisição de pagamento' e 'pagamento efetuado'. SELECT DISTINCT idcase from event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') and idcase NOT IN (SELECT idcase from event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase from event_log WHERE activity = 'Pagamento efetuado') 6. Até o momento atual, para quantos casos não há registro da execução da atividade 'pagamento efetuado'? SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Pagamento efetuado' = 0 Observação: A pergunta 6 não é exatamente igual às outras, pois não está pedindo para recuperar os casos, mas sim para contar quantos casos não têm registro da execução da atividade 'pagamento efetuado'.
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT COUNT(DISTINCT idcase) - COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'pagamento efetuado'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado')
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado')
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo funcionário' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' ) ORDER BY idcase;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity ORDER BY activity;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT DISTINCT activity FROM event_log WHERE activity!= 'Envio de lembrete' AND id IN ( SELECT id FROM event_log WHERE activity = 'Envio de lembrete' ) ORDER BY activity;
SELECT activity FROM event_log WHERE activity!= 'Envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%' AND activity < 'Enviar lembrete' ORDER BY activity;
SELECT idcase, COUNT(*) as quantidade_eventos, PERCENT_RANK() OVER (ORDER BY COUNT(*)) as percent_rank FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC;
SELECT count_events, COUNT(*) as num_cases FROM ( SELECT idcase, COUNT(*) as count_events FROM event_log GROUP BY idcase ) as subquery GROUP BY count_events ORDER BY count_events;
SELECT count(*) AS quantidade_eventos, COUNT(DISTINCT idcase) AS quantidade_casos FROM event_log GROUP BY quantidade_eventos ORDER BY quantidade_eventos DESC;
SELECT count(*), idcase, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS num_actions, COUNT(*) AS num_cases_with_same_num_actions FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
SELECT AVG(SUM(cost)) FROM event_log GROUP BY idcase
SELECT AVG(total_cost) FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS total_costs
SELECT AVG(SUM(cost)) FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS total_costs
SELECT AVG(SUM(cost)) FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase;
SELECT AVG(cost) FROM event_log
SELECT resource, AVG(cost) AS avg_cost FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS avg_cost FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS average_cost FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS average_cost FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS media_custo FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS avg_cost FROM event_log WHERE cost IS NOT NULL GROUP BY resource
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
A resposta é: SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10; Essa query seleciona a coluna "resource" e conta o número de vezes que cada recurso aparece na tabela "event_log" (frequência). Em seguida, ordena a lista por frequência em ordem decrescente e limita a 10 primeiros resultados, que correspondem aos 10 recursos mais recorrentemente ligados às execuções de atividades registradas nos eventos.
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity IS NOT NULL GROUP BY resource ORDER BY num_events DESC LIMIT 10;
SELECT resource, COUNT(*) as num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC LIMIT 10;
Aqui estão as respostas para as perguntas de SQL fornecidas: 1. Quantos eventos foram executados em cada caso? SELECT count (*), idcase FROM event_log group by idcase Essa consulta retorna a contagem de eventos para cada caso (idcase). 2. Quantos eventos foram executados para cada instância de processo? SELECT count (*), idcase FROM event_log group by idcase Essa consulta também retorna a contagem de eventos para cada caso (idcase), pois o campo idcase não está relacionado a instâncias de processo. 3. Quantos eventos foram registrados para cada caso? SELECT count (*), idcase FROM event_log group by idcase Essa consulta também retorna a contagem de eventos para cada caso (idcase). 4. Quantos eventos foram executados em cada um dos casos? SELECT count (*), idcase FROM event_log group by idcase Essa consulta também retorna a contagem de eventos para cada caso (idcase). 5. Qual é a quantidade de eventos por caso? SELECT count (*), idcase FROM event_log group by idcase Essa consulta também retorna a contagem de eventos para cada caso (idcase). 6. Quantos eventos foram executados por dia? SELECT COUNT(*), DATE(timestamp) AS data FROM event_log GROUP BY DATE(timestamp) Essa consulta retorna a contagem de eventos por dia, agrupando os registros por data (utilizando a função DATE para extrair a data do campo timestamp).
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_ocorrencias FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS date, COUNT(*) AS count FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT idcase, activity, resource1, resource2 FROM ( SELECT idcase, activity, resource, LAG(resource) OVER (PARTITION BY idcase, activity ORDER BY timestamp) AS resource1, resource AS resource2 FROM event_log ) AS subquery WHERE resource1 IS NOT NULL AND resource1 <> resource2
SELECT idcase, activity, resource1, resource2 FROM ( SELECT idcase, activity, resource, LAG(resource) OVER (PARTITION BY idcase, activity ORDER BY timestamp) AS resource1 FROM event_log ) AS t WHERE resource!= resource1 GROUP BY idcase, activity, resource1, resource2 HAVING COUNT(*) = 2
SELECT idcase FROM event_log WHERE activity LIKE '%declaração%' AND id IN ( SELECT id FROM event_log WHERE activity LIKE '%declaração%' AND id = LAG(id) OVER (PARTITION BY idcase ORDER BY timestamp) )
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' GROUP BY idcase
SELECT COUNT(*) - 1 AS num_events_antes FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase, COUNT(*) AS num_intervencoes FROM event_log WHERE activity IN ('Declaração final aprovada pelo diretor', 'Permissão final aprovada pelo diretor') GROUP BY idcase ORDER BY num_intervencoes DESC;
SELECT el1.idcase, TIMESTAMPDIFF(SECOND, el1.timestamp, el2.timestamp) AS tempo_passado FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity LIKE '%permissão requisitada pelo funcionário%' AND el2.activity LIKE '%permissão aprovada pela administração%' ORDER BY tempo_passado;
SELECT idcase, activity, timestamp, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS prev_timestamp, TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp), timestamp) AS time_diff FROM event_log WHERE activity IN ('Permissão requisitada pelo funcionário', 'Permissão aprovada pela administração') ORDER BY idcase, timestamp;
SELECT TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS tempo_passado FROM event_log WHERE activity LIKE '%requisitar permissão%' AND activity LIKE '%permissão aprovada%' GROUP BY idcase
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, SUM(cost) FROM event_log group by idcase
SELECT idcase FROM event_log WHERE id IN ( SELECT id FROM event_log WHERE activity = LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) )
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT id) > 1;
SELECT idcase FROM ( SELECT idcase, activity, LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_activity FROM event_log ) AS t WHERE activity = next_activity;
SELECT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1
SELECT idcase, activity, timestamp FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1 ) ORDER BY idcase, timestamp;
SELECT idcase FROM event_log WHERE activity = LAG(activity) OVER (PARTITION BY idcase ORDER BY timestamp)
SELECT DISTINCT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1
SELECT idcase, activity, timestamp FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1 ) ORDER BY idcase, timestamp;
SELECT idcase, activity, timestamp FROM event_log WHERE id IN ( SELECT id FROM event_log WHERE id IN ( SELECT id FROM event_log GROUP BY id, activity HAVING COUNT(*) > 1 ) ) ORDER BY idcase, timestamp;
SELECT idcase FROM event_log WHERE id IN ( SELECT id FROM ( SELECT id, activity, LAG(activity) OVER (PARTITION BY idcase ORDER BY id) AS prev_activity FROM event_log ) AS t WHERE activity = prev_activity )
SELECT e1.name AS supervisor, e2.name AS employee FROM employee e1 JOIN employee e2 ON e1.id = e2.supervisor_id;
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY resource;
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%responsável pelo orçamento%'
SELECT DISTINCT resource FROM event_log WHERE activity = 'budget'
