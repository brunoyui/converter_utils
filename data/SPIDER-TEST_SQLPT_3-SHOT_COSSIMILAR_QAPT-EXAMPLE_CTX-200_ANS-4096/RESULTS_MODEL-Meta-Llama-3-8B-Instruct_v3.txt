select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
A resposta para a pergunta final é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem'; Essa consulta contará o número de linhas na tabela "event_log" onde a coluna "activity" tem o valor 'Fim da viagem'.
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem'; Essa consulta contará o número de linhas na tabela "event_log" onde a coluna "activity" tem o valor 'Fim da viagem'.
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem'; Essa query simples contará o número de vezes que a atividade 'Fim da viagem' foi registrada no banco de dados.
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem'; Essa consulta seleciona todas as linhas da tabela `event_log` onde a coluna `activity` tem o valor 'Fim da viagem' e retorna o número de ocorrências (ou seja, o conteúdo da coluna `COUNT(*)`).
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James';
SELECT count(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James'
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND resource = 'James'
SELECT COUNT(*) FROM event_log WHERE user = 'James' AND activity = 'Fim da viagem';
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource; Essa consulta utiliza a cláusula `GROUP BY` para agrupar os eventos por recurso e a função `COUNT(*)` para contar o número de eventos associados a cada recurso. O resultado é uma lista com o nome do recurso e a quantidade de eventos associados a ele.
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT COUNT(*), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log GROUP BY resource
SELECT COUNT(*), resource FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT activity), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log GROUP BY resource
SELECT resource, count(*) as num_actions FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Essa query contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter', o que representa o número de eventos associados ao Peter.
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
A resposta é a mesma para todos os exemplos: `SELECT count(*) FROM event_log WHERE resource = 'Peter';` Este comando contará o número de linhas na tabela `event_log` onde a coluna `resource` tem o valor `'Peter'`, o que representa o número de eventos executados pelo funcionário 'Peter'.
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS total_actions FROM event_log WHERE resource = 'Peter';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31' Essa consulta seleciona todos os registros do banco de dados "event_log" onde a data do timestamp está entre 1º de março de 2018 e 31º de março de 2018.
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31' AND activity = 'FINALIZADO';
SELECT idcase FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31' GROUP BY idcase
SELECT idcase FROM event_log WHERE MONTH(timestamp) = 3 AND YEAR(timestamp) = 2018
SELECT idcase FROM event_log WHERE timestamp = ( SELECT MAX(timestamp) FROM event_log WHERE idcase = event_log.idcase AND EXTRACT(MONTH FROM timestamp) = 3 AND EXTRACT(YEAR FROM timestamp) = 2018 )
SELECT idcase FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31' GROUP BY idcase HAVING max(timestamp) = '2018-03-31';
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2018-03-01' AND '2018-03-31' Essa consulta seleciona os casos (idcase) que tiveram a atividade "Fim da viagem" e o timestamp entre 1º de março de 2018 e 31º de março de 2018.
SELECT idcase FROM event_log WHERE timestamp BETWEEN '2018-03-01' AND '2018-03-31' AND activity = 'Fim da viagem'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
SELECT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas'
SELECT * FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' AND resource!= 'Douglas';
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query retorna o número de recursos únicos presentes no log de eventos.
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query retorna o número de recursos únicos presentes no log de eventos.
Para responder à pergunta "Quantas recursos existem no log de eventos?", você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT resource) FROM event_log; Essa consulta contará o número de recursos únicos presentes no log de eventos.
Para responder à pergunta "Quantas pessoas diferentes executaram atividades?", precisamos identificar a coluna que representa a pessoa (ou usuário) que executou as atividades. No esquema de banco de dados fornecido, não há uma coluna específica para isso. No entanto, podemos supor que a coluna "resource" representa a pessoa que executou a atividade. Portanto, a resposta seria: SELECT COUNT(DISTINCT resource) FROM event_log Essa consulta contará o número de registros únicos na coluna "resource", o que representa o número de pessoas diferentes que executaram atividades.
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query retorna o número de recursos diferentes presentes no log de eventos.
Para responder à pergunta "Quantas pessoas diferentes aparecem no log de eventos?", precisamos considerar que o esquema de banco de dados não inclui uma coluna para identificar as pessoas. No entanto, suponho que a coluna "idcase" possa ser utilizada para identificar as pessoas. Portanto, a resposta seria: SELECT COUNT(DISTINCT idcase) FROM event_log Essa consulta contará o número de IDs únicos na coluna "idcase", o que representaria o número de pessoas diferentes que aparecem no log de eventos.
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query utiliza a função COUNT(DISTINCT) para contar o número de recursos únicos (ou seja, diferentes) presentes no log de eventos.
Para responder à pergunta "Quantos recursos diferentes executaram atividades?", você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT resource) FROM event_log Essa consulta contará o número de recursos diferentes presentes na tabela "event_log".
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa query utiliza a função COUNT(DISTINCT) para contar o número de recursos únicos (ou seja, diferentes) presentes no log de eventos.
SELECT COUNT(DISTINCT id) AS num_people FROM event_log;
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log;
SELECT COUNT(DISTINCT resource) FROM event_log
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource
SELECT * FROM event_log WHERE cost > 2.225
SELECT idcase FROM event_log WHERE cost > 2225.0 GROUP BY idcase
SELECT idcase FROM event_log WHERE cost > 2.225 GROUP BY idcase HAVING COUNT(*) > 3
SELECT activity from event_log GROUP BY activity HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY activity ORDER BY COUNT(*) desc LIMIT 1)
SELECT idcase FROM event_log WHERE cost > 2225 GROUP BY idcase
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
A pergunta! A resposta é a mesma para todas as perguntas: `SELECT resource, COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1;` Explicação: * `SELECT resource, COUNT(*) FROM event_log` seleciona a coluna `resource` e a contagem de linhas (ou seja, o número de eventos) para cada recurso. * `GROUP BY resource` agrupa os resultados por recurso. * `ORDER BY COUNT(*) DESC` ordena os resultados pela contagem de linhas em ordem decrescente (ou seja, pelo maior número de eventos). * `LIMIT 1` limita o resultado a apenas uma linha, que é o recurso que participou do maior número de eventos. Com esse comando, você obterá o recurso que participou do maior número de eventos e o número de eventos associados a esse recurso.
SELECT resource, COUNT(*) FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, SUM(cost) AS total_cost, COUNT(*) AS num_declarations FROM event_log GROUP BY resource ORDER BY total_cost DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_cases, COUNT(DISTINCT idcase) as total_actions FROM event_log GROUP BY resource ORDER BY total_cases DESC;
A resposta é: SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC; Essa query lista todos os recursos e a quantos eventos cada um está relacionado, em ordem decrescente em relação ao número de eventos.
A resposta é: SELECT resource, COUNT(*) as num_events FROM event_log GROUP BY resource ORDER BY num_events DESC; Essa query lista todos os recursos (resource) presentes no log de eventos, acompanhados do número de eventos (num_events) relacionados a cada um deles. A ordenação é feita em ordem descrescente (DESC) pelo número de eventos, o que significa que os recursos com mais eventos estarão na parte superior da lista.
A resposta para a pergunta é: SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC; Essa query lista todos os recursos e a quantidade de eventos sob responsabilidade de cada um, ordenando a resposta por ordem descrescente em relação ao número de eventos.
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource ORDER BY total_events DESC;
A resposta é: SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log GROUP BY resource ORDER BY quantidade_execucoes DESC; Essa query seleciona a coluna "resource" (os recursos) e a contagem de linhas (ou seja, a quantidade de vezes que cada recurso executou atividades) utilizando a função COUNT(*). Em seguida, agrupa os resultados por recurso utilizando o comando GROUP BY. Por fim, ordena a resposta em ordem decrescente (DESC) pela quantidade de execuções de atividades.
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC;
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todas as linhas da tabela "event_log" onde o valor da coluna "cost" não é nulo.
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Requisição de pagamento'
SELECT DISTINCT idcase FROM event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento') AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado');
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Requisição de pagamento');
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Requisição de pagamento')
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 3;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 1;
A resposta é: SELECT activity, COUNT(*) AS frequency FROM event_log GROUP BY activity ORDER BY frequency DESC; Essa query retorna o nome das atividades e a quantidade de vezes que elas ocorrem no log de eventos, ordenando a lista em ordem decrescente pelo número de ocorrências das atividades.
A resposta é: SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC; Essa query seleciona as atividades do processo de negócio, contabiliza a frequência de execução de cada atividade e ordena a resposta em relação à frequência de execução, da mais frequente para a menos frequente.
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT grupo, count(*) as quantidade, count(*) OVER (ORDER BY count(*) DESC) as ranking FROM ( SELECT 'funcionário' as grupo FROM event_log WHERE activity like '%funcionário%' UNION ALL SELECT 'supervisor' as grupo FROM event_log WHERE activity like '%supervisor%' UNION ALL SELECT 'administração' as grupo FROM event_log WHERE activity like '%administração%' UNION ALL SELECT 'pré-aprovador' as grupo FROM event_log WHERE activity like '%pré-aprovador%' UNION ALL SELECT 'responsável pelo orçamento' as grupo FROM event_log WHERE activity like '%responsável pelo orçamento%' UNION ALL SELECT 'diretor' as grupo FROM event_log WHERE activity like '%diretor%' ) as subquery ORDER BY ranking;
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017'
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017;
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017'
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017'
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017';
SELECT * FROM event_log WHERE strftime('%Y', timestamp) = '2017'
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 ORDER BY timestamp;
SELECT activity, strftime('%Y-%m-%d', timestamp) AS date, resource, cost, idcase FROM event_log WHERE strftime('%Y', timestamp) = '2017' ORDER BY date, activity;
SELECT * FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01'
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp >= '2017-01-01' AND timestamp < '2018-01-01' GROUP BY activity ORDER BY count DESC;
SELECT activity FROM event_log WHERE strftime('%Y', timestamp) = '2017' GROUP BY activity
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20;
SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
/* Responda o seguinte: Liste todas as declarações que possuem até 20 eventos associados. */ SELECT idcase, count(*) as num_events FROM event_log GROUP BY idcase HAVING count(*) <= 20
SELECT * FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20)
SELECT * FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20 )
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC LIMIT 5;
SELECT resource, COUNT(idcase) as total_cases FROM event_log GROUP BY resource ORDER BY total_cases DESC LIMIT 5;
SELECT resource, COUNT(*) as total_cases FROM event_log GROUP BY resource ORDER BY total_cases DESC LIMIT 5;
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases DESC LIMIT 5;
SELECT resource, COUNT(*) as total_declarações FROM event_log GROUP BY resource ORDER BY total_declarações DESC LIMIT 5;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 5;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 5;
SELECT resource, COUNT(*) as total_events FROM event_log GROUP BY resource ORDER BY total_events DESC LIMIT 5;
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource ORDER BY num_events DESC LIMIT 5;
SELECT resource, COUNT(*) as total_cases FROM event_log GROUP BY resource ORDER BY total_cases DESC LIMIT 5;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'Início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS total_occurrences FROM event_log WHERE activity = 'Início da viagem' AND EXTRACT(YEAR FROM timestamp) = 2016 GROUP BY resource ORDER BY total_occurrences DESC;
SELECT resource, COUNT(*) AS num_actions FROM event_log WHERE timestamp BETWEEN '2016-01-01' AND '2017-01-01' AND activity LIKE'start_trip%' GROUP BY resource, activity
It looks like you're trying to answer some SQL questions based on a given database schema! Here's the answer to the last question: /* Responda o seguinte: Quantas atividades relacionadas ao início da viagem temos para cada recurso no ano de 2016? */ SELECT resource, COUNT(*) AS num_activities FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y', timestamp) = '2016' GROUP BY resource This query will return a list of resources and the number of times the "Início da viagem" activity was executed for each resource in the year 2016.
A resposta é: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará a quantidade de vezes que cada recurso executou a atividade 'declaração rejeitada pelo supervisor', agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS ocorrencias, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará o número de ocorrências da atividade 'declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
A resposta é: SELECT resource, COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta retorna a quantidade de execuções da atividade 'declaração rejeitada pelo supervisor' associadas a cada recurso, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS ocorrencias, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará o número de ocorrências da atividade "Declaração rejeitada pelo supervisor" para cada recurso, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS quantidade_execucoes, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará a quantidade de execuções da atividade 'Declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS ocorrencias, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará o número de ocorrências da atividade 'Declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
A resposta é: SELECT COUNT(*) AS quantidade_execucoes, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta contará a quantidade de execuções da atividade 'Declaração rejeitada pelo supervisor' para cada recurso, agrupando os resultados por recurso.
SELECT resource, COUNT(*) as ocorrencias FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource ORDER BY ocorrencias DESC;
SELECT resource, COUNT(*) as occurrences FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource ORDER BY occurrences DESC;
SELECT resource, COUNT(*) as total_occurrences FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(*) AS rejeicoes FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase, count(*) as num_activities FROM event_log GROUP BY idcase HAVING count(*) > 20
SELECT idcase, COUNT(*) AS num_intervencoes FROM event_log GROUP BY idcase HAVING COUNT(*) > 20
SELECT idcase, COUNT(*) as total_events FROM event_log GROUP BY idcase ORDER BY total_events DESC LIMIT 1;
SELECT idcase, COUNT(*) as total_activities FROM event_log GROUP BY idcase ORDER BY total_activities DESC LIMIT 10;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 1;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(DISTINCT activity) DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(DISTINCT activity) DESC LIMIT 1;
SELECT idcase, COUNT(*) as num_actions FROM event_log GROUP BY idcase ORDER BY num_actions DESC LIMIT 10;
SELECT e.idcase FROM event_log AS e WHERE e.resource = 'Sara' AND NOT EXISTS ( SELECT 1 FROM event_log AS e2 WHERE e2.idcase = e.idcase AND e2.activity = 'Requisição de pagamento' )
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!='requisição de pagamento' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity ='requisição de pagamento' )
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!='requisição de pagamento' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity ='requisição de pagamento' )
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!='requisição de pagamento';
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity!= 'Requisição de pagamento' AND e.resource = 'Sara' ORDER BY e.timestamp ASC;
SELECT * FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento') AND resource LIKE '%Sara%';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaração 143598';
SELECT * FROM event_log WHERE idcase = 'declaração 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE idcase = 'declaração 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaração 143598';
Para responder ao último questionário, você precisaria adicionar uma condição adicional à cláusula WHERE para filtrar apenas os registros que se referem à declaração 143598. Além disso, você também precisaria incluir todas as colunas que você deseja recuperar. Aqui está a resposta: SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = '143598' Essa consulta retorna todas as informações (todas as colunas) dos registros que se referem às ações ocorridas entre 10 de janeiro de 2017 e 1 de fevereiro de 2017 e que se referem à declaração 143598.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa consulta contará o número de casos únicos (idcase) em que cada recurso esteve associado no período especificado.
A resposta é: SELECT COUNT(DISTINCT idcase) AS casos, resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource; Essa query contabiliza a quantidade de casos (idcase) para cada recurso (resource) no período especificado. O COUNT(DISTINCT idcase) retorna a quantidade de casos únicos para cada recurso.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa consulta contará o número de casos únicos (idcase) para cada recurso (resource) que trabalhou no período especificado.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa consulta contará o número de casos únicos (idcase) para cada recurso (resource) que atuou no período especificado.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) em que cada recurso está associado, considerando apenas os eventos ocorridos entre '2017-01-01' e '2017-05-31'.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa query contará o número de casos únicos (idcase) para cada recurso (resource) nos eventos registrados entre 1/1/2017 e 31/5/2017.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa query contará o número de casos únicos (idcase) para cada recurso (resource) nos eventos registrados entre 1/1/2017 e 31/5/2017.
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource Essa consulta contará o número de casos únicos (idcase) para cada recurso (resource) nos dados do período especificado (entre 1/1/2017 e 31/5/2017).
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
SELECT idcase, COUNT(*) AS num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
A resposta certa é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query agrupa as linhas do evento_log pelo campo idcase, contabiliza o número de ocorrências para cada grupo e ordena a lista em ordem decrescente. Em seguida, limita a lista para apenas as 10 instâncias de processo com mais ocorrências. A query fornecida anteriormente é um pouco mais complexa e não é necessária para resolver esse problema.
SELECT idcase, COUNT(*) as count FROM event_log GROUP BY idcase ORDER BY count DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase ORDER BY num_activities DESC LIMIT 10;
SELECT idcase, COUNT(DISTINCT activity) AS diversity FROM event_log GROUP BY idcase ORDER BY diversity DESC, idcase DESC LIMIT 10;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10;
SELECT idcase, COUNT(*) as quantidade_eventos FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC LIMIT 10;
A resposta é: SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase ORDER BY quantidade_eventos DESC LIMIT 10; Essa query seleciona o campo `idcase` e conta a quantidade de eventos para cada caso, ordenando a resposta em ordem descrescente pela quantidade de eventos e limitando a resultado para os 10 casos com a maior quantidade de eventos.
SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10;
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 10;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 10; Essa query agrupa os casos pelo campo "idcase", contabiliza o número de atividades (ou eventos) para cada caso e ordena a lista em ordem decrescente (mais eventos primeiro). Em seguida, limita a lista para os 10 casos com mais eventos. A query original que você forneceu é um pouco mais complexa e não é necessária para resolver o problema. Ela utiliza uma subquery para obter a contagem de atividades para cada caso e uma cláusula HAVING para filtrar os casos que possuem mais de 10 atividades. No entanto, essa abordagem é mais complexa e menos eficiente do que a query simplificada acima.
SELECT idcase, COUNT(*) as total_actions FROM event_log GROUP BY idcase ORDER BY total_actions DESC LIMIT 10;
SELECT SUM(cost) AS total_cost, idcase FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT AVG(total_cost) FROM (select SUM(cost) as total_cost, idcase from event_log group by idcase)
SELECT MAX(cost) FROM event_log;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT COUNT(*) FROM (SELECT DISTINCT idcase FROM event_log where cost IS NULL EXCEPT SELECT DISTINCT idcase FROM event_log where cost IS NOT NULL)
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
A resposta é: SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY quantidade_eventos DESC; Essa query faz o seguinte: * Seleciona todos os recursos (GROUP BY resource) e conta o número de eventos associados a cada recurso (COUNT(*)); * Filtra os recursos que atuaram em pelo menos 100 eventos (HAVING COUNT(*) >= 100); * Ordena os recursos por ordem descrescente de quantidade de eventos por recurso (ORDER BY quantidade_eventos DESC).
A resposta é: SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY resource HAVING COUNT(*) >= 100 ORDER BY quantidade_eventos DESC; Essa query faz o seguinte: * Seleciona todos os recursos (resource) do log de eventos. * Conta o número de eventos associados a cada recurso (COUNT(*)). * Agrupa os resultados por recurso (GROUP BY resource). * Filtre os resultados para apenas os recursos que atuaram em pelo menos 100 eventos (HAVING COUNT(*) >= 100). * Ordena os resultados em ordem decrescente pela quantidade de eventos por recurso (ORDER BY quantidade_eventos DESC).
SELECT idcase, COUNT(*) as total_activities FROM event_log GROUP BY idcase HAVING COUNT(*) >= 100 ORDER BY total_activities DESC;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
Aqui estão as respostas para os exemplos de SQL fornecidos: 1. Calcule o número de eventos por caso e indique quantos casos estão associados a cada contagem de eventos. SELECT events_count, COUNT(*) as case_count FROM (SELECT COUNT(*) as events_count, idcase FROM event_log GROUP BY idcase) AS subquery GROUP BY events_count; Essa consulta utiliza uma subconsulta para contar o número de eventos por caso e, em seguida, agrupa os resultados por essa contagem. A coluna `case_count` indica quantos casos estão associados a cada contagem de eventos. 2. Quais são os casos que possuem mais de três eventos executados? SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3; Essa consulta utiliza a cláusula `HAVING` para filtrar os resultados e apenas mostrar os casos que possuem mais de três eventos executados. 3. Quais recursos foram responsáveis pela execução do maior número de eventos? SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1); Essa consulta utiliza a cláusula `HAVING` para filtrar os resultados e apenas mostrar o recurso que foi responsável pela execução do maior número de eventos. A subconsulta `ORDER BY COUNT(*) DESC LIMIT 1` é usada para encontrar o recurso com o maior número de eventos. 4. Selecione todos os casos, e seus respectivos eventos, ordenados pelo número do caso e pela data de início de sua execução. SELECT idcase, activity, timestamp FROM event_log ORDER BY idcase, timestamp; Essa consulta simplesmente seleciona todas as linhas da tabela `event_log`, ordenando-as primeiro pelo número do caso (`idcase`) e, em seguida, pela data de início de execução (`timestamp`).
SELECT idcase, MIN(timestamp) AS start_time, id FROM event_log GROUP BY idcase ORDER BY idcase, start_time;
SELECT idcase, MIN(timestamp) AS start_time FROM event_log GROUP BY idcase ORDER BY idcase, start_time;
Aqui estão as respostas para as perguntas: 1. Liste os identificadores de casos que possuem mais de três eventos. `SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3` Essa query agrupa os casos pelo identificador do caso e conta o número de eventos para cada grupo. Em seguida, ela filtra os grupos que têm mais de 3 eventos e retorna os identificadores dos casos que atendem a essa condição. 2. Recupere os identificadores dos casos que possuem a maior quantidade de eventos. `SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY idcase ORDER BY count(*) DESC LIMIT 1)` Essa query é um pouco mais complexa. Ela primeiro agrupa os casos pelo identificador do caso e conta o número de eventos para cada grupo. Em seguida, ela ordena esses grupos pela quantidade de eventos em ordem decrescente e retorna apenas o grupo com a maior quantidade de eventos. Finalmente, ela retorna os identificadores dos casos que atendem a essa condição. 3. Liste os identificadores de casos que possuem mais de 3 eventos. `SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3` Essa query é a mesma da pergunta 1. 4. Liste todos os casos e seus eventos, ordenando-os pelo identificador do caso e pela sua data de início. `SELECT * FROM event_log ORDER BY idcase, timestamp` Essa query retorna todos os registros da tabela `event_log`, ordenando-os primeiro pelo identificador do caso e em seguida pela data de início do evento.
SELECT idcase, timestamp, activity, resource, cost FROM event_log ORDER BY idcase, timestamp;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS total_executions FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS total_executions FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) as quantidade FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS aprovações FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT resource, COUNT(*) AS num_approvals FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource
SELECT activity, count(*) as occurrences FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31' GROUP BY activity
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as count FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity
SELECT activity, count(*) as frequency FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31' GROUP BY activity ORDER BY frequency DESC;
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT activity, SUM(cost) AS total_cost FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2017-01-01' AND '2018-01-01' GROUP BY activity ORDER BY total_cost DESC;
SELECT activity, MAX(timestamp) AS latest_timestamp FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS recent_timestamp FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS latest_timestamp FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_execution FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_execution FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS latest_timestamp FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS frequency, EXTRACT(YEAR FROM timestamp) AS year FROM event_log WHERE (activity = 'Declaração aprovada pelo supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017) OR (activity = 'Permissão rejeitada pelo funcionário' AND EXTRACT(YEAR FROM timestamp) = 2018) GROUP BY activity, year
SELECT COUNT(CASE WHEN activity = 'Declaração aprovada pelo supervisor' AND strftime('%Y', timestamp) = '2017' THEN 1 ELSE NULL END) AS declarações_2017, COUNT(CASE WHEN activity = 'Permissão rejeitada pelo funcionário' AND strftime('%Y', timestamp) = '2018' THEN 1 ELSE NULL END) AS permissoes_2018 FROM event_log WHERE activity IN ('Declaração aprovada pelo supervisor', 'Permissão rejeitada pelo funcionário')
SELECT COUNT(CASE WHEN activity = 'Declaração aprovada pelo supervisor' AND EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 ELSE NULL END) AS casos_2017, COUNT(CASE WHEN activity = 'Permissão rejeitada pelo funcionário' AND EXTRACT(YEAR FROM timestamp) = 2018 THEN 1 ELSE NULL END) AS casos_2018 FROM event_log WHERE EXTRACT(MONTH FROM timestamp) BETWEEN 1 AND 12;
WITH RankedEvents AS (SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log) SELECT idcase, coalesce((strftime('%s', next_timestamp) - strftime('%s', timestamp)),0) as duration FROM RankedEvents WHERE activity='Declaração aprovada pelo supervisor'
SELECT count(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor'
SELECT COUNT(CASE WHEN EXTRACT(YEAR FROM timestamp) = 2017 THEN 1 END) AS aprovações_supervisor_2017, COUNT(CASE WHEN EXTRACT(YEAR FROM timestamp) = 2018 AND activity = 'Declaração rejeitada pelo supervisor' THEN 1 END) AS rejeições_2018 FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' OR activity = 'Declaração rejeitada pelo supervisor'
SELECT COUNT(DISTINCT resource) FROM event_log
SELECT activity, timestamp, id FROM event_log ORDER BY timestamp;
Aqui está a resposta: SELECT activity, timestamp, id FROM event_log ORDER BY timestamp ASC; Essa consulta seleciona as colunas "activity", "timestamp" e "id" da tabela "event_log", e ordena a lista pela coluna "timestamp" em ordem ascendente (mais antiga para mais recente).
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'declaração requisitada pelo funcionário';
SELECT SUM(CASE WHEN activity = 'declaração requisitada pelo funcionário' THEN 1 ELSE 0 END) AS total_activities FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01'
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' AND resource = 'Thomas'; Essa consulta contará o número de ocorrências da atividade 'declaração requisitada pelo funcionário' em que o recurso Thomas esteve atuante.
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' AND resource = 'Thomas';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity = 'Declaração requisitada pelo funcionário';
SELECT COUNT(*) FROM event_log WHERE resource = 'Thomas' AND activity LIKE '%declaração%';
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT COUNT(*) FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT * FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL;
SELECT activity, COUNT(*) AS num_events FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity ORDER BY num_events DESC;
SELECT activity, count(*) as quantidade_eventos FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL GROUP BY activity
SELECT activity FROM event_log WHERE resource = 'Diana' AND cost IS NOT NULL
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT resource) AS recursos_atuantes FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT COUNT(DISTINCT resource) FROM event_log WHERE id IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 )
SELECT resource, COUNT(*) AS num_cases FROM (SELECT resource, MIN(timestamp) AS first_occurrence FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase) AS subquery GROUP BY resource;
SELECT resource, COUNT(*) AS first_occurrence_count FROM (SELECT resource, MIN(timestamp) AS first_occurrence_timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase) AS subquery GROUP BY resource;
SELECT count(*), resource FROM (SELECT resource, MIN(timestamp) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase) AS subquery GROUP BY resource;
SELECT resource, COUNT(*) AS first_occurrence_count FROM (SELECT resource, MIN(timestamp) AS first_occurrence_timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase) AS first_occurrences GROUP BY resource;
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'
SELECT COUNT(*) AS quantidade_casos FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' AND timestamp BETWEEN '2017-01-01' AND '2017-05-31'
SELECT COUNT(DISTINCT e.idcase) FROM event_log e WHERE e.activity = 'Declaração final aprovada pelo diretor' AND e.timestamp BETWEEN '2017-01-01' AND '2017-05-31';
SELECT COUNT(*) FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' AND activity = 'Declaração final aprovada' AND resource LIKE '%diretor%'
SELECT idcase FROM event_log WHERE resource = 'Charles' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE resource = 'Charles' AND timestamp LIKE '2018-01-%' )
SELECT idcase FROM event_log WHERE resource = 'Charles' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND strftime('%Y-%m', timestamp) = '2018-01' )
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Charles' AND id NOT IN ( SELECT id FROM event_log WHERE strftime('%Y-%m', timestamp) = '2018-01' )
SELECT * FROM event_log WHERE resource = 'Charles' AND strftime('%Y-%m', timestamp)!= '2018-01';
SELECT idcase FROM event_log WHERE activity LIKE '%Charles%' AND timestamp >= '2018-02-01' GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 Essa query agrupa os casos pelo seu identificador (idcase), e then filtra os grupos que possuem mais de 3 eventos (COUNT(*) > 3).
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
A resposta é: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 Essa query agrupa os casos pelo identificador do caso e conta o número de eventos em cada grupo. Em seguida, ela filtra os grupos que têm mais de três eventos e retorna os identificadores dos casos que atendem a essa condição.
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3;
SELECT idcase, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log GROUP BY idcase
Para responder ao questionário, você pode usar a seguinte consulta SQL: /* Responda o seguinte: Recupere o custo total de cada caso. */ SELECT idcase, SUM(cost) FROM event_log group by idcase /* Responda o seguinte: Retorne o custo total para cada caso. */ SELECT idcase, SUM(cost) FROM event_log group by idcase /* Responda o seguinte: Retorne o custo total de cada caso. */ SELECT idcase, SUM(cost) FROM event_log group by idcase /* Responda o seguinte: Tempo total aproximado para cada caso. */ SELECT idcase, SUM(cost) AS tempo_total FROM event_log WHERE activity LIKE '%time%' group by idcase Explicação: * As primeiras três consultas são idênticas e buscam recuperar o custo total para cada caso, agrupando os resultados pela coluna "idcase". * A quarta consulta busca recuperar o tempo total aproximado para cada caso, considerando apenas as linhas da tabela "event_log" que contenham a palavra "time" na coluna "activity". O tempo total é calculado como a soma do custo para cada caso.
SELECT idcase, AVG(timestamp - LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp)) AS avg_duration FROM event_log GROUP BY idcase
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(DISTINCT activity) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT f.name, el.idcase FROM event_log el JOIN funcionarios f ON el.resource = f.id GROUP BY el.idcase, f.name HAVING COUNT(DISTINCT el.id) = 1;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) BETWEEN '2016' AND '2017'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) BETWEEN '2016' AND '2017'
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31' GROUP BY idcase
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) BETWEEN '2016' AND '2017'
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) BETWEEN '2016' AND '2017';
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y', timestamp) IN ('2016', '2017')
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%'
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT * FROM event_log WHERE activity LIKE '%rejeitada%';
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity LIKE '%rejeição%'; Essa consulta seleciona todas as linhas da tabela "event_log" onde a coluna "activity" contém a palavra "rejeição" (ignorando maiúsculas e minúsculas, graças ao COLLATE NOCASE). Isso deve retornar as intervenções que signifiquem uma rejeição de declaração.
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity LIKE '%rejeição%' Essa consulta seleciona todas as linhas da tabela `event_log` onde a coluna `activity` contém a palavra "rejeição" (ignorando maiúsculas e minúsculas, graças ao COLLATE NOCASE). Isso deve fornecer as informações associadas às intervenções de rejeição nas declarações.
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) > 0
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) = (SELECT MAX(cost) FROM event_log)
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) = (SELECT MAX(cost) FROM event_log WHERE cost > 0)
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase;
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase HAVING MAX(cost) > 0
SELECT activity, MIN(cost) AS min_cost, MAX(cost) AS max_cost, COUNT(*) AS total_interventions FROM event_log WHERE cost > 0 GROUP BY activity
SELECT idcase, MIN(cost) AS min_cost, MAX(cost) AS max_cost FROM event_log WHERE cost > 0 GROUP BY idcase
SELECT el.idcase, LEAST( (strftime('%s', el.timestamp) - strftime('%s', (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase)) AS 'Fim da viagem'), (strftime('%s', el.timestamp) - strftime('%s', (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase AND activity IN ('Declaração rejeitada pelo funcionário', 'Pagamento efetuado')))) AS 'Declaração rejeitada pelo funcionário ou Pagamento efetuado' ) AS 'Tempo desde o início do caso', (SELECT activity FROM event_log WHERE idcase = el.idcase AND timestamp = LEAST( (strftime('%s', el.timestamp) - strftime('%s', (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase)) AS 'Fim da viagem'), (strftime('%s', el.timestamp) - strftime('%s', (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase AND activity IN ('Declaração rejeitada pelo funcionário', 'Pagamento efetuado')))) AS 'Declaração rejeitada pelo funcionário ou Pagamento efetuado' )) AS 'Atividade final' FROM event_log el WHERE el.activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário', 'Pagamento efetuado') ORDER BY el.idcase;
SELECT el.idcase, LEAST( TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase), el.timestamp) WHEN el.activity = 'Fim da viagem' THEN TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase), el.timestamp) WHEN el.activity = 'Declaração rejeitada pelo funcionário' THEN TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase), el.timestamp) WHEN el.activity = 'Pagamento efetuado' THEN TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE idcase = el.idcase), el.timestamp) ) AS 'Tempo desde o início do caso', el.activity AS 'Atividade final' FROM event_log el WHERE el.activity = 'Fim da viagem' OR el.activity = 'Declaração rejeitada pelo funcionário' OR el.activity = 'Pagamento efetuado' ORDER BY el.idcase;
SELECT p.idcase, LEAST( strftime('%s', p.timestamp) - strftime('%s', e.start_time), strftime('%s', x.timestamp) - strftime('%s', e.start_time), strftime('%s', y.timestamp) - strftime('%s', e.start_time) ) as tempo_decorrido, CASE WHEN strftime('%s', p.timestamp) - strftime('%s', e.start_time) = LEAST(strftime('%s', p.timestamp) - strftime('%s', e.start_time), strftime('%s', x.timestamp) - strftime('%s', e.start_time), strftime('%s', y.timestamp) - strftime('%s', e.start_time)) THEN 'Fim da viagem' WHEN strftime('%s', x.timestamp) - strftime('%s', e.start_time) = LEAST(strftime('%s', p.timestamp) - strftime('%s', e.start_time), strftime('%s', x.timestamp) - strftime('%s', e.start_time), strftime('%s', y.timestamp) - strftime('%s', e.start_time)) THEN 'Declaração rejeitada pelo funcionário' ELSE 'Pagamento efetuado' END as atividade FROM event_log p INNER JOIN (SELECT MIN(timestamp) as start_time, idcase FROM event_log GROUP by idcase) e ON e.idcase = p.idcase LEFT JOIN event_log x ON x.idcase=e.idcase AND x.activity = 'Declaração rejeitada pelo funcionário' LEFT JOIN event_log y ON y.idcase=e.idcase AND y.activity = 'Pagamento efetuado' INNER JOIN (SELECT MAX(timestamp) as end_time, activity, idcase FROM event_log WHERE activity='Fim da viagem' OR activity= 'Declaração rejeitada pelo funcionário' OR activity='Pagamento efetuado' GROUP by idcase) f ON f.idcase=e.idcase
SELECT el.idcase, TIMESTAMPDIFF(SECOND, e.start_time, COALESCE(x.timestamp, COALESCE(y.timestamp, el.timestamp))) as 'Tempo de processamento', COALESCE(x.activity, COALESCE(y.activity, 'Fim da viagem')) as 'Atividade final' FROM event_log el LEFT JOIN ( SELECT idcase, MIN(timestamp) as start_time FROM event_log GROUP BY idcase ) e ON e.idcase = el.idcase LEFT JOIN event_log x ON x.idcase = el.idcase AND x.activity = 'Declaração rejeitada pelo funcionário' LEFT JOIN event_log y ON y.idcase = el.idcase AND y.activity = 'Pagamento efetuado' WHERE el.activity!= 'Fim da viagem' AND el.activity!= 'Declaração rejeitada pelo funcionário' AND el.activity!= 'Pagamento efetuado' ORDER BY el.idcase;
SELECT el.idcase, strftime('%s', el.timestamp) - strftime('%s', MIN(ef.timestamp)) AS 'Tempo desde a primeira intervenção', ef.activity AS 'Ultima atividade' FROM event_log el INNER JOIN ( SELECT idcase, MIN(timestamp) AS start_time FROM event_log GROUP BY idcase ) ef ON el.idcase = ef.idcase WHERE el.activity IN ('fim da viagem', 'declaração rejeitada pelo funcionário', 'pagamento efetuado') GROUP BY el.idcase, ef.activity ORDER BY el.idcase;
SELECT p.idcase, p.activity AS final_activity, strftime('%s', p.timestamp) - strftime('%s', e.start_time) AS time_taken FROM event_log p INNER JOIN ( SELECT idcase, MIN(timestamp) AS start_time FROM event_log GROUP BY idcase ) e ON e.idcase = p.idcase WHERE p.activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário', 'Pagamento efetuado') ORDER BY p.idcase, p.activity;
SELECT el.idcase, el.activity, TIMESTAMPDIFF(SECOND, e.start_time, el.timestamp) AS tempo_decorrido FROM event_log el INNER JOIN ( SELECT idcase, MIN(timestamp) AS start_time FROM event_log GROUP BY idcase ) e ON e.idcase = el.idcase WHERE el.activity = 'fim da viagem' OR el.activity = 'declaração rejeitada pelo funcionário' OR el.activity = 'pagamento efetuado' ORDER BY el.idcase, el.activity;
SELECT p.idcase, p.activity AS final_activity, strftime('%s', p.timestamp) - strftime('%s', e.start_time) AS time_taken FROM event_log p INNER JOIN ( SELECT idcase, MIN(timestamp) AS start_time FROM event_log GROUP BY idcase ) e ON e.idcase = p.idcase LEFT JOIN event_log x ON x.idcase = p.idcase AND x.activity IN ('Declaração rejeitada pelo funcionário', 'Pagamento efetuado') LEFT JOIN event_log y ON y.idcase = p.idcase AND y.activity = 'Fim da viagem' WHERE p.timestamp >= e.start_time AND (p.activity = 'Fim da viagem' OR x.activity IN ('Declaração rejeitada pelo funcionário', 'Pagamento efetuado')) ORDER BY p.idcase, p.timestamp;
SELECT p.idcase, p.activity, strftime('%s', p.timestamp) - strftime('%s', LEAST(p.timestamp, x.timestamp, y.timestamp)) as 'Tempo decorrido' FROM event_log p LEFT JOIN event_log x ON x.idcase = p.idcase AND x.activity = 'Declaração rejeitada pelo funcionário' LEFT JOIN event_log y ON y.idcase = p.idcase AND y.activity = 'Pagamento efetuado' WHERE p.activity = 'Fim da viagem' OR x.timestamp IS NOT NULL OR y.timestamp IS NOT NULL ORDER BY p.idcase;
SELECT TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'Início da viagem' AND idcase = e.idcase), (SELECT MAX(CASE WHEN activity = 'Fim da viagem' THEN timestamp ELSE NULL END) FROM event_log WHERE idcase = e.idcase) ) AS tempo_processamento, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'Início da viagem' AND idcase = e.idcase), (SELECT MAX(CASE WHEN activity = 'Rejeição' THEN timestamp ELSE NULL END) FROM event_log WHERE idcase = e.idcase) ) AS tempo_rejeicao, TIMESTAMPDIFF(SECOND, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'Início da viagem' AND idcase = e.idcase), (SELECT MAX(CASE WHEN activity = 'Pagamento efetuado' THEN timestamp ELSE NULL END) FROM event_log WHERE idcase = e.idcase) ) AS tempo_pagamento FROM event_log e WHERE activity = 'Início da viagem' GROUP BY e.idcase
SELECT * FROM event_log WHERE activity = 'Requisição de pagamento'
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento'
SELECT * FROM event_log WHERE activity LIKE '%pagamento%' AND activity LIKE '%declaração%';
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT AVG(DATEDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration, activity FROM event_log GROUP BY activity
SELECT AVG(DATEDIFF(timestamp, timestamp)) AS avg_duration, activity FROM event_log GROUP BY activity;
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(duration) AS average_duration, activity FROM event_log GROUP BY activity;
SELECT AVG(DATEDIFF(end_timestamp, timestamp)) AS average_duration, activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(TIMESTAMPDIFF(SECOND, timestamp, timestamp)) AS avg_duration, activity FROM event_log GROUP BY activity;
SELECT AVG(DATEDIFF(timestamp, timestamp)) AS average_duration, activity FROM event_log GROUP BY activity
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS avg_duration FROM event_log GROUP BY activity
SELECT activity, AVG(TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp), timestamp)) AS avg_duration FROM event_log GROUP BY activity;
SELECT AVG(DATEDIFF(next_timestamp, timestamp)) AS avg_duration, activity FROM ( SELECT idcase, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp FROM event_log ) AS subquery GROUP BY activity
SELECT activity, AVG(LEAST(timestamp, (SELECT timestamp FROM event_log WHERE activity = e.activity ORDER BY timestamp DESC LIMIT 1)) - timestamp) AS avg_duration FROM event_log e GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(TIMESTAMPDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) / 3600.0) AS avg_duration, activity FROM event_log GROUP BY activity;
Para responder à pergunta "Informe qual é a duração média de cada atividade", você precisaria ter uma coluna de tempo no banco de dados para calcular a duração. No entanto, baseado no esquema de banco de dados fornecido, não há uma coluna de tempo. Portanto, não é possível calcular a duração média de cada atividade. No entanto, se você tiver uma coluna de tempo, você poderia usar a função AVG() para calcular a duração média de cada atividade. Por exemplo: SELECT AVG(DATEDIFF(timestamp,?)) AS average_duration, activity FROM event_log GROUP BY activity Nesse exemplo, a função DATEDIFF() é usada para calcular a diferença entre o timestamp da próxima atividade e o timestamp da atividade atual. O resultado é a duração da atividade. A função AVG() é usada para calcular a média dessas durações para cada atividade. Lembre-se de que, sem uma coluna de tempo, não é possível calcular a duração média de cada atividade.
SELECT AVG(TIMESTAMPDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) / 3600.0) AS avg_duration, activity FROM event_log GROUP BY activity;
SELECT AVG(TIMESTAMPDIFF(SECOND, timestamp, LEAD(timestamp) OVER (PARTITION BY activity ORDER BY timestamp)) / 3600.0) AS avg_duration, activity FROM event_log GROUP BY activity;
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT AVG(cost) AS average_cost, activity FROM event_log GROUP BY activity;
SELECT AVG(cost) AS average_cost, activity FROM event_log GROUP BY activity;
SELECT AVG(cost) AS average_cost, activity FROM event_log GROUP BY activity
SELECT AVG(duration), activity FROM event_log GROUP BY activity
SELECT activity, AVG(DATEDIFF(timestamp, LAG(timestamp) OVER (PARTITION BY activity ORDER BY timestamp))) AS avg_duration FROM event_log GROUP BY activity
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase ORDER BY max_cost DESC;
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase ORDER BY max_cost DESC LIMIT 1;
SELECT idcase, MAX(cost) AS max_cost FROM event_log GROUP BY idcase HAVING MAX(cost) = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE idcase = (SELECT MAX(cost) FROM event_log)
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ORDER BY total_cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT activity, SUM(cost) AS total_cost FROM event_log GROUP BY activity ORDER BY total_cost DESC LIMIT 1;
SELECT activity, MAX(cost) AS max_cost FROM event_log GROUP BY activity ORDER BY max_cost DESC;
SELECT activity, MAX(cost) AS max_cost FROM event_log GROUP BY activity ORDER BY max_cost DESC;
A resposta é: SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log) Essa query seleciona todos os eventos (todas as linhas da tabela `event_log`) cujo custo (`cost`) é igual ao custo mais alto (`MAX(cost)`) presente no log de eventos.
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
Aqui está a resposta: SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log) Essa query seleciona todos os eventos (todas as colunas) do log de eventos onde o valor de custo é igual ao máximo custo registrado no log.
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC LIMIT 1;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log);
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC;
SELECT idcase, activity, cost FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log)
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity = 'Início da viagem' Essa consulta seleciona todos os registros da tabela "event_log" onde a coluna "activity" tem o valor 'Início da viagem'.
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
Para responder às suas perguntas, vou fornecer as soluções SQL correspondentes. **1. Liste os eventos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem' no mesmo caso.** SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp **2. Liste os eventos dos casos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem'.** SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp **3. Para cada caso, liste os eventos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem'.** SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp **4. Liste os eventos, com seus respectivos atributos, que referem à execução da atividade 'início da viagem'.** SELECT * FROM event_log WHERE activity = 'Início da viagem' Essas são as respostas às suas perguntas. Se você tiver alguma dúvida ou precisar de mais ajuda, sinta-se à vontade para perguntar!
Para responder ao último questionário, você pode usar o seguinte comando SQL: SELECT * FROM event_log WHERE activity = 'Início da viagem'; Este comando seleciona todas as linhas (ou seja, todas as informações) da tabela "event_log" onde a coluna "activity" tem o valor 'Início da viagem'.
select count(*), activity from event_log where activity = 'Início da viagem' or activity = 'Fim da viagem' GROUP BY activity
A resposta para o último exemplo é: SELECT * FROM event_log WHERE activity = 'Início da viagem'; Essa consulta seleciona todas as linhas da tabela "event_log" onde a coluna "activity" tem o valor 'Início da viagem', ou seja, todos os eventos relacionados à execução da atividade 'início da viagem'.
SELECT * FROM event_log WHERE activity = 'Início da viagem';
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
SELECT * FROM event_log WHERE activity = 'Início da viagem';
SELECT * FROM event_log WHERE activity = 'Início da viagem';
select count(*), activity from event_log where activity = 'Início da viagem' or activity = 'Fim da viagem' GROUP BY activity
SELECT * FROM event_log WHERE activity = 'Início da viagem';
SELECT * FROM event_log WHERE activity = 'Início da viagem' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity = 'Início da viagem';
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT activity, COUNT(*) as total_registers FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS count FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as quantidade_eventos FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_executions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS num_events FROM event_log GROUP BY activity ORDER BY num_events DESC;
A resposta é: SELECT COUNT(*) AS "Quantidade de execuções", activity FROM event_log GROUP BY activity; Essa consulta contará o número de vezes que cada atividade foi executada, agrupando os resultados por atividade. As outras consultas fornecidas são similares, mas com ligeiras diferenças: * A primeira consulta contará o número de casos únicos (idcase) para cada atividade. * A segunda consulta contará o número de instâncias de processos (idcase) para cada atividade. * A terceira consulta contará o número de casos únicos (idcase) para cada atividade, mas sem especificar o número de instâncias de processos. No entanto, a consulta que você está procurando é a primeira, que contará o número de vezes que cada atividade foi executada.
SELECT activity, COUNT(*) AS num_execucoes FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS count FROM event_log GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity ORDER BY quantidade_intervencoes DESC;
SELECT activity, COUNT(*) AS total_interventions FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS quantidade_intervencoes FROM event_log GROUP BY activity
SELECT activity, COUNT(*) AS total_interventions FROM event_log GROUP BY activity
Para responder às suas perguntas, vou fornecer as soluções SQL correspondentes. **1. Encontre os eventos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem' no mesmo caso.** select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp **2. Para cada caso, encontre os eventos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem'.** select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp **3. Encontrar os eventos dos casos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem'.** select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp **4. Apresente o custo de cada evento e a atividade executada, ordenando pelo custo do evento.** SELECT activity, resource, cost FROM event_log ORDER BY cost; Essas são as soluções SQL para as suas perguntas. Se você tiver alguma dúvida ou precisar de mais ajuda, sinta-se à vontade para perguntar!
SELECT activity, cost FROM event_log ORDER BY cost;
SELECT activity, cost FROM event_log ORDER BY cost DESC;
SELECT activity, cost FROM event_log ORDER BY cost;
select e1.activity, e1.resource, e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp > e2.timestamp
SELECT activity, cost FROM event_log ORDER BY cost ASC;
SELECT activity, SUM(cost) AS total_cost FROM event_log GROUP BY activity ORDER BY total_cost DESC;
SELECT resource, SUM(cost) AS total_cost FROM event_log GROUP BY resource ORDER BY total_cost DESC;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'
SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'
SELECT * FROM event_log WHERE activity LIKE '%permissão%' ORDER BY timestamp;
SELECT e1.idcase, e1.activity, e1.timestamp, e1.resource, e1.cost FROM event_log e1 WHERE e1.activity LIKE '%permissão%' ORDER BY e1.idcase, e1.timestamp;
Based on the provided SQL examples and the given database schema, I'll try to answer the question: "What characterizes the events associated with the execution of the activity 'permissão'?" From the SQL examples, we can infer that the events associated with the execution of the activity 'permissão' have the following characteristics: 1. The activity name starts with the string 'permissão'. 2. There may be multiple events associated with the same activity 'permissão' (as seen in the second SQL example). 3. The first event associated with the activity 'permissão' has a specific timestamp (as seen in the third SQL example). In summary, the events associated with the execution of the activity 'permissão' are characterized by having an activity name that starts with the string 'permissão', and possibly having multiple events with the same activity name.
Aqui estão as respostas para os exemplos de SQL fornecidos: 1. Qual é a quantidade de casos cujo primeiro evento está associado a uma atividade com nome iniciando com 'permissão'? A resposta é a mesma para os dois exemplos, pois ambos estão procurando a quantidade de casos cujo primeiro evento está associado a uma atividade com nome iniciando com 'permissão'. O exemplo 1 é um pouco mais detalhado, pois agrupa os eventos por caso e seleciona o menor timestamp para cada caso, mas isso não muda o resultado final. Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 2. Informe a quantidade de casos nos quais o primeiro evento está associado a uma atividade cujo rótulo inicia com a palavra 'permissão'. A resposta é a mesma que para o exemplo 1. Resposta: `SELECT COUNT(idcase) FROM (SELECT idcase, activity, MIN(timestamp) FROM event_log GROUP BY idcase) AS e1 WHERE e1.activity LIKE '%permissão%'` 3. Liste os casos nos quais há mais de um registro de evento associado a atividade cujo nome inicia com 'permissão'. Essa é uma pergunta diferente, pois não está procurando a quantidade de casos, mas sim os casos que têm mais de um registro de evento associado a atividade cujo nome inicia com 'permissão'. Resposta: `select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1` 4. Mostre os valores dos atributos dos eventos associados à atividade 'permissão'. Essa é uma pergunta de seleção de dados, que não precisa de agrupamento ou contagem. Simplesmente precisa selecionar os valores dos atributos dos eventos associados à atividade 'permissão'. Resposta: `SELECT * FROM event_log WHERE activity = 'permissão'`
SELECT * FROM event_log WHERE activity LIKE '%permissão%'
SELECT DISTINCT activity FROM event_log WHERE activity LIKE 'permissão%' AND cost IS NULL
Para responder à pergunta, você pode utilizar a seguinte consulta SQL: SELECT activity, idcase, resource, timestamp, cost FROM event_log WHERE activity LIKE '%permissao%' Essa consulta seleciona todas as informações associadas às intervenções de permissão, incluindo a atividade, o ID da declaração, o recurso utilizado, o horário da intervenção e o custo da intervenção.
A resposta é: SELECT MAX(cost) FROM event_log
A resposta é: SELECT MAX(cost) FROM event_log
A resposta é: SELECT MAX(cost) FROM event_log Este comando SELECT retorna o valor máximo da coluna "cost" na tabela "event_log".
A resposta é: SELECT MAX(cost) FROM event_log Essa query retorna o valor máximo da coluna "cost" do banco de dados "event_log", o que é o custo mais alto já registrado no log de eventos.
SELECT MAX(cost) AS maior_custo FROM event_log;
SELECT MAX(cost) AS max_cost FROM event_log ORDER BY cost DESC LIMIT 1;
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas') AND resource = 'Sara' AND resource = 'Thomas';
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' OR resource = 'Thomas' Essa consulta seleciona os identificadores dos casos (idcase) da tabela event_log onde o recurso (resource) é 'Sara' ou 'Thomas'. O operador OR é usado para combinar as condições. O DISTINCT é usado para remover duplicados e retornar apenas os identificadores únicos dos casos.
SELECT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas'
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas';
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Sara' AND resource = 'Thomas';
SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contará o número de vezes que cada recurso foi responsável pela execução de uma atividade nomeada como 'declaração rejeitada pela administração'.
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contará o número de vezes que cada recurso esteve associado à execução da atividade 'Declaração rejeitada pela administração'.
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contará o número de vezes que cada recurso esteve associado à execução da atividade 'Declaração rejeitada pela administração'.
A resposta é: SELECT resource, COUNT(*) AS num_instances FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta retorna a lista de recursos e o número de instâncias de execução da atividade "Declaração rejeitada pela administração" associadas a cada recurso.
A resposta é: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contabiliza a frequência com que cada recurso foi responsável pela execução de uma atividade nomeada como 'declaração rejeitada pela administração'.
A resposta é: SELECT COUNT(*) AS quantidade, resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource; Essa consulta contabiliza a quantidade de vezes em que cada recurso esteve associado à execução de uma atividade nomeada como 'declaração rejeitada pela administração'. O grupo BY resource agrupa os resultados por recurso, e o COUNT(*) contabiliza a quantidade de vezes que cada recurso aparece na tabela.
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta contará o número de vezes que cada recurso foi responsável por uma instância de execução da atividade "Declaração rejeitada pela administração".
SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource
A resposta é: SELECT COUNT(*), resource FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa query contabiliza o número de eventos associados a uma 'declaração rejeitada pela administração' para cada recurso, agrupando os resultados por recurso.
SELECT resource, COUNT(*) as rejeicoes FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource
SELECT idcase, resource, COUNT(*) AS num_executions FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY idcase, resource
SELECT resource, idcase, COUNT(*) AS count FROM event_log WHERE activity LIKE 'Declaração rejeitada pela administração%' GROUP BY resource, idcase
SELECT idcase, resource, COUNT(*) AS quantidade FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY idcase, resource
SELECT resource, idcase, COUNT(*) AS num_instances FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT resource, idcase, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
A resposta é: SELECT resource, COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource Essa consulta retorna uma lista com cada recurso e a quantidade de vezes que ele esteve associado à execução de uma atividade nomeada como 'declaração rejeitada pela administração'.
SELECT resource, idcase, COUNT(*) AS num_executions FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT resource, idcase, COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT resource, idcase, COUNT(*) AS count_events FROM event_log WHERE activity = 'Declaração rejeitada pela administração' GROUP BY resource, idcase
SELECT el1.resource, el1.idcase, COUNT(*) as rejeicoes FROM event_log el1 WHERE el1.activity = 'Declaração rejeitada pela administração' GROUP BY el1.resource, el1.idcase
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT IN ('Início da viagem', 'Fim da viagem');
/* Responda o seguinte: Recupere os atributos dos cinco eventos de custos mais altos. */ SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC LIMIT 5
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost = (SELECT MAX(cost) FROM event_log) ORDER BY cost DESC LIMIT 5;
SELECT activity, resource, cost, timestamp FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT activity, resource, cost, timestamp FROM event_log ORDER BY cost DESC LIMIT 5;
/* Responda o seguinte: Faça um relatório que organize os dados referentes às cinco intervenções mais caras já registradas. */ SELECT * FROM ( SELECT id, activity, timestamp, resource, cost, idcase, ROW_NUMBER() OVER (ORDER BY cost DESC) AS row_num FROM event_log ) AS subquery WHERE row_num <= 5 ORDER BY cost DESC;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC LIMIT 5;
/* Responda o seguinte: Liste cinco eventos de custos mais altos. */ SELECT * FROM event_log ORDER BY cost DESC LIMIT 5
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost IS NOT NULL ORDER BY cost DESC LIMIT 5;
SELECT activity, SUM(cost) AS total_cost FROM event_log GROUP BY activity ORDER BY total_cost DESC LIMIT 5;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 Essa consulta agrupa os casos (idcase) e conta o número de eventos (linhas) em cada grupo. Em seguida, ela filtra os grupos que têm mais de um evento (COUNT(*) > 1).
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT id) > 1 Essa consulta agrupa os casos pelo campo "idcase" e verifica se o número de registros (ou seja, o número de eventos) para cada caso é maior que 1. Se for, isso significa que ocorreram mais de um evento em cada um desses casos. A função `COUNT(DISTINCT id)` é usada para contar o número de registros únicos para cada caso, garantindo que não sejam contados eventos repetidos.
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT timestamp) > 1;
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT idcase, COUNT(*) as num_occurrences FROM event_log GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1
SELECT DISTINCT activity FROM event_log GROUP BY activity, idcase HAVING count(activity) > 3
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02' Essa consulta seleciona todos os registros (ou seja, todos os eventos) da tabela "event_log" onde a coluna "timestamp" está entre as datas '2018-10-01' e '2018-10-02'.
SELECT activity, COUNT(*) FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) BETWEEN '2018-10-01' AND '2018-10-02' AND MAX(timestamp) BETWEEN '2018-10-01' AND '2018-10-02') GROUP BY activity;
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE strftime('%Y-%m-%d', timestamp) IN ('2018-10-01', '2018-10-02');
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
Para responder à pergunta "Quais intervenções foram feitas entre um de outubro e dois de outubro do ano de 2018?", você pode usar a seguinte consulta SQL: SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02' Essa consulta seleciona todas as linhas da tabela `event_log` onde o campo `timestamp` está entre as datas '2018-10-01' e '2018-10-02', e retorna as atividades únicas (ou seja, sem repetir) que ocorreram durante esse período.
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE resource LIKE 'M%'
SELECT * FROM event_log WHERE resource LIKE 'M%' ORDER BY timestamp;
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 1)
SELECT * FROM event_log WHERE resource LIKE 'M%' AND activity!= 'Fim da viagem'
SELECT f.id, f.nome, el.activity FROM funcionarios f JOIN event_log el ON f.id = el.resource WHERE f.nome LIKE 'M%';
SELECT * FROM event_log WHERE resource LIKE 'M%';
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 5;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT DISTINCT activity FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 5
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 5;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT DISTINCT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 3 )
SELECT activity FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 3 ) GROUP BY activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity, COUNT(*) AS occurrences FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT activity, idcase, COUNT(*) as num_events FROM event_log GROUP BY activity, idcase HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity FROM event_log WHERE idcase = 'declaração 49464' EXCEPT SELECT activity FROM event_log WHERE idcase = 'declaração 76667';
Based on the provided SQL examples and schema, I'll try to answer the questions: 1. What occurred in the declaration 49464 that did not occur in the declaration 76667? The SQL query `select activity from event_log where idcase = 'declaração 49464' except select activity from event_log where idcase = 'declaração 76667'` will return the activities that occurred in declaration 49464 but not in declaration 76667. 2. Which activities existing in the case 'declaração 49464' do not happen in the case 'declaração 76667'? The SQL query `select activity from event_log where idcase = 'declaração 49464' except select activity from event_log where idcase = 'declaração 76667'` will return the activities that exist in declaration 49464 but not in declaration 76667. 3. How many different resources worked in each case and what is the cost of this case? The SQL query `SELECT COUNT(DISTINCT resource), SUM(cost), idcase FROM event_log GROUP BY idcase` will return the count of distinct resources, the total cost, and the idcase for each group. 4. What is the size of the trace associated with the case 'declaração 56300'? There is no specific query provided to answer this question. However, if we assume that the "trace" refers to the number of events or activities in the case 'declaração 56300', we can use the following query: `SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300'` This query will return the total number of events or activities associated with the case 'declaração 56300'.
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) AS total_events FROM event_log WHERE idcase = 'declaração 56300';
SELECT COUNT(*) AS total_events FROM event_log WHERE idcase = 'declaração 56300';
select activity from event_log where idcase = 'declaração 49464' except select activity from event_log where idcase = 'declaração 76667'
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) AS num_executions FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1 ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, count(*) FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING count(*) > 1
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
SELECT resource, count(distinct idcase) AS num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(DISTINCT idcase) FROM event_log GROUP BY resource Essa query retorna a quantidade de casos diferentes para cada recurso.
SELECT resource, count(distinct idcase) as num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as num_instances FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource; Essa consulta utiliza a cláusula `GROUP BY` para agrupar os registros da tabela `event_log` pela coluna `resource`, e a função `COUNT(*)` para contar o número de registros em cada grupo. O resultado é uma lista com o nome do recurso e o número de eventos em que cada recurso atuou.
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
SELECT COUNT(*) AS total_acts, resource FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) as num_occurrences, resource FROM event_log GROUP BY resource Essa consulta contará o número de ocorrências da atuação de cada recurso e exibirá o resultado em uma coluna chamada "num_occurrences".
A resposta certa é: SELECT resource, COUNT(*) AS num_execucoes FROM event_log GROUP BY resource ORDER BY resource; Essa query faz o seguinte: * Seleciona a coluna "resource" e a função de contagem "COUNT(*)" para calcular o número de vezes que cada recurso foi associado à execução de atividades. * Agrupa os resultados pela coluna "resource" usando a cláusula "GROUP BY". * Ordena a resposta por ordem alfabética do nome identificador do recurso usando a cláusula "ORDER BY". A coluna "num_execucoes" é uma alias para a coluna de contagem, que é o número de vezes que cada recurso foi associado à execução de atividades.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource Essa consulta contará o número de ocorrências da atuação de cada recurso e exibirá o resultado em uma coluna chamada "num_occurrences".
SELECT resource, COUNT(*) AS num_interventions FROM event_log GROUP BY resource
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas', 'Diana');
SELECT idcase FROM event_log WHERE resource = 'Sara' INTERSECT SELECT idcase FROM event_log WHERE resource = 'Thomas'
SELECT DISTINCT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara');
SELECT idcase FROM event_log WHERE resource IN ('Thomas', 'Diana', 'Sara')
SELECT idcase FROM event_log WHERE resource IN ('Sara', 'Thomas');
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) em que cada recurso está associado, considerando apenas os eventos que ocorreram entre 1/5/2017 e 1/6/2017.
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS casos FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
A resposta é: SELECT resource, COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) para cada recurso (resource) nos eventos ocorridos entre 1/5/2017 e 1/6/2017.
SELECT COUNT(*) AS instances, resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource Essa query contabiliza a quantidade de declarações (idcase) para cada recurso (resource) que foi alocado entre 1/5/2017 e 1/6/2017.
A resposta certa é: SELECT COUNT(DISTINCT idcase) FROM event_log WHERE timestamp between '2017-05-01' and '2017-06-01' GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) em que cada recurso está associado, considerando apenas os eventos ocorridos entre 1/5/2017 e 1/6/2017.
A resposta é: SELECT COUNT(DISTINCT idcase) AS casos, resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource Essa consulta contará o número de casos únicos (idcase) para cada recurso, considerando apenas os eventos que ocorreram entre 1/5/2017 e 1/6/2017.
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') GROUP BY activity, resource
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa')
SELECT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') GROUP BY activity, resource
SELECT DISTINCT activity, resource FROM event_log WHERE resource NOT IN ('Joshua', 'Teresa') AND activity LIKE '%responsável pelo orçamento%'
SELECT activity, resource FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 ) AND resource NOT IN ('Joshua', 'Teresa');
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) AND idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 )
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) AND idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' )
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity IN ('Início da atividade', 'Fim da atividade') AND e.idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') )
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT DISTINCT idcase FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') AND id NOT IN (SELECT id FROM event_log WHERE activity = 'Requisição de pagamento')
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE resource IS NULL; Essa consulta seleciona todos os registros da tabela "event_log" onde o campo "resource" é nulo, o que significa que esses eventos não estão associados a recursos.
SELECT * FROM event_log WHERE resource IS NULL OR resource = ''
SELECT activity FROM event_log WHERE resource IS NULL;
SELECT * FROM event_log WHERE resource IS NULL;
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE resource IS NULL; Essa consulta seleciona todos os registros da tabela "event_log" onde o campo "resource" é nulo, o que significa que nenhum recurso foi associado a esses eventos.
SELECT activity FROM event_log WHERE resource IS NULL
SELECT * FROM event_log WHERE resource IS NULL OR resource = '';
SELECT COUNT(*), resource FROM event_log WHERE idcase IS NULL OR idcase = '' GROUP BY resource
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase HAVING MIN(timestamp) = (SELECT MIN(timestamp) FROM event_log WHERE timestamp < '2017-03-01')
SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m', MIN(timestamp)) < '2017-03'
SELECT idcase FROM event_log WHERE activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING MIN(timestamp) < '2017-03-01' )
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01'
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01' AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING MIN(timestamp) < '2017-03-01' )
SELECT DISTINCT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase HAVING MIN(timestamp) IS NOT NULL;
SELECT * FROM event_log WHERE timestamp < '2017-03-01'
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase HAVING MIN(timestamp) IS NOT NULL
SELECT idcase FROM event_log WHERE timestamp < '2017-03-01' GROUP BY idcase
SELECT * FROM event_log WHERE timestamp < '2017-03-01' AND idcase IS NOT NULL
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31';
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp IN ( SELECT MIN(timestamp) FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' GROUP BY idcase )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp LIKE '2017-03-%';
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y-%m', timestamp) = '2017-03' AND id = (SELECT MIN(id) FROM event_log WHERE activity = 'Início da viagem' AND strftime('%Y-%m', timestamp) = '2017-03')
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp = ( SELECT MIN(timestamp) FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' GROUP BY idcase )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31' ORDER BY idcase;
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp BETWEEN '2017-03-01' AND '2017-03-31';
SELECT resource FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 ) GROUP BY resource HAVING COUNT(*) > 5 ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) > 5 ) GROUP BY resource
Se um recurso atuou mais de cinco vezes em um mesmo caso, liste o nome do recurso e a quantidade de vezes que ele atuou. SELECT resource, COUNT(*) AS "Quantidade de vezes" FROM event_log WHERE idcase IS NOT NULL GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 ) GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5 ORDER BY num_events DESC;
SELECT resource, idcase, COUNT(*) AS num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 5 ) GROUP BY resource, idcase ORDER BY num_events DESC;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(*) > 5;
SELECT resource FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 5
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 5
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC LIMIT 1;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC LIMIT 10;
A resposta é: SELECT resource FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 10; Essa consulta faz o seguinte: 1. Seleciona todos os registros do log de eventos onde a atividade é 'Declaração final aprovada pelo supervisor'. 2. Agrupa os registros por recurso (resource). 3. Conta o número de vezes que cada recurso atuou na atividade. 4. Ordena os recursos em ordem decrescente baseado no número de vezes que cada um atuou na atividade. 5. Limita a consulta para mostrar apenas os 10 recursos que mais atuaram na atividade.
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC LIMIT 10;
SELECT resource, COUNT(*) AS aprovações FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY aprovações DESC LIMIT 10;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY frequency DESC;
Aqui está a resposta: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY frequency DESC; Essa query lista todos os recursos em ordem decrescente, considerando o número de vezes em que cada um foi associado à execução da atividade 'declaração final aprovada pelo supervisor'.
A resposta é: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY frequency DESC; Essa consulta seleciona os recursos que atuaram na execução da atividade 'Declaração final aprovada pelo supervisor', contando quantas vezes cada recurso esteve associado à atividade. Em seguida, ordena a lista em ordem decrescente (DESC) pelo número de vezes em que cada recurso esteve associado à atividade.
Aqui está a resposta: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY frequency DESC; Essa query seleciona os recursos (resource) presentes no log de eventos, contando a frequência com que cada um atuou na atividade 'Declaração final aprovada pelo supervisor'. Em seguida, ordena a resposta em ordem decrescente (DESC) pela frequência.
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor' GROUP BY resource ORDER BY count DESC;
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND (resource = 'Eugene' OR resource = 'Marie')
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie'); Essa consulta contará a quantidade de casos únicos (idcase) em que a atividade 'Declaração aprovada pelo responsável pelo orçamento' foi associada aos recursos Eugene ou Marie.
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugene', 'Marie');
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugine', 'Marie');
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Declaração aprovada pelo responsável pelo orçamento' AND resource IN ('Eugine', 'Marie'); Essa consulta contará a quantidade de casos únicos (idcase) em que a atividade 'Declaração aprovada pelo responsável pelo orçamento' foi associada aos recursos Eugine ou Marie.
SELECT COUNT(*) FROM event_log WHERE resource IN ('Eugene', 'Marie') AND activity LIKE '%aprovaram%' AND activity LIKE '%responsável pelo orçamento%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' AND resource IN ('Eugene', 'Marie') AND activity LIKE '%aprovado%'
SELECT activity FROM event_log WHERE idcase = 'declaração 49464' EXCEPT SELECT activity FROM event_log WHERE idcase = 'declaração 76667';
SELECT activity FROM event_log WHERE idcase = 'declaração 49464' AND activity NOT IN ( SELECT activity FROM event_log WHERE idcase = 'declaração 76667' )
SELECT activity FROM event_log WHERE idcase = 'declaração 49464' EXCEPT SELECT activity FROM event_log WHERE idcase = 'declaração 76667';
SELECT el1.activity, el1.timestamp, el1.resource, el1.cost FROM event_log el1 WHERE el1.idcase = 'declaração 49464' EXCEPT SELECT el2.activity, el2.timestamp, el2.resource, el2.cost FROM event_log el2 WHERE el2.idcase = 'declaração 76667'
SELECT resource, COUNT(*) AS num_vezes FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2 ORDER BY resource;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2 ORDER BY resource;
SELECT resource, count(*) as frequency FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING count(*) > 2 ORDER BY resource;
SELECT resource, COUNT(*) AS num_vezes FROM event_log WHERE activity = 'declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2;
SELECT resource, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity = 'Declaração requisitada pelo funcionário' GROUP BY resource HAVING COUNT(*) > 2
SELECT resource, COUNT(*) AS num_requests FROM event_log WHERE activity = 'Requisição de declaração' GROUP BY resource HAVING COUNT(*) > 2
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity = 'Requisição de pagamento' AND e.timestamp >= '2017-05-01 00:00:00' AND e.timestamp < '2017-05-11 00:00:00'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp >= '2017-05-01 00:00:00' AND timestamp < '2017-05-11 00:00:00'
SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10'
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity = 'Requisição de pagamento' AND e.timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10' GROUP BY idcase ORDER BY COUNT(*) ASC;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' AND timestamp BETWEEN '2017-05-01' AND '2017-05-10';
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) as num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY num_resources DESC;
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND resource = 'Christopher'
SELECT idcase FROM event_log WHERE resource = 'Christopher' AND activity = 'Closed';
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1 AND resource = 'Christopher'
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = (SELECT COUNT(DISTINCT activity) FROM event_log WHERE resource = 'Christopher')
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT id) = 1;
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE resource = 'Christopher')
SELECT idcase FROM event_log WHERE employee = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT resource) = (SELECT COUNT(DISTINCT resource) FROM event_log WHERE employee = 'Christopher' AND idcase = event_log.idcase)
SELECT idcase FROM event_log WHERE resource = 'Christopher' GROUP BY idcase HAVING COUNT(DISTINCT activity) = 1
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT MAX(count) FROM ( SELECT idcase, COUNT(DISTINCT activity) AS count FROM event_log GROUP BY idcase, resource ) AS subquery)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT id) = (SELECT COUNT(*) FROM event_log WHERE idcase = idcase)
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) = 1
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT activity) = (SELECT COUNT(*) FROM event_log WHERE idcase = event_log.idcase)
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(resource) = (SELECT COUNT(*) FROM event_log WHERE resource IS NOT NULL)
SELECT idcase, resource FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) = 1;
SELECT idcase, resource, COUNT(*) AS count_resources FROM event_log GROUP BY idcase, resource HAVING COUNT(DISTINCT resource) > 1
SELECT count(DISTINCT idcase), 'funcionário' as grupo FROM event_log WHERE activity like '%funcionário%' UNION SELECT count(DISTINCT idcase), 'supervisor' as grupo FROM event_log WHERE activity like '%supervisor%' UNION SELECT count(DISTINCT idcase), 'administração' as grupo FROM event_log WHERE activity like '%administração%' UNION SELECT count(DISTINCT idcase), 'pré-aprovador' as grupo FROM event_log WHERE activity like '%pré-aprovador%' UNION SELECT count(DISTINCT idcase), 'responsável pelo orçamento' as grupo FROM event_log WHERE activity like '%responsável pelo orçamento%' UNION SELECT count(DISTINCT idcase), 'diretor' as grupo FROM event_log WHERE activity like '%diretor%'
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase, DATE_TRUNC('day', timestamp) HAVING COUNT(*) > 1;
SELECT idcase FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) as num_events, DATE(timestamp) as event_date FROM event_log GROUP BY idcase, DATE(timestamp) HAVING COUNT(*) > 1
A resposta é: SELECT idcase, timestamp FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase, timestamp HAVING COUNT(*) > 1 ) Essa consulta utiliza a subconsulta para agrupar as linhas do log de eventos por caso e data, e então filtra apenas os casos que têm mais de uma intervenção no mesmo dia.
SELECT idcase, COUNT(*) as num_interventions FROM event_log WHERE timestamp >= DATE_TRUNC('day', timestamp) GROUP BY idcase, DATE_TRUNC('day', timestamp) HAVING COUNT(*) > 1
SELECT resource, idcase, COUNT(*) FROM event_log WHERE cost IS NULL GROUP BY resource, idcase;
SELECT idcase, COUNT(*) AS num_events, resource FROM event_log WHERE cost IS NULL GROUP BY idcase, resource
SELECT resource, idcase, COUNT(*) FROM event_log WHERE cost IS NULL GROUP BY resource, idcase
SELECT idcase, resource, COUNT(*) AS num_null_cost_events FROM event_log WHERE cost IS NULL GROUP BY idcase, resource
SELECT resource, idcase, COUNT(*) AS num_events FROM event_log WHERE cost IS NULL GROUP BY resource, idcase
SELECT idcase, COUNT(*) AS num_events, resource FROM event_log WHERE cost IS NULL GROUP BY idcase, resource
SELECT resource, COUNT(*) as num_intervencoes_sem_custo FROM event_log WHERE cost = 0 GROUP BY resource
SELECT employee, COUNT(*) AS num_interventions_without_cost FROM (SELECT SUBSTRING_INDEX(SUBSTRING_INDEX(resource, ';', 1), ':', -1) AS employee, id, cost FROM event_log WHERE cost = 0) AS no_cost_events GROUP BY employee
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE activity = 'permissão rejeitada pelo diretor' Essa consulta busca todos os registros na tabela "event_log" onde a coluna "activity" tem o valor "permissão rejeitada pelo diretor".
SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity = 'Permissão rejeitada pelo diretor';
SELECT * FROM event_log WHERE activity LIKE '%permissão rejeitada pelo diretor%'
SELECT activity FROM event_log WHERE activity LIKE '%rejeitada pelo diretor%' AND activity NOT LIKE '%aprovada%';
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS date, SUM(cost) AS total_cost FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS data, SUM(cost) AS soma_custo FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(1) AS quantidade_eventos FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, SUM(cost) AS custo_total FROM event_log GROUP BY DATE(timestamp)
SELECT activity, cost FROM event_log WHERE cost > 1000 AND (resource LIKE '%supervisor%' OR resource LIKE '%diretor%')
WITH RankedEvents AS (SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log) SELECT idcase, coalesce((strftime('%s', next_timestamp) - strftime('%s', timestamp)),0) as duration FROM RankedEvents WHERE activity='Declaração aprovada pelo supervisor'
WITH RankedEvents AS ( SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log ) SELECT idcase, coalesce((strftime('%s', next_timestamp) - strftime('%s', timestamp)), 0) as duration FROM RankedEvents WHERE activity = 'Declaração aprovada pelo supervisor';
SELECT activity, cost FROM event_log WHERE activity LIKE '%supervisor%' OR activity LIKE '%diretor%' AND cost > 1000;
SELECT activity, cost FROM event_log WHERE cost > 1000 AND (resource LIKE '%supervisor%' OR resource LIKE '%diretor%')
SELECT activity, resource, cost FROM event_log WHERE activity LIKE '%supervisor%' OR activity LIKE '%diretor%' AND cost > 1000
SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase
SELECT count(*), idcase FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) as events_count, COUNT(*)/ (SELECT COUNT(DISTINCT idcase) FROM event_log) as percentage FROM event_log GROUP BY idcase ORDER BY events_count DESC;
SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase
A resposta é: SELECT COUNT(*), idcase FROM event_log GROUP BY idcase; Essa query contará o número de eventos (ou linhas) para cada instância de processo (idcase) na tabela event_log.
SELECT idcase, count(*) as num_interventions FROM event_log GROUP BY idcase
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_tasks FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT activity), resource FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(*) FROM event_log GROUP BY resource; Essa query retorna a quantidade de atividades associadas a cada um dos recursos.
SELECT resource, COUNT(activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) AS num_tasks FROM event_log GROUP BY resource
SELECT idcase, COUNT(DISTINCT activity) AS num_actions FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log WHERE idcase LIKE '%Alexis%' -- ou qualquer outro critério para identificar os casos atribuídos a Alexis GROUP BY idcase
SELECT idcase, COUNT(DISTINCT activity) AS num_activities FROM event_log WHERE activity LIKE '%Alexis%' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE resource = 'Alexis' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE idcase LIKE '%Alexis%' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE resource = 'Alexis' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE resource = 'Alexis' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_tasks, COUNT(DISTINCT id) AS num_instances FROM event_log WHERE resource = 'Alexis' GROUP BY idcase
SELECT activity from event_log GROUP BY activity HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY activity ORDER BY COUNT(*) desc LIMIT 1)
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo supervisor' AND EXISTS (SELECT 1 FROM event_log WHERE activity = 'início da viagem' AND idcase = event_log.idcase AND timestamp > event_log.timestamp)
WITH RankedEvents AS ( SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log ) SELECT COUNT(*) FROM RankedEvents WHERE activity = 'Permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM RankedEvents AS prev_event WHERE prev_event.idcase = RankedEvents.idcase AND prev_event.activity = 'Início da viagem' AND prev_event.next_timestamp <= RankedEvents.timestamp )
WITH RankedEvents AS (SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log) SELECT idcase, coalesce((strftime('%s', next_timestamp) - strftime('%s', timestamp)),0) as duration FROM RankedEvents WHERE activity='Declaração aprovada pelo supervisor'
SELECT COUNT(*) AS num_instances FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM event_log AS prev_event WHERE prev_event.activity = 'Início da viagem' AND prev_event.timestamp < event_log.timestamp )
WITH RankedEvents AS ( SELECT id, activity, timestamp, LEAD(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_timestamp, idcase FROM event_log ) SELECT idcase FROM RankedEvents WHERE activity = 'Declaração aprovada pelo supervisor' AND EXISTS ( SELECT 1 FROM RankedEvents AS next_event WHERE next_event.idcase = RankedEvents.idcase AND next_event.activity = 'Início da viagem' AND next_event.timestamp > RankedEvents.timestamp )
SELECT COUNT(*) FROM event_log AS el JOIN (SELECT idcase, MIN(timestamp) AS start_time FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' GROUP BY idcase) AS supervisor_approval ON el.idcase = supervisor_approval.idcase WHERE el.activity = 'Declaração aprovada pelo supervisor' AND el.timestamp > supervisor_approval.start_time
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo supervisor' AND EXISTS (SELECT 1 FROM event_log AS start_voyage WHERE start_voyage.activity = 'Início da viagem' AND start_voyage.id < event_log.id AND start_voyage.resource = event_log.resource AND start_voyage.idcase = event_log.idcase)
SELECT COUNT(*) FROM event_log JOIN case ON event_log.idcase = case.id WHERE event_log.activity = 'Permissão final aprovada pelo supervisor' AND event_log.timestamp < (SELECT timestamp FROM event_log WHERE activity = 'Viagem iniciada' ORDER BY timestamp LIMIT 1)
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 WHERE e1.activity = 'Fim da viagem' AND e1.timestamp NOT LIKE '%2017-12-12%'
SELECT * FROM event_log WHERE activity = 'Fim da viagem' AND timestamp < '2017-12-12' OR timestamp > '2017-12-12';
SELECT * FROM event_log WHERE activity = 'Fim da viagem' AND timestamp < '2017-12-12' OR timestamp > '2017-12-12'
SELECT * FROM event_log WHERE activity = 'Fim da viagem' AND timestamp < '2017-12-12' OR timestamp > '2017-12-12'
SELECT * FROM event_log WHERE activity = 'Fim da viagem' AND timestamp < '2017-12-12 00:00:00' OR timestamp > '2017-12-12 23:59:59'
SELECT id, activity, timestamp, resource FROM event_log WHERE activity = 'Fim da viagem' AND timestamp NOT LIKE '%2017-12-12%'
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND timestamp < '2017-12-13 00:00:00' -- dia 13 de dezembro de 2017
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource;
SELECT resource, COUNT(*) AS total_events FROM event_log GROUP BY resource
A resposta é: SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource; Essa consulta contará o número de eventos associados a cada recurso e o resultado será apresentado em uma coluna chamada "num_events".
SELECT user, COUNT(DISTINCT idcase) AS num_executions FROM event_log GROUP BY user
SELECT resource, COUNT(*) AS num_events FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as total_actions FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_actions FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT activity) AS num_activities, resource FROM event_log GROUP BY resource
A resposta é: SELECT COUNT(DISTINCT activity) AS num_activities, resource FROM event_log GROUP BY resource Essa query contará o número de atividades únicas (DISTINCT) em que cada recurso (resource) trabalhou, e mostrará o resultado em uma coluna chamada `num_activities`.
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_activities FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT activity), resource FROM event_log GROUP BY resource
SELECT activity FROM event_log WHERE resource = 'Virginia' EXCEPT SELECT activity FROM event_log WHERE resource = 'Virginia' GROUP BY activity HAVING COUNT(*) = 0
SELECT DISTINCT activity FROM event_log WHERE resource!= 'Virginia'
SELECT activity FROM event_log WHERE resource!= 'Virginia' GROUP BY activity HAVING NOT EXISTS ( SELECT 1 FROM event_log WHERE resource = 'Virginia' AND activity = event_log.activity )
SELECT activity FROM event_log WHERE idcase NOT LIKE '%Virginia%' AND activity IS NOT NULL GROUP BY activity HAVING COUNT(*) = 0
SELECT activity FROM event_log WHERE activity NOT IN ( SELECT ea.activity FROM employee_activities ea JOIN employees e ON ea.employee_id = e.id WHERE e.name = 'Virginia' )
Based on the provided SQL queries and the given database schema, I'll answer the questions: 1. Em quais declarações, uma ação teve que ser executada mais de uma vez? The query `SELECT DISTINCT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1` returns the `idcase` values where an action was executed more than once. This query groups the events by `idcase` and `activity`, and then filters the results to only include those with a count greater than 1. 2. Ações de aprovação aparecem em quantas declarações? The query `SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%aprovada%'` counts the number of distinct `idcase` values where the `activity` contains the string 'aprovada'. This query filters the events to only include those with the 'aprovada' activity and then counts the unique `idcase` values. 3. Analise as declarações e verifique quais ações foram executadas mais do que trêz vezes em cada uma delas. The query `SELECT DISTINCT activity FROM event_log GROUP BY activity, idcase HAVING count(activity) > 3` returns the distinct `activity` values that were executed more than 3 times for each `idcase`. This query groups the events by `activity` and `idcase`, and then filters the results to only include those with a count greater than 3. 4. Em quais ações a Virgínia ainda não tem experiência? Since the question doesn't provide any specific information about the `idcase` value 'Virgínia', I'll assume it's a typo or a missing piece of information. If you meant to ask about a different `idcase` value, please provide more context or clarify the question.
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY idcase;
SELECT AVG(cost) FROM event_log WHERE activity LIKE '%rejeitada%';
SELECT AVG(cost) FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity LIKE '%rejeitada%' )
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY idcase HAVING COUNT(DISTINCT idcase) > 0;
SELECT AVG(cost) AS media_cost FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY idcase
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity ='rejeição'
SELECT AVG(cost) AS average_cost FROM event_log WHERE activity NOT LIKE '%success%' -- ou WHERE activity!='success' GROUP BY idcase
SELECT DISTINCT e1.idcase FROM event_log e1 inner join (SELECT idcase, MIN(timestamp) as timestamp FROM event_log GROUP BY idcase order by timestamp) AS e2 on e1.idcase=e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER by e2.timestamp
SELECT idcase, activity, timestamp, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS previous_timestamp, timestamp - LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS duration FROM event_log WHERE activity = 'Declaração aprovada pelo supervisor' ORDER BY idcase, timestamp;
SELECT e1.idcase, e1.timestamp as start_time, (SELECT MIN(timestamp) FROM event_log e2 WHERE e2.idcase = e1.idcase AND e2.activity = 'Declaração aprovada pelo supervisor' AND e2.timestamp > e1.timestamp) as end_time, TIMESTAMPDIFF(SECOND, e1.timestamp, (SELECT MIN(timestamp) FROM event_log e2 WHERE e2.idcase = e1.idcase AND e2.activity = 'Declaração aprovada pelo supervisor' AND e2.timestamp > e1.timestamp)) as duration FROM event_log e1 WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER BY e1.timestamp;
SELECT DISTINCT e1.idcase FROM event_log e1 inner join (SELECT idcase, MIN(timestamp) as timestamp FROM event_log GROUP BY idcase order by timestamp) AS e2 on e1.idcase=e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER by e2.timestamp
SELECT DISTINCT e1.idcase FROM event_log e1 INNER JOIN ( SELECT idcase, MIN(timestamp) AS timestamp FROM event_log GROUP BY idcase ORDER BY timestamp ) AS e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Declaração rejeitada pelo supervisor' ORDER BY e2.timestamp;
SELECT activity, AVG(cost) AS average_cost, COUNT(*) AS total_actions FROM event_log WHERE activity LIKE '%aprovada pelo supervisor' GROUP BY activity ORDER BY average_cost DESC;
SELECT AVG(DATEDIFF(timestamp, (SELECT MIN(timestamp) FROM event_log WHERE activity = 'Declaração enviada'))) AS average_time FROM event_log WHERE activity = 'Declaração final aprovada pelo supervisor';
SELECT COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' Essa consulta contará o número de linhas na tabela "event_log" onde a coluna "activity" tem o valor "Declaração rejeitada pelo pré-aprovador".
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) AS quantidade FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador'
SELECT COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador';
SELECT resource, COUNT(*) AS quantidade FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase ORDER BY quantidade DESC;
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador';
SELECT idcase, timestamp, resource FROM event_log WHERE activity = 'Fim da viagem' ORDER BY resource;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp;
SELECT e1.idcase, e1.timestamp, e1.resource FROM event_log AS e1 WHERE e1.activity = 'Fim da viagem' ORDER BY e1.resource;
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT e1.resource, e1.activity, e1.timestamp FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.activity!= 'Fim da viagem' ORDER BY e1.resource;
SELECT idcase, MAX(timestamp) AS finalization_date, resource FROM event_log WHERE activity = 'Fim da viagem' GROUP BY resource ORDER BY resource;
A resposta é: SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase; Essa consulta contará o número de eventos registrados para cada caso e retornará um resultado como o seguinte: | idcase | num_events | |--------|------------| | caso1 | 5 | | caso2 | 3 | | caso3 | 8 | |... |... | Essa consulta é equivalente à primeira SQL fornecida no início da sua pergunta.
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase
A resposta é: SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase Essa consulta retorna um resultado com dois campos: `idcase` e `quantidade_eventos`. O campo `idcase` lista os IDs dos casos, e o campo `quantidade_eventos` lista a quantidade de eventos executados em cada caso.
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) as events_count FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS num_actions FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS num_interventions FROM event_log GROUP BY idcase
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS quantidade FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS quantidade_casos FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(*) FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Fim da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(*) FROM event_log WHERE strftime('%Y-%m-%d', timestamp) BETWEEN '2017-05-02' AND '2017-05-12' AND idcase NOT LIKE '%_finalizado';
SELECT COUNT(*) FROM event_log WHERE activity = 'final da viagem' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp DESC;
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp;
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity = 'envio de lembrete' ORDER BY timestamp;
SELECT COUNT(*) FROM (SELECT idcase, activity, max(timestamp) FROM event_log GROUP BY idcase) WHERE activity='Envio de lembrete';
SELECT e.idcase, e.id, e.resource, e.timestamp FROM event_log e WHERE e.activity = 'Envio de lembrete' ORDER BY e.timestamp DESC
SELECT id, activity, timestamp, resource FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp;
SELECT idcase, resource, id, timestamp FROM event_log WHERE activity LIKE '%envio de lembrete%' GROUP BY idcase, resource, id ORDER BY timestamp;
Aqui estão as respostas para as perguntas: 1. Liste os casos e o recurso nos quais as atividades foram todas alocadas para um mesmo recurso. SELECT idcase, resource from event_log group by idcase HAVING COUNT(DISTINCT resource) = 1 Essa query agrupa os casos por idcase e verifica se há apenas um recurso associado a cada caso. Se sim, retorna os casos e recursos correspondentes. 2. Quantas ocorrências de atividades foram atribuídas para cada recurso? Liste em ordem alfabética do recurso. SELECT resource, COUNT(*) FROM event_log GROUP BY resource Essa query agrupa as ocorrências de atividades por recurso e retorna o número de ocorrências para cada recurso, em ordem alfabética. 3. Quantas são as ocorrências de atividade quando agrupadas por recurso? Ordene a resposta por ordem alfabética do nome do recurso. SELECT resource, COUNT(*) FROM event_log GROUP BY resource Essa query é idêntica à anterior, mas a ordem de retorno é explicitamente definida como alfabética. 4. Liste todos os recursos em ordem alfabética e sem repetições. SELECT DISTINCT resource FROM event_log ORDER BY resource Essa query retorna todos os recursos únicos da tabela event_log, em ordem alfabética, sem repetições. O comando DISTINCT é usado para remover duplicados.
A resposta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC; Essa query lista todos os recursos presentes na tabela "event_log", sem duplicatas, e ordena-os em ordem alfabética.
A resposta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC; Essa query lista todos os recursos (resource) presentes na tabela "event_log", excluindo duplicados (DISTINCT), e ordena-os em ordem alfabética (ORDER BY resource ASC).
SELECT DISTINCT resource FROM event_log ORDER BY resource ASC;
A resposta para a última pergunta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC
A resposta é: SELECT DISTINCT resource FROM event_log ORDER BY resource ASC; Essa query lista os nomes dos recursos registrados no log de eventos, sem repetições, e ordena-os em ordem alfabética.
SELECT DISTINCT resource AS "Funcionário" FROM event_log ORDER BY "Funcionário" ASC;
SELECT resource, COUNT(DISTINCT idcase) as num_cases FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource, COUNT(DISTINCT idcase) AS num_instances FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource, COUNT(*) as num_activities FROM event_log WHERE activity = 'viagem' -- substitua 'viagem' por 'travel' se o campo for em inglês GROUP BY resource HAVING COUNT(*) > 200;
SELECT DISTINCT resource FROM event_log WHERE idcase IS NOT NULL GROUP BY resource HAVING COUNT(DISTINCT idcase) > 200;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(idcase) > 200
SELECT DISTINCT resource AS "Funcionário" FROM event_log GROUP BY resource HAVING COUNT(idcase) > 200 ORDER BY COUNT(idcase) DESC;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) > 200;
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa consulta contará o número de recursos únicos presentes no log de eventos.
A resposta é: SELECT COUNT(DISTINCT resource) FROM event_log; Essa consulta contará o número de recursos únicos registrados no log de eventos.
SELECT COUNT(DISTINCT resource) FROM event_log
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE activity LIKE '%tratamento%';
Para responder à pergunta, precisamos considerar que a tabela "event_log" não tem uma coluna chamada "pessoa", portanto, não podemos fazer uma contagem direta de pessoas associadas às atividades. No entanto, podemos supor que a coluna "idcase" representa um identificador único para cada caso, e que cada caso pode ter várias atividades associadas. Nesse caso, a resposta seria: /* Responda o seguinte: Quantas pessoas estão associadas à atividades no log de eventos? */ SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log Essa consulta contará o número de casos únicos (idcase) presentes no log de eventos, o que pode ser considerado como o número de pessoas associadas às atividades.
Para responder à pergunta "Quantas pessoas estão associadas à execução de atividades no log de eventos?", precisamos considerar que o esquema de banco de dados não inclui uma coluna para identificar as pessoas. Portanto, não é possível responder essa pergunta com base nos dados fornecidos. No entanto, se você tiver uma coluna adicional no esquema de banco de dados que identifique as pessoas, por exemplo, uma coluna chamada "user", você poderia usar a seguinte consulta para obter o resultado: SELECT COUNT(DISTINCT user) FROM event_log Essa consulta contará o número de usuários únicos que estão associados à execução de atividades no log de eventos.
SELECT COUNT(DISTINCT resource) FROM event_log WHERE activity LIKE 'declaração%';
SELECT COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE activity LIKE '%tratamento de declarações%';
SELECT COUNT(DISTINCT resource) FROM event_log
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT activity FROM event_log WHERE activity LIKE '%declaração%';
SELECT idcase, activity FROM event_log WHERE activity LIKE '%declaração%' GROUP BY idcase, activity
Based on the provided SQL examples, the most common actions in processing declarations are: 1. **Filtering**: Filtering data to extract specific information, such as listing actions that start with the letter 'E' (Example 2). 2. **Grouping and Aggregation**: Grouping data by specific columns and performing aggregation operations, such as counting the frequency of each activity (Example 1). 3. **Window Functions**: Using window functions to analyze data within a group, such as identifying consecutive actions performed by different resources (Example 3). 4. **Pattern Matching**: Using pattern matching to search for specific patterns in data, such as finding actions that contain the word 'declaração' (Example 4). These actions are common in processing declarations because they allow you to: * Filter out irrelevant data * Identify patterns and trends * Analyze data at different levels of granularity * Extract specific information from large datasets In the context of the provided schema, these actions can be used to analyze the event log data, such as identifying the most common activities, finding consecutive actions performed by different resources, or extracting specific information about declarations.
SELECT activity, AVG(cost) AS avg_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS avg_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS avg_cost FROM event_log GROUP BY activity
SELECT activity, AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT COUNT(*) FROM event_log WHERE idcase IS NOT NULL AND cost IS NULL;
SELECT COUNT(*) FROM event_log WHERE cost IS NULL OR cost = 0
SELECT idcase FROM event_log GROUP BY idcase HAVING SUM(cost) = (SELECT SUM(cost) FROM event_log GROUP BY idcase ORDER BY SUM(cost) DESC LIMIT 1)
SELECT COUNT(*) AS num_cases_without_cost FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0 GROUP BY idcase
Para responder à última pergunta, você precisa contar o número de casos (ou linhas) na tabela "event_log" onde o custo é nulo. Você pode fazer isso com a seguinte consulta: SELECT COUNT(*) FROM event_log WHERE cost IS NULL; Isso contará o número de linhas na tabela "event_log" onde o custo é nulo.
SELECT COUNT(*) FROM event_log WHERE cost IS NULL AND idcase IS NOT NULL
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT COUNT(*) FROM event_log WHERE cost = 0;
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permissao%' OR activity LIKE '%declaração%'
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'
SELECT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
SELECT * FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%';
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'
SELECT count(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor'
SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declaração rejeitada pelo diretor%' COLLATE NOCASE;
Para responder à pergunta, você precisaria filtrar os eventos que estão associados à atividade 'declaração rejeitada pelo diretor' e contar o número de resultados. Você pode fazer isso com a seguinte consulta: SELECT COUNT(*) FROM event_log WHERE activity = 'declaração rejeitada pelo diretor'; Essa consulta contará o número de linhas que atendem ao critério de atividade 'declaração rejeitada pelo diretor' e retornará o resultado como um valor numérico.
SELECT count(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor'
Para responder à pergunta, você precisa filtrar as ocorrências de 'declaração rejeitada pelo diretor' no processo e contar o número de resultados. Você pode fazer isso com a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor' AND idcase = <nome_do_processo> Substitua <nome_do_processo> pelo nome do processo que você deseja verificar. Se você não sabe o nome do processo, você pode usar a seguinte consulta para obter a lista de processos e, em seguida, verificar qual é o processo que você está procurando: SELECT DISTINCT idcase FROM event_log WHERE activity = 'Declaração rejeitada pelo diretor' Isso retornará uma lista de IDs de caso que tiveram ocorrências de 'declaração rejeitada pelo diretor'. Você pode usar essa lista para verificar qual é o processo que você está procurando e, em seguida, usar a consulta anterior para contar o número de ocorrências.
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração rejeitada pela administração';
SELECT AVG(cost) AS average_cost FROM event_log;
SELECT AVG(cost) FROM event_log
SELECT AVG(cost) FROM event_log
SELECT AVG(cost) AS average_cost FROM event_log GROUP BY activity
SELECT AVG(cost) FROM event_log;
SELECT AVG(cost) AS average_cost FROM event_log WHERE cost IS NOT NULL;
SELECT AVG(cost) AS average_cost, activity FROM event_log GROUP BY activity;
Para calcular o valor médio dos custos associados aos eventos, você pode usar a função AVG() em SQL. Aqui está a resposta: SELECT AVG(cost) AS average_cost FROM event_log; Essa consulta retorna o valor médio dos custos associados aos eventos, que é calculado como a soma dos custos dividida pelo número total de eventos.
SELECT AVG(cost) AS average_cost FROM event_log WHERE cost IS NOT NULL;
SELECT AVG(cost) AS average_cost FROM event_log
A resposta é: SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource Essa query contabiliza a quantidade de casos (idcase) em que cada recurso (resource) foi utilizado.
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource ORDER BY num_cases;
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase) AS num_cases, resource FROM event_log GROUP BY resource ORDER BY num_cases DESC;
SELECT resource, COUNT(DISTINCT idcase) AS num_declarações FROM event_log WHERE activity LIKE '%Declaração salva pelo funcionário%' GROUP BY resource
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
A resposta é: SELECT COUNT(*) FROM event_log WHERE resource = 'Peter'; Este comando SELECT contará o número de linhas na tabela "event_log" onde o campo "resource" tem o valor 'Peter', o que representa o número de eventos executados pelo funcionário 'Peter'.
SELECT COUNT(*) FROM event_log WHERE resource = 'Peter';
SELECT COUNT(*) AS rendimento FROM event_log WHERE resource = 'Peter';
SELECT resource, COUNT(*) AS num_cases FROM event_log GROUP BY resource HAVING COUNT(*) > 3
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3;
SELECT user, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY user HAVING COUNT(DISTINCT idcase) > 3 ORDER BY num_cases DESC;
SELECT resource FROM event_log GROUP BY resource, idcase HAVING COUNT(DISTINCT resource) > 3
SELECT DISTINCT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(DISTINCT idcase) > 3
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity LIKE '%requisição de pagamento%' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_activities FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') GROUP BY idcase ORDER BY num_activities ASC;
SELECT idcase, COUNT(*) as num_actions FROM event_log WHERE activity = 'Requisição de pagamento' GROUP BY idcase ORDER BY num_actions;
SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('Fim da viagem', 'Declaração rejeitada pelo funcionário') ORDER BY timestamp;
Aqui está a resposta: SELECT DISTINCT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC; Essa query recupera as datas em que foram registradas a execução das atividades 'fim da viagem' ou 'declaração rejeitada pelo funcionário', ordenando da mais antiga para a mais recente. O DISTINCT é usado para remover duplicados, pois uma mesma data pode ser registrada em diferentes linhas do banco de dados.
SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC;
Aqui está a resposta: SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'closed' ORDER BY timestamp ASC; Essa consulta seleciona as linhas da tabela `event_log` onde a atividade é 'Fim da viagem' ou 'closed', e ordena as linhas pela coluna `timestamp` em ordem crescente (mais antiga para mais recente).
SELECT timestamp FROM event_log WHERE activity = 'Fim da viagem' OR activity = 'Declaração rejeitada pelo funcionário' ORDER BY timestamp ASC;
SELECT DISTINCT timestamp FROM event_log WHERE activity IN ('Fim da viagem', 'Declaração rejeitada por funcionário') ORDER BY timestamp ASC;
SELECT e1.idcase, e1.resource, e1.activity FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.activity NOT IN ('Fim da viagem') AND e1.timestamp > e2.timestamp ORDER BY e1.timestamp;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource;
A resposta é: SELECT resource, COUNT(*) AS num_executions FROM event_log GROUP BY resource ORDER BY resource ASC; Essa consulta contará o número de execuções de atividades para cada recurso e ordenará a resposta em ordem alfabética do nome do recurso.
A resposta certa é: SELECT resource, COUNT(*) AS "Quantidade de execuções" FROM event_log GROUP BY resource ORDER BY resource; Essa query seleciona a coluna "resource" (nome do recurso) e a função COUNT(*) (que conta o número de linhas para cada recurso) e agrupa as linhas pelo recurso. O resultado é ordenado em ordem alfabética pelo nome do recurso. Aqui está a explicação da query: * `SELECT resource, COUNT(*) AS "Quantidade de execuções"`: Seleciona a coluna "resource" e a função COUNT(*) que conta o número de linhas para cada recurso. O alias "Quantidade de execuções" é usado para renomear a coluna COUNT(*) para uma legibilidade melhor. * `FROM event_log`: A query é executada na tabela "event_log". * `GROUP BY resource`: Agrupa as linhas pela coluna "resource", ou seja, cada recurso é considerado como um grupo. * `ORDER BY resource`: Ordena o resultado em ordem alfabética pelo nome do recurso.
A resposta para a pergunta é: SELECT resource, COUNT(*) AS "Quantidade de execuções" FROM event_log GROUP BY resource ORDER BY resource; Essa query retorna a lista de recursos, juntamente com a quantidade de execuções de atividades atribuídas a cada recurso, ordenada por ordem alfabética do nome identificador do recurso.
A resposta para a pergunta é: SELECT resource, COUNT(*) AS execution_count FROM event_log GROUP BY resource ORDER BY resource ASC; Essa consulta recupera a quantidade de execuções de atividades atribuídas para cada recurso, ordenando a resposta por ordem alfabética do nome identificador do recurso.
SELECT count(*), activity, resource FROM event_log GROUP BY resource, activity
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource ASC;
A resposta é: SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource ASC; Essa query agrupa as linhas do evento_log pela coluna "resource" e conta o número de ocorrências para cada recurso. Em seguida, ordena a resposta em ordem alfabética pelo nome do recurso.
SELECT resource, COUNT(*) as occurrences FROM event_log GROUP BY resource ORDER BY resource ASC;
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS total_actions FROM event_log GROUP BY resource ORDER BY total_actions DESC;
SELECT activity, COUNT(*) FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%' GROUP BY activity;
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT * FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT activity, count(*) FROM event_log WHERE activity LIKE 'E%' GROUP BY activity;
SELECT activity, count(*) FROM event_log WHERE activity LIKE 'E%' GROUP BY activity;
SELECT activity FROM event_log WHERE activity LIKE 'E%' AND activity LIKE '%declaração%';
SELECT activity FROM event_log WHERE activity LIKE 'E%';
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
A resposta é: SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost; Essa query seleciona os eventos cujo custo está entre 50 e 400, e retorna os respectivos identificadores de evento, atividades realizadas, recursos e custos. O comando `ORDER BY cost` ordena a saída pela coluna de custo.
SELECT id FROM (select id, MAX(timestamp) as timestamp FROM event_log GROUP by idcase) ORDER by timestamp
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost;
SELECT id, activity, resource, cost FROM event_log WHERE cost BETWEEN 50 AND 400 ORDER BY cost;
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração salva pelo funcionário';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração salva pelo funcionário'; Essa consulta seleciona todos os recursos únicos (DISTINCT) que estão associados à atividade 'Declaração salva pelo funcionário' no banco de dados.
SELECT e.name, COUNT(*) as num_cases FROM event_log el JOIN employees e ON el.idcase = e.id WHERE el.activity = 'Declaração salva' GROUP BY e.name
SELECT DISTINCT resource FROM event_log WHERE activity ='save'
SELECT DISTINCT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity FROM event_log WHERE timestamp >= '2018-04-12 00:00:00' AND timestamp < '2018-04-13 00:00:00'
SELECT DISTINCT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12'
SELECT activity FROM event_log WHERE timestamp = (SELECT MAX(timestamp) FROM event_log WHERE timestamp <= '2018-04-12') GROUP BY activity
SELECT activity FROM event_log WHERE timestamp = (SELECT MAX(timestamp) FROM event_log WHERE timestamp = '2018-04-12');
SELECT activity FROM event_log WHERE timestamp = '2018-04-12'
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT t.name FROM event_log e JOIN task t ON e.idcase = t.id WHERE strftime('%Y-%m-%d', e.timestamp) = '2018-04-12' AND e.activity LIKE 'processamento de declaração finalizada';
Aqui está a resposta: SELECT e.id, e.activity, e.timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp; Essa consulta seleciona o identificador do evento (id), a atividade associada (activity) e a data de término da execução (timestamp) de todos os eventos que estão associados às atividades 'Permissão final aprovada pelo supervisor' ou 'Declaração aprovada pelo supervisor', e ordena os resultados por data de término.
SELECT e.id, e.activity, e.timestamp AS end_timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp DESC;
Aqui está a resposta: SELECT e.id, e.activity, e.timestamp AS "data de término" FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp; Essa consulta seleciona os eventos associados às atividades 'Permissão final aprovada pelo supervisor' ou 'Declaração aprovada pelo supervisor', e retorna o identificador do evento, a atividade associada e a data de término da execução de cada um deles. A ordenação é feita pela data de término.
Aqui está a resposta: SELECT e.id, e.activity, e.timestamp FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp DESC; Essa consulta seleciona os eventos que correspondem às atividades 'Permissão final aprovada pelo supervisor' ou 'Declaração aprovada pelo supervisor', e lista os respectivos identificadores de evento, atividade executadas e datas de término da execução, ordenando-os pelas datas de término em ordem decrescente (mais recentes primeiro).
SELECT e.id, e.activity, e.timestamp AS end_date FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp;
SELECT e.id, e.activity, e.timestamp AS data_termino FROM event_log e WHERE e.activity IN ('Permissão final aprovada pelo supervisor', 'Declaração aprovada pelo supervisor') ORDER BY e.timestamp;
SELECT id, activity, timestamp FROM event_log WHERE activity LIKE '%aprovacao final%' AND activity LIKE '%supervisor%' ORDER BY timestamp DESC;
SELECT id, activity, timestamp FROM event_log WHERE activity IN ('Aprovação final de permissão', 'Aprovação de declaração por supervisor') ORDER BY timestamp;
A resposta é: SELECT * FROM event_log WHERE cost IS NOT NULL
A resposta é: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todas as linhas (tuplas) da tabela "event_log" onde o valor da coluna "cost" não é nulo.
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todas as linhas da tabela "event_log" onde o campo "cost" tem um valor não nulo, o que significa que há um custo associado àquela linha.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todas as linhas (tuplas) da tabela "event_log" onde o campo "cost" tem um valor não nulo (ou seja, há um custo associado).
Para responder ao questionamento, você pode utilizar a seguinte consulta SQL: SELECT * FROM event_log WHERE cost IS NOT NULL; Essa consulta seleciona todos os registros da tabela "event_log" onde o campo "cost" não é nulo, o que significa que todos os eventos que possuem um custo associado serão retornados.
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT * FROM event_log WHERE cost IS NOT NULL;
SELECT idcase, activity, cost FROM event_log WHERE cost IS NOT NULL ORDER BY idcase;
SELECT e.idcase, COUNT(*) FROM event_log e INNER JOIN (SELECT idcase, MIN(timestamp) as timestamp FROM event_log where activity='Declaração final aprovada pelo diretor' GROUP BY idcase order by idcase) e1 on e.idcase = e1.idcase and e.timestamp < e1.timestamp GROUP BY e.idcase
Para responder à pergunta, você precisa verificar a quantidade de vezes que a atividade 'permissão final aprovada pelo diretor' foi executada no banco de dados. Você pode fazer isso com a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor'; Essa consulta verifica a coluna "activity" da tabela "event_log" e conta quantas vezes a atividade 'permissão final aprovada pelo diretor' foi encontrada.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'permissão final aprovada pelo diretor'; Essa consulta contará o número de linhas na tabela `event_log` onde a coluna `activity` tem o valor 'permissão final aprovada pelo diretor', o que representa o número de vezes que essa atividade foi executada.
SELECT COUNT(*) FROM event_log WHERE activity = 'permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
Para responder à pergunta, você precisa contar a quantidade de linhas que atendem ao critério de atividade 'permissão final aprovada pelo diretor'. Isso pode ser feito com a seguinte consulta: SELECT COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor'; Essa consulta contará a quantidade de linhas na tabela "event_log" onde a coluna "activity" tem o valor 'Permissão final aprovada pelo diretor'.
A resposta é: SELECT COUNT(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) AS quantidade_execucoes FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) AS quantidade_eventos FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor';
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) AS num_approvals FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor'; Essa consulta contará o número de linhas na tabela `event_log` onde a coluna `activity` tem o valor 'Declaração final aprovada pelo diretor', o que representa o número de vezes que uma permissão final foi aprovada por um diretor.
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp;
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT timestamp, resource FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp, resource;
SELECT timestamp, resource FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp, resource;
SELECT timestamp, resource FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s' ORDER BY timestamp, resource;
SELECT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT DISTINCT timestamp FROM event_log WHERE activity = 'Início da viagem' AND resource LIKE '%s';
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
Aqui está a resposta: SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource; Essa consulta agrupa os eventos por atividade e recurso, e calcula o custo total para cada par atividade-recurso. O resultado será uma lista com as atividades, recursos e o custo total associado a cada par.
SELECT activity, resource, SUM(cost) AS total_cost FROM event_log GROUP BY activity, resource
SELECT activity, idcase, SUM(cost) AS total_cost FROM event_log JOIN funcionarios ON event_log.idcase = funcionarios.idcase GROUP BY activity, idcase ORDER BY total_cost DESC;
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem'); Essa consulta contará o número de linhas na tabela "event_log" onde a coluna "activity" tem um valor igual a 'Início da viagem' ou 'Fim da viagem'.
SELECT activity, COUNT(*) AS count FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') GROUP BY activity
SELECT COUNT(*) FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Fim da viagem'
SELECT COUNT(*), activity FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') GROUP BY activity
SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem')
SELECT activity, COUNT(*) as quantidade FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem') GROUP BY activity
SELECT COUNT(CASE WHEN activity = 'Início da viagem' THEN 1 ELSE NULL END) AS inicio_viagem, COUNT(CASE WHEN activity = 'Fim da viagem' THEN 1 ELSE NULL END) AS fim_viagem FROM event_log
SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem');
SELECT count(*), e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp < e2.timestamp GROUP BY e1.idcase
SELECT COUNT(*) FROM event_log WHERE activity IN ('Início da viagem', 'Fim da viagem')
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity HAVING COUNT(*) > 3
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(*), resource FROM ( SELECT resource, MIN(timestamp) as first_timestamp FROM event_log GROUP BY idcase, resource ) AS first_activity GROUP BY resource;
SELECT activity, resource FROM event_log ORDER BY id DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT activity, resource FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT resource, activity FROM event_log ORDER BY timestamp DESC LIMIT 1;
SELECT e1.idcase, e1.activity, e1.resource FROM event_log AS e1 WHERE e1.idcase IN ( SELECT idcase FROM event_log GROUP BY idcase ORDER BY MAX(timestamp) DESC ) ORDER BY e1.idcase;
SELECT e1.activity, e1.resource, e1.timestamp FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp ORDER BY e1.timestamp;
/* Responda o seguinte: Encontrar os eventos dos casos, assim como o responsável pela atividade executada no evento, que tenham ocorrido depois de um evento de execução da atividade 'fim da viagem'. */ SELECT e1.id, e1.activity, e1.resource, e1.timestamp FROM event_log AS e1 WHERE e1.id IN ( SELECT e2.id FROM event_log AS e2 WHERE e2.activity = 'Fim da viagem' ) ORDER BY e1.timestamp; /* Explicação: Aqui, estamos procurando por eventos que tenham ocorrido após um evento de 'Fim da viagem'. Para isso, estamos fazendo uma subquery que retorna os IDs dos eventos que têm a atividade 'Fim da viagem'. Em seguida, estamos usando esses IDs para filtrar os eventos que ocorreram após esses eventos de 'Fim da viagem'. Finalmente, estamos ordenando os resultados por timestamp para mostrar os eventos na ordem correta.
select count(*), e1.idcase from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' and e1.timestamp < e2.timestamp group by e1.idcase
SELECT e1.* FROM event_log e1 WHERE e1.activity = 'Início da viagem' AND e1.idcase IN ( SELECT e2.idcase FROM event_log e2 WHERE e2.activity = 'Fim da viagem' AND e2.timestamp < e1.timestamp )
Aqui está a resposta: SELECT e1.id, e1.activity, e1.timestamp, e1.resource, e1.cost, e1.idcase, e2.activity AS responsavel FROM event_log e1 INNER JOIN event_log e2 ON e1.idcase = e2.idcase AND e1.timestamp > e2.timestamp WHERE e2.activity = 'Fim da viagem' Este comando seleciona todos os eventos (id, activity, timestamp, resource, cost, idcase) que ocorreram após um evento de execução da atividade 'fim da viagem' no mesmo caso. O responsável pela atividade executada no evento é identificado como o evento de 'fim da viagem' anterior.
SELECT e1.* FROM event_log AS e1 JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
SELECT e1.* FROM event_log AS e1 JOIN event_log AS e2 ON e1.idcase = e2.idcase AND e1.timestamp > e2.timestamp WHERE e2.activity = 'Fim da viagem' ORDER BY e1.idcase, e1.timestamp;
SELECT el1.* FROM event_log el1 JOIN event_log el2 ON el1.id > el2.id WHERE el2.activity = 'Fim da viagem' ORDER BY el1.timestamp;
SELECT el1.*, r.name AS responsible_name FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.timestamp > el2.timestamp JOIN responsible r ON el1.id = r.event_id WHERE el2.activity = 'Fim da viagem'
SELECT el1.*, el2.resource AS responsible FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase AND el1.activity = 'Fim da viagem' AND el2.activity = 'Início da viagem' WHERE el1.timestamp > el2.timestamp ORDER BY el1.idcase, el1.timestamp;
SELECT el1.*, ru.username AS responsible_username FROM event_log el1 JOIN event_log el2 ON el1.id = el2.id - 1 JOIN responsible_user ru ON el1.id = ru.event_id WHERE el1.activity = 'Início da viagem' AND el2.activity = 'Fim da viagem' AND el1.timestamp > el2.timestamp
SELECT e1.idcase, e1.activity, e1.resource, e1.cost FROM event_log AS e1 WHERE id IN ( SELECT e2.id FROM event_log AS e2 WHERE e2.activity = 'Fim da viagem' ) ORDER BY e1.idcase, e1.timestamp;
SELECT e1.activity, e1.resource, e1.timestamp, e1.cost, e1.idcase FROM event_log AS e1 JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
SELECT e1.idcase, e1.resource, e1.activity, e1.timestamp AS timestamp_after_fim_da_viagem FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase AND e1.timestamp > e2.timestamp WHERE e2.activity = 'Fim da viagem' ORDER BY e1.idcase, e1.timestamp;
SELECT e1.idcase, e1.resource, e1.activity, e2.activity AS 'activity_after_fim_da_viagem' FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase AND e1.timestamp < e2.timestamp WHERE e2.activity = 'Fim da viagem' ORDER BY e1.idcase, e1.timestamp;
SELECT e2.activity, e2.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase AND e1.timestamp < e2.timestamp WHERE e2.activity = 'Fim da viagem' ORDER BY e1.idcase;
SELECT e1.idcase, e1.activity, e1.resource, e1.timestamp FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp ORDER BY e1.idcase, e1.timestamp;
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, count(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as quantidade_eventos FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, count(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, count(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, count(*) as quantidade_eventos FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, count(*) as num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, count(*) as quantidade_eventos FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY resource
SELECT e.resource, COUNT(e.id) AS total_actions FROM event_log AS e WHERE e.activity!= 'Fim da viagem' GROUP BY e.resource ORDER BY total_actions DESC;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log WHERE activity = 'Início do caso' ORDER BY timestamp DESC
SELECT idcase FROM event_log WHERE activity = 'Envio de lembrete' GROUP BY idcase ORDER BY MIN(timestamp) DESC;
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' GROUP BY idcase ORDER BY MIN(timestamp)
SELECT idcase, timestamp FROM event_log ORDER BY timestamp ASC;
SELECT COUNT(DISTINCT idcase) AS quantidade FROM event_log WHERE activity = 'Requisição de pagamento'
SELECT COUNT(DISTINCT idcase) AS quantidade_instancias FROM event_log WHERE activity = 'Requisição de pagamento'
SELECT COUNT(*) FROM event_log WHERE activity = 'Requisição de pagamento';
SELECT COUNT(DISTINCT idcase) AS quantidade_casos FROM event_log WHERE activity = 'Requisição de pagamento';
SELECT COUNT(DISTINCT idcase) AS quantidade_casos FROM event_log WHERE activity = 'Requisição de pagamento'
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Requisição de pagamento' Essa consulta contará o número de declarações (idcase) para as quais há registros de requisições de pagamento (activity = 'Requisição de pagamento').
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Requisição de pagamento'
SELECT idcase FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
/* Responda o seguinte: Qual foi a última instância de processo a executar a atividade 'declaração final aprovada pelo diretor'? */ SELECT * FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1; /* Responda o seguinte: Quantas intervenções foram necessárias até que a declaração recebesse a aprovação final do diretor, em cada uma das declarações em que a aprovação foi registrada? */ SELECT e.idcase, COUNT(*) FROM event_log e INNER JOIN (SELECT idcase, MIN(timestamp) as timestamp FROM event_log where activity='Declaração final aprovada pelo diretor' GROUP BY idcase order by idcase) e1 on e.idcase = e1.idcase and e.timestamp < e1.timestamp GROUP BY e.idcase; /* Responda o seguinte: Quantas vezes a execução da atividade 'permissão final aprovada pelo diretor' foi registrada? */ SELECT count(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor'; /* Responda o seguinte: Quantas vezes a atividade 'permissão final aprovada pelo diretor' foi executada? */ SELECT count(*) FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor';
SELECT idcase FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT idcase FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT e.idcase, e.timestamp FROM event_log e WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT * FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ORDER BY timestamp DESC LIMIT 1;
SELECT resource, COUNT(*) as total FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total DESC LIMIT 1;
SELECT resource, COUNT(*) as total_executions FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_executions DESC LIMIT 1;
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY count DESC LIMIT 1;
SELECT resource, COUNT(*) as total_events FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_events DESC LIMIT 1;
SELECT resource, COUNT(*) as total_executions FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_executions DESC LIMIT 1;
SELECT resource, COUNT(*) as total_approvals FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_approvals DESC LIMIT 1;
SELECT resource, COUNT(*) as total_approvals FROM event_log WHERE activity = 'Declaração aprovada pela administração' GROUP BY resource ORDER BY total_approvals DESC LIMIT 1;
SELECT resource, COUNT(*) FROM event_log WHERE activity = (SELECT MIN(activity) FROM event_log) GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE id = (SELECT MIN(id) FROM event_log) GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity = (SELECT activity FROM event_log WHERE idcase = event_log.idcase ORDER BY timestamp LIMIT 1) GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE id IN ( SELECT MIN(id) FROM event_log GROUP BY idcase ) GROUP BY resource
SELECT resource, COUNT(*) AS first_occurrence FROM event_log WHERE id = (SELECT MIN(id) FROM event_log WHERE idcase = event_log.idcase AND resource = event_log.resource) GROUP BY resource
SELECT resource, COUNT(*) AS num_cases FROM event_log WHERE activity = (SELECT activity FROM event_log ORDER BY timestamp LIMIT 1) GROUP BY resource
SELECT resource, COUNT(*) AS num_processes FROM event_log GROUP BY resource
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%aprovada%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%aprovada%'
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(DISTINCT idcase) AS quantidade FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(DISTINCT idcase) AS casos_rejeitados FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp)
SELECT DATE(timestamp) AS data, COUNT(*) AS rejeitadas_por_dia FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY DATE(timestamp) ORDER BY data;
SELECT strftime('%Y-%m-%d', timestamp) AS event_day, COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%rejeitada%' GROUP BY event_day
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase ORDER BY duration DESC;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase ORDER BY duration DESC;
SELECT idcase, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) as total_time FROM event_log GROUP BY idcase ORDER BY total_time DESC LIMIT 5;
SELECT idcase, COUNT(*) as num_events, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) as duration FROM event_log GROUP BY idcase ORDER BY num_events DESC LIMIT 5;
SELECT idcase, COUNT(*) as total_executions, MAX(timestamp) - MIN(timestamp) as duration FROM event_log GROUP BY idcase ORDER BY total_executions DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase ORDER BY duration DESC;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log GROUP BY idcase HAVING COUNT(*) IN (SELECT COUNT(*) FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5) ORDER BY duration DESC;
SELECT idcase, COUNT(*) AS num_actions, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) AS total_processing_time FROM event_log GROUP BY idcase ORDER BY num_actions DESC LIMIT 5;
SELECT idcase, SUM(cost) AS total_cost, MAX(timestamp) - MIN(timestamp) AS processing_time FROM event_log GROUP BY idcase ORDER BY total_cost DESC LIMIT 5;
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, COUNT(*) AS num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase ORDER BY duration DESC;
SELECT idcase, COUNT(*) as events_count, MAX(timestamp) - MIN(timestamp) as duration FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY events_count DESC LIMIT 5;
SELECT idcase, COUNT(*) as num_events, MAX(timestamp) as max_timestamp, MIN(timestamp) as min_timestamp FROM event_log GROUP BY idcase HAVING COUNT(*) > 20 ORDER BY num_events DESC LIMIT 5;
SELECT idcase, SUM(cost) AS total_cost, MAX(timestamp) - MIN(timestamp) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY total_cost DESC LIMIT 5;
Aqui está a resposta: SELECT strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration, idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY duration DESC LIMIT 5; Essa consulta faz o seguinte: 1. Seleciona os casos que têm 20 eventos ou mais (usando a subconsulta para filtrar os casos com mais de 20 eventos). 2. Calcula a duração de cada caso, subtraindo a data de início (MIN(timestamp)) da data de fim (MAX(timestamp)). 3. Agrupa os resultados por caso e ordena por duração em ordem decrescente. 4. Limita os resultados a apenas os 5 casos mais longos. Essa consulta deve fornecer os 5 casos mais longos em termos de eventos e a duração de cada um desses casos.
SELECT idcase, COUNT(*) as events_count, SUM(TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp))) as total_time FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY events_count DESC LIMIT 5;
SELECT idcase, MAX(strftime('%s', timestamp)) - MIN(strftime('%s', timestamp)) AS duration, COUNT(*) AS num_events FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ) GROUP BY idcase ORDER BY duration DESC LIMIT 5;
select strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)), idcase FROM event_log WHERE idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) IN (SELECT COUNT(*) FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC LIMIT 5)) GROUP BY idcase
SELECT idcase FROM event_log WHERE activity!= 'Requisição de pagamento' AND activity!= 'Pagamento efetuado' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Requisição de pagamento' = FALSE ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE activity!= 'Requisição de pagamento' AND activity!= 'Pagamento efetuado' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase, timestamp FROM event_log WHERE activity!= 'Requisição de pagamento' AND activity!= 'Pagamento efetuado' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE activity!= 'Requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' ) ORDER BY timestamp DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE NOT EXISTS ( SELECT 1 FROM event_log WHERE activity = 'Requisição de pagamento' AND idcase = event_log.idcase ) ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' ) ORDER BY timestamp DESC LIMIT 10;
SELECT * FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) ORDER BY timestamp DESC LIMIT 10;
SELECT idcase, timestamp FROM event_log WHERE activity!= 'Requisição de pagamento' ORDER BY timestamp DESC LIMIT 10;
Para responder ao último questionário, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10 Essa consulta agrupa os casos pelo campo "idcase" e conta o número de eventos executados em cada caso. Em seguida, ela filtra os casos que tiveram 10 ou menos eventos executados, usando a cláusula HAVING.
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10 Essa consulta agrupa os casos pelo campo "idcase" e conta o número de eventos executados para cada caso. Em seguida, ela filtra os casos que tiveram dez ou menos eventos executados, usando a cláusula HAVING com a condição COUNT(*) <= 10.
/* Responda o seguinte: Liste todos os casos que tiveram até dez eventos executados. */ SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT * FROM event_log WHERE idcase IS NOT NULL
Para responder à pergunta, você pode usar a seguinte consulta SQL: SELECT idcase FROM event_log GROUP BY idcase HAVING count(*) <= 10 Essa consulta agrupa as instâncias de processo pelo campo "idcase" e conta o número de ocorrências de atividades para cada grupo. Em seguida, a cláusula HAVING é usada para filtrar os resultados e apenas mostrar as instâncias de processo que possuem até 10 ocorrências de atividades.
SELECT idcase, COUNT(*) as num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase, count(*) as num_events FROM event_log GROUP BY idcase HAVING count(*) <= 10
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) <= 10
SELECT idcase, COUNT(*) as num_actions FROM event_log GROUP BY idcase HAVING COUNT(*) >= 10
SELECT idcase, COUNT(*) AS num_events FROM event_log GROUP BY idcase HAVING COUNT(*) <= 20
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'pagamento efetuado' AND timestamp < '2018-01-01';
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01';
SELECT AVG(cost) FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01 00:00:00'
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS media_custo FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
SELECT AVG(cost) AS avg_cost FROM event_log WHERE activity = 'Pagamento efetuado' AND timestamp < '2018-01-01'
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
SELECT idcase, COUNT(*) as quantidade_atividades FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) as quantidade FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) as count_permissao FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
SELECT idcase, count(*) as num_occurrences FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase
SELECT idcase, COUNT(*) as count_perm FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase ORDER BY count_perm DESC;
SELECT idcase, COUNT(*) AS permissao_count FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY idcase
SELECT idcase, COUNT(*) AS quantidade_execucoes, GROUP_CONCAT(DISTINCT resource) AS recursos FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY idcase
A resposta é: SELECT resource, COUNT(*) AS quantidade_de_casos FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource Essa consulta seleciona a coluna "resource" e a contagem de linhas (COUNT(*)) para cada recurso, agrupando os resultados pela coluna "resource". A condição WHERE filtra apenas as linhas que têm a atividade "Declaração rejeitada pelo supervisor".
SELECT resource, COUNT(*) AS num_execucoes FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS rejeicoes_por_supervisor FROM event_log WHERE activity LIKE '%supervisor%' AND activity LIKE '%rejeição%' GROUP BY resource
SELECT COUNT(DISTINCT e1.idcase) AS num_declaratios_rejeitadas, e2.resource AS supervisor FROM event_log e1 INNER JOIN (SELECT idcase, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor') AS e2 ON e1.idcase = e2.idcase GROUP BY e2.resource ORDER BY num_declaratios_rejeitadas DESC;
SELECT activity, count(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT count(DISTINCT idcase), activity FROM event_log GROUP BY activity
A resposta é: SELECT activity, COUNT(*) AS "Quantidade de casos" FROM event_log GROUP BY activity; Essa query utiliza a função COUNT(*) para contar o número de registros para cada atividade, e o GROUP BY activity para agrupar os resultados por atividade. O alias "Quantidade de casos" é usado para renomear a coluna que contém o resultado da contagem.
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_declarações FROM event_log GROUP BY activity ORDER BY num_declarações DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND id > (SELECT id FROM event_log WHERE activity LIKE 'D%' ORDER BY timestamp DESC LIMIT 1)
SELECT * FROM event_log WHERE activity LIKE 'R%' ORDER BY timestamp LIMIT 1 OFFSET ( SELECT COUNT(*) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT * FROM event_log WHERE timestamp > (SELECT MAX(timestamp) FROM event_log WHERE activity LIKE 'D%') AND activity LIKE 'R%';
SELECT activity from event_log GROUP BY activity HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log GROUP BY activity ORDER BY COUNT(*) desc LIMIT 1)
SELECT * FROM event_log WHERE activity LIKE 'R%' AND timestamp > ( SELECT max(timestamp) FROM event_log WHERE activity LIKE 'D%' )
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource
SELECT activity, resource, COUNT(*) AS execution_count FROM event_log GROUP BY activity, resource
SELECT activity, resource, COUNT(*) AS count FROM event_log GROUP BY activity, resource ORDER BY activity, resource;
SELECT resource, activity, COUNT(*) AS frequency FROM event_log GROUP BY resource, activity ORDER BY resource, activity;
SELECT resource, activity, COUNT(*) AS frequency FROM event_log GROUP BY resource, activity
SELECT activity, resource, COUNT(*) AS frequency FROM event_log GROUP BY activity, resource
SELECT e.name, a.activity, COUNT(*) AS frequency FROM activity_log al JOIN employees e ON al.employee_id = e.id GROUP BY e.name, a.activity ORDER BY e.name, a.activity;
SELECT DISTINCT activity FROM event_log WHERE strftime('%Y-%m', timestamp) BETWEEN '2018-01-01' AND '2018-06-30' ORDER BY activity;
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp >= '2018-01-01' AND timestamp < '2018-06-30' GROUP BY activity ORDER BY frequency DESC;
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT DISTINCT activity FROM event_log WHERE strftime('%Y', timestamp) = '2018' AND strftime('%m', timestamp) BETWEEN '01' AND '06';
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity, count(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30' GROUP BY activity;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
Aqui está a resposta: SELECT idcase, resource FROM event_log WHERE resource = 'Wayne' GROUP BY idcase, resource ORDER BY idcase; Essa query seleciona todos os casos em que o recurso 'Wayne' aparece associado à execução de algum evento, agrupando os resultados por identificador de caso e ordenando-os por identificador de caso.
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase, activity, timestamp, resource, cost FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' GROUP BY idcase ORDER BY idcase;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT * FROM event_log WHERE resource = 'Wayne' ORDER BY timestamp;
SELECT DISTINCT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT idcase FROM event_log WHERE resource = 'Wayne' ORDER BY idcase;
SELECT activity, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2018-03-12' AND '2018-03-13' AND idcase IS NOT NULL GROUP BY activity
SELECT activity, count(DISTINCT idcase) AS num_instances FROM event_log WHERE timestamp BETWEEN '2018-03-12 00:00:00' AND '2018-03-12 23:59:59' GROUP BY activity
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp = '2018-03-12' AND idcase NOT LIKE '%IN_PROGRESS%' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS quantidade_casos FROM event_log WHERE timestamp <= '2018-03-12 23:59:59' GROUP BY activity ORDER BY quantidade_casos DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp = (SELECT MAX(timestamp) FROM event_log WHERE timestamp < '2018-03-13') GROUP BY activity
SELECT activity, count(*) as quantidade_de_casos FROM event_log WHERE timestamp LIKE '2018-03-12%' AND activity IS NOT NULL GROUP BY activity
SELECT activity, COUNT(*) AS num_cases FROM event_log WHERE timestamp BETWEEN '2018-03-12' AND '2018-03-12' GROUP BY activity
SELECT idcase, activity, COUNT(*) AS count_actions FROM event_log WHERE timestamp BETWEEN '2018-03-12' AND '2018-03-13' AND activity NOT LIKE '%finalizado%' GROUP BY idcase, activity ORDER BY idcase, activity;
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE 'permissão%';
select idcase from event_log where activity like 'permissão%' GROUP BY idcase HAVING count(*) > 1
SELECT * FROM event_log WHERE activity LIKE '%permissão%';
SELECT COUNT(*) FROM event_log WHERE activity LIKE 'permissão%' ORDER BY timestamp LIMIT 1;
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity LIKE 'permissão%' AND ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) = 1;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%associação a uma permissão%' AND idcase NOT LIKE '%cancelamento%' AND idcase NOT LIKE '%reabertura%' AND idcase NOT LIKE '%alteração%' AND idcase NOT LIKE '%fechamento%';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity LIKE '%permissão%' AND timestamp = (SELECT MIN(timestamp) FROM event_log WHERE idcase = event_log.idcase AND activity LIKE '%permissão%')
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') )
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') )
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado') ORDER BY timestamp DESC LIMIT 10;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado') ORDER BY e.idcase;
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado')
SELECT idcase FROM cases WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT idcase FROM ( SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' ) AS paid_events WHERE NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = paid_events.idcase AND activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT DISTINCT idcase FROM event_log WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado')
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT DISTINCT idcase FROM event_log where activity = 'Pagamento efetuado') AND idcase NOT IN (SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento');
SELECT DISTINCT e.idcase FROM event_log AS e WHERE e.activity = 'Requisição de pagamento' AND NOT EXISTS ( SELECT 1 FROM event_log AS p WHERE p.idcase = e.idcase AND p.activity = 'Pagamento efetuado' )
SELECT idcase, timestamp, resource FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Declaração requisitada pelo funcionário' ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity = 'Início da viagem' OR activity = 'Declaração requisitada pelo funcionário' ORDER BY timestamp, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp ASC, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource ASC;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT * FROM event_log WHERE activity IN ('Início da viagem', 'Declaração requisitada pelo funcionário') ORDER BY timestamp, resource;
SELECT timestamp, resource AS "Funcionário", activity FROM event_log WHERE activity IN ('Início da viagem', 'Requisição de declaração') ORDER BY timestamp, resource;
SELECT e.id, e.activity, e.timestamp, e.resource, f.name FROM event_log e INNER JOIN (SELECT idcase, MIN(timestamp) AS start_time, resource FROM event_log GROUP BY idcase, resource) s ON e.idcase = s.idcase AND e.timestamp = s.start_time INNER JOIN (SELECT DISTINCT resource, name FROM user_resources) f ON e.resource = f.resource ORDER BY e.timestamp, f.name;
A resposta é: SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource; Essa consulta contabiliza a frequência com que cada recurso foi associado à atividade 'declaração salva pelo funcionário' e ordena a resposta por recurso.
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_registers FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS ocorrencias FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS quantidade_associações FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity = 'Declaração salva pelo funcionário' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS num_saves FROM event_log WHERE activity = 'Salvar declaração de viagem' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS salvamentos FROM event_log WHERE activity = 'Salvar declaração' GROUP BY resource ORDER BY resource;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity
A resposta é: SELECT COUNT(*) AS "Número de casos", activity FROM event_log GROUP BY activity; Essa consulta contará o número de registros para cada atividade e mostrará o resultado em uma coluna chamada "Número de casos".
SELECT activity, COUNT(*) AS num_cases FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT idcase) AS num_instances FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT idcase) AS num_instances FROM event_log GROUP BY activity
SELECT activity, COUNT(*) as count_activity FROM event_log GROUP BY activity ORDER BY count_activity DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY activity
SELECT activity, COUNT(idcase) AS num_declaracoes FROM event_log GROUP BY activity
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_actions FROM event_log GROUP BY resource ORDER BY num_actions DESC;
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC;
SELECT resource, COUNT(*) as num_occurrences FROM event_log WHERE activity IN ('Fim da viagem', 'Pagamento efetuado') GROUP BY resource
SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado'
SELECT DISTINCT idcase FROM event_log where activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING count(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log where activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado'
SELECT DISTINCT idcase from event_log WHERE (activity = 'Início da viagem' OR activity = 'Fim da viagem') and idcase NOT IN (SELECT idcase from event_log WHERE activity = 'Requisição de pagamento' INTERSECT SELECT idcase from event_log WHERE activity = 'Pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Fim da viagem' INTERSECT SELECT DISTINCT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 EXCEPT SELECT DISTINCT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado';
SELECT resource, COUNT(*) AS frequency FROM event_log WHERE activity IN ('Fim da viagem', 'pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) as total_actions FROM event_log WHERE activity IN ('Fim da viagem', 'Pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) as "Número de vezes" FROM event_log WHERE activity IN ('Fim da viagem', 'Pagamento efetuado') GROUP BY resource
SELECT resource, COUNT(*) AS count FROM ( SELECT resource, idcase, ROW_NUMBER() OVER (PARTITION BY idcase, resource ORDER BY timestamp) AS row_num FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' ) AS subquery WHERE row_num = 1 GROUP BY resource
SELECT resource, COUNT(*) AS count FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource, idcase HAVING COUNT(*) = 1
SELECT resource, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource ORDER BY num_occurrences;
SELECT resource, COUNT(*) AS num_first_occurrences FROM ( SELECT resource, idcase, ROW_NUMBER() OVER (PARTITION BY idcase, activity ORDER BY timestamp) AS row_num FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' ) AS subquery WHERE row_num = 1 GROUP BY resource
SELECT resource, COUNT(*) AS quantidade FROM ( SELECT resource, ROW_NUMBER() OVER (PARTITION BY resource, activity ORDER BY timestamp) AS row_num FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' ) AS subquery WHERE row_num = 1 GROUP BY resource
SELECT resource, COUNT(*) AS rejeicoes FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource
SELECT resource, COUNT(*) AS num_declarações FROM event_log WHERE activity = 'Declaração rejeitada pelo pré-aprovador' GROUP BY resource HAVING COUNT(*) = 1
SELECT idcase, COUNT(*) AS num_occurrences FROM event_log WHERE activity = 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) as num_activities FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase ORDER BY idcase;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_activities FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS occurrences FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase ORDER BY occurrences DESC;
SELECT idcase, COUNT(*) - (SELECT COUNT(*) FROM event_log WHERE idcase = e.idcase AND activity = 'Fim da viagem') AS events_before_end FROM event_log e WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase ORDER BY num_events DESC
SELECT idcase, COUNT(*) AS quantidade_eventos FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase
SELECT idcase, count(*) as num_actions FROM event_log WHERE activity!= 'Fim da viagem' GROUP BY idcase ORDER BY idcase;
SELECT idcase, count(*) as num_actions FROM event_log WHERE activity = 'Fim da viagem' GROUP BY idcase
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-01'
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31'
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30'
SELECT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30' GROUP BY activity
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-06-30';
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp, resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp, idcase;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp, activity FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC
SELECT * FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp ASC
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY timestamp;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp < '2018-03-01' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND timestamp <= '2018-03-01' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp < '2018-04-01'
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp < '2018-04-01' AND id NOT IN ( SELECT id FROM event_log WHERE activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp < '2018-03-31' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' AND timestamp <= '2018-03-31' )
Para responder à pergunta, você precisaria adicionar uma condição adicional à cláusula WHERE para especificar que as execuções de processo não finalizaram até 31/03/2018. Além disso, você precisaria especificar que a atividade seja 'início da viagem'. Aqui está a resposta: SELECT DISTINCT idcase FROM event_log WHERE activity = 'Início da viagem' AND timestamp < '2018-03-31' AND id NOT IN (SELECT id FROM event_log WHERE activity = 'Fim da viagem' AND timestamp <= '2018-03-31') Essa consulta seleciona as execuções de processo que passaram pela atividade 'início da viagem' e não finalizaram até 31/03/2018. A condição `id NOT IN (SELECT id FROM event_log WHERE activity = 'Fim da viagem' AND timestamp <= '2018-03-31')` garante que as execuções de processo que finalizaram até 31/03/2018 sejam excluídas da lista.
SELECT e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp GROUP BY e1.idcase
SELECT idcase FROM event_log WHERE activity = 'Início da viagem' AND id NOT IN ( SELECT id FROM event_log WHERE activity = 'Fim da viagem' AND strftime('%Y-%m-%d', timestamp) <= '2018-03-31' )
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Requisição de pagamento', 'Pagamento efetuado') ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado') GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION ALL SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' )
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' UNION SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado' ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT DISTINCT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('Requisição de pagamento', 'Pagamento efetuado') ) AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity = 'Fim da viagem' ) )
SELECT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 AND activity = 'Fim da viagem' ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT idcase FROM event_log WHERE activity NOT IN ('Pagamento efetuado', 'Requisição de pagamento') GROUP BY idcase HAVING COUNT(DISTINCT activity) = 1
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado' )
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase ORDER BY total_cost DESC;
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, SUM(cost) AS total_cost, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT idcase, COUNT(DISTINCT resource) AS num_resources, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) > 1
Aqui está a resposta: /* Responda o seguinte: Recupere os casos nos quais há mais de uma ocorrência de atividades iniciando com o termo 'permissão'. */ SELECT idcase FROM ( SELECT idcase, COUNT(*) as count FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase ) as t WHERE count > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) >= 2;
SELECT idcase FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1
SELECT idcase, COUNT(*) AS quantidade FROM event_log WHERE activity LIKE 'permissão%' AND activity NOT LIKE '% permissão' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity LIKE 'permissão%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' AND id IN ( SELECT id FROM event_log GROUP BY id HAVING COUNT(*) > 1 )
SELECT idcase FROM event_log WHERE activity LIKE 'permissão%' AND id IN ( SELECT id FROM event_log GROUP BY idcase HAVING COUNT(*) > 1 )
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%permissão%' OR activity LIKE '%declaração%'
SELECT idcase, COUNT(*) as num_actions FROM event_log WHERE activity LIKE '%permissão%' GROUP BY idcase HAVING COUNT(*) > 1
SELECT id, timestamp FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase ORDER BY MAX(timestamp) DESC ) ORDER BY timestamp DESC;
SELECT idcase, MAX(id) AS last_event_id FROM event_log GROUP BY idcase ORDER BY MAX(timestamp);
SELECT id FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log ORDER BY timestamp DESC GROUP BY idcase ) ORDER BY timestamp;
SELECT idcase, activity, timestamp FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY idcase, timestamp DESC;
SELECT id, timestamp FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log ORDER BY timestamp DESC GROUP BY idcase ) ORDER BY timestamp DESC;
SELECT idcase, id, timestamp FROM event_log ORDER BY timestamp DESC GROUP BY idcase, id
SELECT id, activity, timestamp FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY timestamp;
SELECT idcase, activity, timestamp FROM event_log WHERE id IN ( SELECT MAX(id) FROM event_log GROUP BY idcase ) ORDER BY idcase, timestamp;
SELECT idcase, activity, timestamp FROM ( SELECT idcase, activity, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS row_num FROM event_log ) AS subquery WHERE row_num = 1 ORDER BY idcase;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT count(*), 'funcionário' as grupo from event_log WHERE activity like '%funcionário%' UNION SELECT count(*),'supervisor' as grupo from event_log WHERE activity like '%supervisor%' UNION SELECT count(*), 'administração' as grupo from event_log WHERE activity like '%administração%' UNION SELECT count(*), 'pré-aprovador' as grupo from event_log WHERE activity like '%pré-aprovador%' UNION SELECT count(*),'responsável pelo orçamento' as grupo from event_log WHERE activity like '%responsável pelo orçamento%' UNION SELECT count(*), 'diretor' as grupo from event_log WHERE activity like '%diretor%' ORDER BY count(*);
SELECT grupo, COUNT(DISTINCT idcase) AS num_casos FROM (SELECT 'funcionário' AS grupo, idcase FROM event_log WHERE activity LIKE '%funcionário%' UNION ALL SELECT 'supervisor' AS grupo, idcase FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT 'administração' AS grupo, idcase FROM event_log WHERE activity LIKE '%administração%' UNION ALL SELECT 'pré-aprovador' AS grupo, idcase FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION ALL SELECT 'responsável pelo orçamento' AS grupo, idcase FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION ALL SELECT 'diretor' AS grupo, idcase FROM event_log WHERE activity LIKE '%diretor%') AS subquery GROUP BY grupo ORDER BY num_casos DESC;
SELECT grupo, COUNT(*) as quantidade_casos FROM (SELECT 'funcionário' as grupo FROM event_log WHERE activity LIKE '%funcionário%' UNION SELECT 'supervisor' as grupo FROM event_log WHERE activity LIKE '%supervisor%' UNION SELECT 'administração' as grupo FROM event_log WHERE activity LIKE '%administração%' UNION SELECT 'pré-aprovador' as grupo FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION SELECT 'responsável pelo orçamento' as grupo FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION SELECT 'diretor' as grupo FROM event_log WHERE activity LIKE '%diretor%') as subquery GROUP BY grupo
SELECT COUNT(DISTINCT idcase) AS quantidade_casos, 'funcionário' AS grupo FROM event_log WHERE activity LIKE '%funcionário%' GROUP BY grupo UNION ALL SELECT COUNT(DISTINCT idcase) AS quantidade_casos, 'supervisor' AS grupo FROM event_log WHERE activity LIKE '%supervisor%' GROUP BY grupo UNION ALL SELECT COUNT(DISTINCT idcase) AS quantidade_casos, 'administração' AS grupo FROM event_log WHERE activity LIKE '%administração%' GROUP BY grupo UNION ALL SELECT COUNT(DISTINCT idcase) AS quantidade_casos, 'pré-aprovador' AS grupo FROM event_log WHERE activity LIKE '%pré-aprovador%' GROUP BY grupo UNION ALL SELECT COUNT(DISTINCT idcase) AS quantidade_casos, 'responsável pelo orçamento' AS grupo FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' GROUP BY grupo UNION ALL SELECT COUNT(DISTINCT idcase) AS quantidade_casos, 'diretor' AS grupo FROM event_log WHERE activity LIKE '%diretor%' GROUP BY grupo
SELECT grupo, COUNT(*) as quantidade_declaracoes FROM (SELECT 'funcionário' as grupo FROM event_log WHERE activity like '%funcionário%' UNION SELECT 'supervisor' as grupo FROM event_log WHERE activity like '%supervisor%' UNION SELECT 'administração' as grupo FROM event_log WHERE activity like '%administração%' UNION SELECT 'pré-aprovador' as grupo FROM event_log WHERE activity like '%pré-aprovador%' UNION SELECT 'responsável pelo orçamento' as grupo FROM event_log WHERE activity like '%responsável pelo orçamento%' UNION SELECT 'diretor' as grupo FROM event_log WHERE activity like '%diretor%') as subquery GROUP BY grupo ORDER BY quantidade_declaracoes DESC;
SELECT grupo, COUNT(*) as quantidade_execucoes, activity FROM event_log WHERE activity LIKE '%funcionário%' OR activity LIKE '%supervisor%' OR activity LIKE '%administração%' OR activity LIKE '%pré-aprovador%' OR activity LIKE '%responsável pelo orçamento%' OR activity LIKE '%diretor%' GROUP BY grupo, activity ORDER BY quantidade_execucoes DESC;
SELECT grupo, activity, COUNT(*) as frequency FROM ( SELECT 'funcionário' as grupo, activity FROM event_log WHERE activity LIKE '%funcionário%' UNION ALL SELECT 'supervisor' as grupo, activity FROM event_log WHERE activity LIKE '%supervisor%' UNION ALL SELECT 'administração' as grupo, activity FROM event_log WHERE activity LIKE '%administração%' UNION ALL SELECT 'pré-aprovador' as grupo, activity FROM event_log WHERE activity LIKE '%pré-aprovador%' UNION ALL SELECT 'responsável pelo orçamento' as grupo, activity FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' UNION ALL SELECT 'diretor' as grupo, activity FROM event_log WHERE activity LIKE '%diretor%' ) as subquery GROUP BY grupo, activity ORDER BY frequency DESC;
SELECT grupo, COUNT(*) as quantidade FROM ( SELECT CASE WHEN activity LIKE '%funcionário%' THEN 'funcionário' WHEN activity LIKE '%supervisor%' THEN'supervisor' WHEN activity LIKE '%administração%' THEN 'administração' WHEN activity LIKE '%pré-aprovador%' THEN 'pré-aprovador' WHEN activity LIKE '%responsável pelo orçamento%' THEN'responsável pelo orçamento' WHEN activity LIKE '%diretor%' THEN 'diretor' END as grupo FROM event_log ) as subquery GROUP BY grupo ORDER BY quantidade DESC;
SELECT e1.idcase, e1.activity, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp;
SELECT idcase FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' ) AND timestamp > ( SELECT MAX(timestamp) FROM event_log WHERE activity = 'Fim da viagem' )
SELECT idcase FROM event_log WHERE activity!= 'Fim da viagem' AND idcase IN ( SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' )
SELECT idcase FROM event_log WHERE activity = 'Fim da viagem' INTERSECT SELECT idcase FROM event_log WHERE activity!= 'Fim da viagem' ORDER BY idcase;
SELECT e1.idcase, e1.activity, e1.resource FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'Fim da viagem' AND e1.timestamp > e2.timestamp ORDER BY e1.idcase;
/* Responda o seguinte: Quais são as atividades que já antecederam uma ocorrência de 'envio de lembrete'? */ select distinct(e1.activity) from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Envio de lembrete' and e1.timestamp < e2.timestamp group by e1.idcase, e1.activity /* Resposta: Esta query retorna as atividades que ocorreram antes do envio de lembrete para cada caso. Por exemplo, se um caso teve a atividade 'envio de e-mail' antes do envio de lembrete, essa atividade será retornada pela query. */ /* Responda o seguinte: O que já foi executado antes do 'envio de um lembrete'? */ select distinct(e1.activity) from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Envio de lembrete' and e1.timestamp < e2.timestamp group by e1.idcase, e1.activity /* Resposta: Esta query é idêntica à anterior e retorna as atividades que ocorreram antes do envio de lembrete para cada caso. */ /* Responda o seguinte: À execução de qual atividade se refere o último evento registrado e qual o recurso associado a ela? */ SELECT resource, activity FROM event_log ORDER BY timestamp DESC LIMIT 1 /* Resposta: Esta query retorna o último evento registrado no banco de dados, incluindo a atividade e o recurso associado a ela. */ /* Responda o seguinte: Quantos casos, até o momento atual, possuem a execução da atividade 'envio de lembrete' como último evento registrado? */ SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC LIMIT 1 /* Resposta: Esta query retorna o número de casos que possuem a execução da atividade 'envio de lembrete' como último evento registrado. Ela ordena os registros por timestamp em ordem decrescente e limita a consulta ao último registro. Em seguida, ela conta o número de casos únicos (idcase) que possuem essa atividade.
select distinct(e1.activity) from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Envio de lembrete' and e1.timestamp < e2.timestamp group by e1.idcase, e1.activity
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'Envio de lembrete' ORDER BY timestamp DESC LIMIT 1;
select distinct(e1.activity) from event_log AS e1 inner join event_log AS e2 on e1.idcase = e2.idcase WHERE e2.activity = 'Envio de lembrete' and e1.timestamp < e2.timestamp group by e1.idcase, e1.activity
SELECT COUNT(*) FROM event_log WHERE activity LIKE '%declaração%' AND activity = 'Envio de lembrete' AND cost = 0;
SELECT DISTINCT resource FROM event_log WHERE timestamp < '2018-03-31' EXCEPT SELECT DISTINCT resource FROM event_log WHERE timestamp >= '2018-03-31';
SELECT DISTINCT resource FROM event_log WHERE timestamp = '2018-03-31' AND resource NOT IN ( SELECT resource FROM event_log WHERE timestamp = '2018-03-31' )
SELECT resource FROM event_log WHERE timestamp NOT LIKE '%2018-03-31%' AND resource IS NOT NULL GROUP BY resource
SELECT resource FROM event_log WHERE timestamp < '2018-03-31' OR timestamp > '2018-03-31' GROUP BY resource HAVING COUNT(DISTINCT id) = 0
SELECT DISTINCT e1.idcase AS idcase, e1.resource AS funcionario FROM event_log e1 WHERE e1.activity = 'Início da viagem' AND NOT EXISTS ( SELECT 1 FROM event_log e2 WHERE e2.idcase = e1.idcase AND e2.activity = 'Fim da viagem' AND e2.timestamp <= '2018-03-31' )
SELECT DISTINCT resource FROM event_log WHERE timestamp = '2018-03-31' AND activity IS NOT NULL EXCEPT SELECT resource FROM event_log WHERE timestamp = '2018-03-31'
SELECT activity, COUNT(*) AS quantidade_eventos FROM event_log WHERE timestamp <= '2018-12-05' AND timestamp >= '2018-12-01' AND idcase NOT IN (SELECT idcase FROM event_log WHERE timestamp > '2018-12-05') GROUP BY activity ORDER BY quantidade_eventos DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE activity!= 'Fim da viagem' -- excluindo a atividade 'Fim da viagem' pois não é um processo AND timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS count FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' AND idcase IN (SELECT idcase FROM event_log GROUP BY idcase HAVING strftime('%Y-%m-%d', MAX(timestamp)) = '2018-12-05') GROUP BY activity ORDER BY frequency DESC;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT COUNT(*) FROM event_log WHERE activity!= 'Pagamento efetuado'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT COUNT(DISTINCT idcase) AS num_cases_without_payment FROM event_log WHERE idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Requisição de pagamento' OR activity = 'Pagamento efetuado')
SELECT idcase FROM event_log e1 JOIN ( SELECT idcase, MAX(timestamp) AS last_timestamp FROM event_log GROUP BY idcase ) e2 ON e1.idcase = e2.idcase AND e1.timestamp = e2.last_timestamp WHERE activity NOT IN ('Requisição de pagamento', 'Pagamento efetuado')
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity ORDER BY activity;
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT activity, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY activity
SELECT idcase, COUNT(DISTINCT resource) AS num_resources FROM event_log GROUP BY idcase
SELECT DISTINCT activity FROM event_log WHERE activity!= 'Envio de lembrete' AND id IN ( SELECT id FROM event_log WHERE activity = 'Envio de lembrete' ) ORDER BY activity;
SELECT activity, resource, cost FROM event_log WHERE activity!= 'Envio de lembrete' ORDER BY timestamp DESC;
SELECT DISTINCT activity FROM event_log WHERE activity LIKE '%declaração%' AND activity < 'Enviar lembrete' ORDER BY activity;
SELECT idcase, count(*) as num_events, count(*)/ (SELECT max(count(*)) FROM event_log) as percentage FROM event_log GROUP BY idcase ORDER BY num_events DESC;
SELECT idcase, COUNT(*) AS num_events, COUNT(*)/COUNT(DISTINCT idcase) AS num_cases FROM event_log GROUP BY idcase
SELECT COUNT(idcase) AS quantidade_eventos, COUNT(DISTINCT idcase) AS quantidade_casos FROM event_log GROUP BY COUNT(idcase) ORDER BY COUNT(idcase) DESC;
SELECT idcase, COUNT(*) as num_events, COUNT(DISTINCT id) as num_cases FROM event_log GROUP BY idcase
SELECT idcase, COUNT(*) AS num_events, COUNT(*) AS num_cases_with_same_num_events FROM event_log GROUP BY idcase ORDER BY num_events DESC;
SELECT AVG(SUM(cost)) FROM event_log GROUP BY idcase;
SELECT AVG(total_cost) AS average_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs
SELECT AVG(total_cost) FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS total_costs
SELECT AVG(total_cost) AS average_total_cost FROM ( SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase ) AS case_costs;
SELECT idcase, SUM(cost) AS total_cost FROM event_log GROUP BY idcase
SELECT AVG(cost) FROM event_log;
SELECT resource, AVG(cost) AS avg_cost FROM event_log GROUP BY resource
Ao agrupar por recurso, qual é a média de custo dos eventos? SELECT resource, AVG(cost) AS average_cost FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS media_cost FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS average_cost FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS media_custo FROM event_log GROUP BY resource
SELECT resource, AVG(cost) AS avg_cost FROM event_log GROUP BY resource
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) as frequency FROM event_log GROUP BY resource ORDER BY frequency DESC LIMIT 10;
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity IS NOT NULL GROUP BY resource ORDER BY num_events DESC LIMIT 10;
SELECT resource, COUNT(*) as num_activities FROM event_log GROUP BY resource ORDER BY num_activities DESC LIMIT 10;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_de_eventos FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS data, COUNT(*) AS quantidade_ocorrencias FROM event_log GROUP BY DATE(timestamp) ORDER BY data;
SELECT DATE(timestamp) AS date, COUNT(*) AS count FROM event_log GROUP BY DATE(timestamp) ORDER BY date;
SELECT idcase, activity, resource1, resource2 FROM ( SELECT idcase, activity, resource, LAG(resource) OVER (PARTITION BY idcase, activity ORDER BY timestamp) AS resource1 FROM event_log ) AS subquery WHERE resource1 IS NOT NULL AND resource1 <> resource
SELECT idcase, activity, resource, LAG(resource) OVER (PARTITION BY idcase, activity ORDER BY timestamp) AS previous_resource FROM event_log WHERE resource!= LAG(resource) OVER (PARTITION BY idcase, activity ORDER BY timestamp) ORDER BY idcase, activity, timestamp;
SELECT idcase FROM event_log WHERE activity LIKE '%declaração%' AND id IN ( SELECT id FROM event_log WHERE activity LIKE '%declaração%' AND id IN ( SELECT id FROM event_log WHERE activity LIKE '%declaração%' AND id < (SELECT MAX(id) FROM event_log WHERE activity LIKE '%declaração%' AND idcase = event_log.idcase) ) )
SELECT idcase, COUNT(*) AS num_events FROM event_log WHERE activity = 'Permissão final aprovada pelo diretor' GROUP BY idcase HAVING COUNT(*) = (SELECT COUNT(*) FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' AND idcase = event_log.idcase)
SELECT idcase, COUNT(*) - ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp DESC) AS num_events_antes FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' GROUP BY idcase
WITH ranked_events AS ( SELECT idcase, activity, timestamp, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS row_num FROM event_log WHERE activity = 'Declaração final aprovada pelo diretor' ) SELECT idcase, COUNT(*) AS num_intervencoes FROM ranked_events WHERE row_num = 1 GROUP BY idcase;
SELECT el1.idcase, TIMESTAMPDIFF(SECOND, el1.timestamp, el2.timestamp) AS tempo_passado FROM event_log el1 JOIN event_log el2 ON el1.idcase = el2.idcase WHERE el1.activity LIKE 'permissão requisitada pelo funcionário' AND el2.activity LIKE 'permissão aprovada pela administração' ORDER BY el1.idcase;
SELECT idcase, timestamp AS requisicao, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS aprovacao, TIMESTAMPDIFF(SECOND, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp), timestamp) AS intervalo FROM event_log WHERE activity = 'permissão requisitada pelo funcionário' OR activity = 'permissão aprovada pela administração' ORDER BY idcase, timestamp;
SELECT TIMESTAMPDIFF(SECOND, MIN(timestamp), MAX(timestamp)) AS tempo_passado FROM event_log WHERE activity LIKE '%requisitar permissão%' AND activity LIKE '%permissão aprovada%' GROUP BY idcase
SELECT idcase, timestamp, COUNT(*) AS num_events FROM event_log GROUP BY idcase, timestamp HAVING COUNT(*) > 1;
SELECT idcase FROM event_log WHERE id IN ( SELECT id FROM event_log WHERE id IN ( SELECT id FROM event_log GROUP BY id, activity HAVING COUNT(*) > 1 ) )
SELECT idcase FROM event_log WHERE id IN ( SELECT id FROM ( SELECT id, activity, LEAD(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS next_activity FROM event_log ) AS t WHERE activity = next_activity )
SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT activity) > 1;
SELECT idcase, resource, COUNT(*) AS num_activities FROM event_log GROUP BY idcase, resource HAVING COUNT(*) > 1;
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1
SELECT idcase, activity, timestamp FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1 ORDER BY COUNT(*) DESC ) ORDER BY idcase, timestamp;
SELECT idcase FROM ( SELECT idcase, activity, LAG(activity) OVER (PARTITION BY idcase ORDER BY timestamp) AS prev_activity FROM event_log ) AS subquery WHERE activity = prev_activity;
SELECT idcase, activity, timestamp FROM event_log WHERE id IN ( SELECT id FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 1 ) ORDER BY idcase, activity, timestamp;
SELECT idcase, activity, COUNT(*) AS consecutive_executions FROM event_log WHERE id IN ( SELECT id FROM event_log WHERE idcase IS NOT NULL ORDER BY id GROUP BY idcase, activity HAVING COUNT(*) > 1 ) GROUP BY idcase, activity ORDER BY idcase, activity;
SELECT idcase, resource, COUNT(*) as consecutive_events FROM event_log WHERE activity LIKE '%intervenção%' AND id = LAG(id) OVER (PARTITION BY idcase, resource ORDER BY timestamp) GROUP BY idcase, resource HAVING COUNT(*) > 1
SELECT idcase, activity FROM event_log WHERE id = (SELECT MIN(id) FROM event_log WHERE id IN (SELECT id FROM event_log WHERE id = (SELECT id FROM event_log WHERE idcase =? AND activity =? ORDER BY timestamp LIMIT 1) ORDER BY timestamp LIMIT 1, 1));
SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%supervisor%';
SELECT DISTINCT resource FROM event_log WHERE activity = 'Declaração rejeitada pelo supervisor' ORDER BY resource;
Para responder à pergunta "Quais funcionários são responsáveis por orçamento?", você pode utilizar a seguinte consulta SQL: SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%responsável pelo orçamento%'; Essa consulta busca todos os registros na tabela "event_log" onde a atividade contém a frase "responsável pelo orçamento" e retorna os valores únicos da coluna "resource", que representam os funcionários responsáveis por orçamento. Se você quiser obter apenas os funcionários que são responsáveis por orçamento e também aprovaram declarações, você pode utilizar a seguinte consulta: SELECT DISTINCT resource FROM event_log WHERE activity LIKE '%responsável pelo orçamento%' AND activity LIKE '%Declaração aprovada%'; Essa consulta busca apenas os registros que atendem às duas condições: a atividade contém a frase "responsável pelo orçamento" e a atividade contém a frase "Declaração aprovada".
SELECT DISTINCT resource FROM event_log WHERE activity = 'budget'
