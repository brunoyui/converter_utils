SELECT COUNT(*) FROM event_log WHERE activity = 'end trip';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip' AND resource = 'James'
SELECT COUNT(DISTINCT "resource") AS "Number of different people" FROM "event_log";
Here is the SQL query to answer the question: SELECT * FROM event_log WHERE activity = 'Start trip' OR activity ='request payment'; This query will return all columns (`*`) from the `event_log` table where the `activity` is either 'Start trip' or'request payment'.
SELECT * FROM event_log WHERE activity IN ('Start trip', 'Request payment');
SELECT activity, COUNT(*) AS frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT idcase FROM ( SELECT idcase, COUNT(*) AS activity_count FROM event_log GROUP BY idcase ORDER BY COUNT(*) DESC ) AS subquery WHERE RANK() OVER (ORDER BY activity_count DESC) <= 10 ORDER BY idcase DESC;
SELECT * FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31';
SELECT * FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND idcase IS NOT NULL;
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31' GROUP BY activity ORDER BY count DESC;
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-12-31' GROUP BY activity ORDER BY count DESC;
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!= 'Request payment'
SELECT idcase FROM event_log WHERE resource = 'Sara' AND activity!= 'Request payment'
SELECT idcase FROM event_log WHERE activity = 'Declare' AND idcase IN ( SELECT idcase FROM event_log WHERE resource = 'Sara' ) AND id NOT IN ( SELECT id FROM event_log WHERE activity = 'Request payment' )
SELECT * FROM event_log WHERE idcase = 'declaration 143598' AND timestamp BETWEEN '2017-01-10' AND '2017-02-01';
Here is the SQL query to answer the question: SELECT activity, timestamp, resource, cost, idcase FROM event_log WHERE timestamp BETWEEN '2017-01-10' AND '2017-02-01' AND idcase = 'declaration 143598'; This query selects the `activity`, `timestamp`, `resource`, `cost`, and `idcase` columns from the `event_log` table where the `timestamp` is between '2017-01-10' and '2017-02-01' (inclusive), and the `idcase` is equal to 'declaration 143598'.
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY resource
SELECT idcase, COUNT(*) as num_declarations FROM event_log WHERE timestamp BETWEEN '2017-01-01' AND '2017-05-31' GROUP BY idcase
SELECT activity, COUNT(*) as frequency FROM event_log GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE EXTRACT(YEAR FROM timestamp) = 2017 AND idcase = 'Thomas' GROUP BY activity
SELECT activity, MAX(timestamp) AS last_occurrence FROM event_log GROUP BY activity
SELECT activity, MAX(timestamp) AS last_timestamp FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity
SELECT activity, timestamp, id FROM event_log ORDER BY timestamp;
SELECT DISTINCT resource FROM event_log WHERE timestamp NOT LIKE '%-01-2018%' AND resource = 'Charles'
SELECT idcase FROM event_log WHERE activity LIKE '%intervention%' AND resource LIKE '%Charles%' AND timestamp NOT LIKE '%2018-01-%' GROUP BY idcase
SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31';
SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT idcase FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2016-01-01' AND '2017-12-31'
SELECT activity, COUNT(*) as count FROM event_log WHERE idcase = 'declarations' GROUP BY activity ORDER BY count DESC;
SELECT idcase FROM event_log WHERE activity LIKE 'Permit%' GROUP BY idcase HAVING COUNT(*) > 1;
SELECT * FROM event_log WHERE activity = 'permit'
SELECT * FROM event_log WHERE activity = 'permit';
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE cost IN ( SELECT cost FROM event_log ORDER BY cost DESC LIMIT 5 )
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log ORDER BY cost DESC LIMIT 5;
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT COUNT(*), activity FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT * FROM event_log WHERE strftime('%Y-%m-%d', timestamp) IN ('2018-10-01', '2018-10-02');
SELECT * FROM event_log WHERE activity = 'End trip' AND strftime('%Y-%m-%d', timestamp)!= '2017-12-12';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02';
SELECT * FROM event_log WHERE idcase = 'declaration 143598' AND timestamp BETWEEN '2018-10-01' AND '2018-10-02'
SELECT activity, idcase FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02'
To answer the question, you would use the following SQL query: SELECT * FROM event_log WHERE timestamp BETWEEN '2018-10-01' AND '2018-10-02' This query will return all events that occurred between October 1st, 2018 and October 2nd, 2018.
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT idcase, activity FROM event_log GROUP BY idcase, activity HAVING COUNT(*) > 3
SELECT SUM(cost) AS total_cost FROM event_log WHERE idcase = 'declaration 56300'
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, count(*) as count FROM event_log WHERE timestamp < '2017-01-10' AND activity IN ( SELECT activity FROM event_log GROUP BY activity HAVING count(*) > 1 ) GROUP BY activity;
SELECT activity, count(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING count(*) > 1
SELECT activity, count(*) as count FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING count(*) > 1;
SELECT activity, COUNT(*) FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1;
SELECT activity, COUNT(*) as count FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity HAVING COUNT(*) > 1
SELECT activity, count(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING count(*) > 1
SELECT activity, count(*) as frequency FROM event_log WHERE timestamp < '2017-01-10' GROUP BY activity HAVING count(*) > 1
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp < '2017-10-01' GROUP BY activity ORDER BY frequency DESC;
SELECT resource, COUNT(*) as num_occurrences FROM event_log GROUP BY resource
SELECT resource, COUNT(*) AS num_interventions FROM event_log WHERE activity LIKE '%intervention%' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT resource, COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
Here is the SQL query to answer the question: SELECT resource, count(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource; This query will return a list of resources and the number of cases each resource was associated with between May 1st, 2017 and June 1st, 2017.
Here is the SQL query to answer the question: SELECT resource, count(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource This query will return the number of cases that occurred between May 1st, 2017 and June 1st, 2017 with which each resource was associated.
Here is the SQL query to answer the question: SELECT resource, count(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource This query will return the number of cases associated with each resource between May 1st, 2017 and June 1st, 2017.
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
Based on the provided SQL example, the correct answer would be: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource This SQL query will count the number of distinct cases (idcase) for each resource, where the event occurred between 5/1/2017 and 6/1/2017. The GROUP BY clause groups the results by the resource, and the COUNT(DISTINCT idcase) function counts the number of unique idcase values for each resource.
Based on the provided SQL example, the correct answer would be: SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource This SQL query will count the number of distinct cases (idcase) for each resource, considering only the events that occurred between 5/1/2017 and 6/1/2017. The GROUP BY clause groups the results by the resource column, and the COUNT(DISTINCT idcase) function counts the number of unique idcase values for each group.
SELECT resource, COUNT(DISTINCT idcase) AS num_declarations FROM event_log WHERE activity LIKE '%intervention%' AND timestamp BETWEEN '2017-05-01' AND '2017-06-01' GROUP BY resource
SELECT idcase, activity, timestamp FROM event_log WHERE timestamp < '2017-03-01' AND id = (SELECT MIN(id) FROM event_log WHERE activity = event_log.activity AND timestamp < '2017-03-01')
SELECT * FROM event_log WHERE timestamp < '2017-03-01';
SELECT idcase, timestamp FROM event_log WHERE activity = 'Start trip' AND timestamp BETWEEN '2017-03-01 00:00:00' AND '2017-03-31 23:59:59' ORDER BY timestamp ASC LIMIT 1;
SELECT resource FROM event_log GROUP BY resource HAVING COUNT(*) > 5
SELECT resource, idcase, COUNT(*) as count FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5
SELECT resource, idcase, COUNT(*) FROM event_log GROUP BY resource, idcase HAVING COUNT(*) > 5;
SELECT activity FROM ( SELECT activity, COUNT(*) AS frequency FROM event_log GROUP BY activity ORDER BY COUNT(*) DESC ) AS most_frequent_activities WHERE frequency = (SELECT MAX(frequency) FROM ( SELECT activity, COUNT(*) AS frequency FROM event_log GROUP BY activity ) AS frequency_table);
SELECT resource, COUNT(*) as count FROM event_log WHERE activity = 'Declaration final approved by supervisor' GROUP BY resource ORDER BY COUNT(*) DESC;
SELECT resource, COUNT(*) as frequency FROM event_log WHERE activity = 'Declaration final approved by supervisor' GROUP BY resource ORDER BY frequency DESC;
SELECT resource FROM event_log WHERE activity = 'Declaration final approved by supervisor' GROUP BY resource ORDER BY COUNT(*) DESC LIMIT 10;
SELECT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT idcase FROM event_log WHERE activity = 'Request payment' AND timestamp BETWEEN '2017-05-01 00:00:00' AND '2017-05-10 23:59:59';
SELECT * FROM event_log WHERE activity = 'permit rejected by director'
SELECT idcase, COUNT(*) FROM event_log WHERE activity LIKE '%determined%' GROUP BY idcase
SELECT COUNT(*), resource FROM event_log GROUP BY resource
SELECT DISTINCT e1.idcase FROM event_log e1 INNER JOIN (SELECT idcase, MIN(timestamp) as timestamp FROM event_log GROUP BY idcase ORDER BY timestamp) AS e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Declaration rejected by supervisor' ORDER BY e2.timestamp;
SELECT e1.idcase, e2.timestamp_end - e1.timestamp_start AS duration FROM (SELECT idcase, timestamp AS timestamp_start, LAG(timestamp) OVER (PARTITION BY idcase ORDER BY timestamp) AS timestamp_end FROM event_log WHERE activity = 'Declaration approved by supervisor') e1 WHERE e1.timestamp_end - e1.timestamp_start > 0 ORDER BY e1.idcase, e1.timestamp_start;
SELECT e1.idcase, e2.timestamp_start, e3.timestamp_end, TIMESTAMPDIFF(SECOND, e2.timestamp, e3.timestamp) AS duration FROM event_log e1 INNER JOIN (SELECT idcase, MIN(timestamp) as timestamp_start FROM event_log GROUP BY idcase) AS e2 ON e1.idcase = e2.idcase AND e1.activity = 'Declaration approved by supervisor' INNER JOIN (SELECT idcase, MAX(timestamp) as timestamp_end FROM event_log GROUP BY idcase) AS e3 ON e1.idcase = e3.idcase AND e1.activity = 'Declaration approved by supervisor' ORDER BY e2.timestamp_start;
SELECT DISTINCT e1.idcase FROM event_log e1 INNER JOIN ( SELECT idcase, MIN(timestamp) AS timestamp FROM event_log GROUP BY idcase ORDER BY timestamp ) AS e2 ON e1.idcase = e2.idcase WHERE e1.activity = 'Declaration rejected by supervisor' ORDER BY e2.timestamp;
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp;
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp;
SELECT e2.idcase, e2.resource, e2.timestamp FROM event_log AS e2 WHERE e2.activity = 'End trip' ORDER BY e2.resource;
SELECT e2.idcase AS "Code of the processed declaration", e2.timestamp AS "Date on which the trip ended", e1.resource AS "Employee who recorded the end of the trip" FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' ORDER BY e1.resource;
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12'
Here is the SQL query to answer the question: SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12' This query counts the number of distinct process instances (identified by the `idcase` column) that went through the 'end trip' activity between May 2nd, 2017 and May 12th, 2017.
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02 00:00:00' AND '2017-05-12 23:59:59'
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-02-05' AND '2017-12-05';
SELECT COUNT(*) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity = 'End trip' AND timestamp BETWEEN '2017-05-02' AND '2017-05-12';
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity = 'Request payment' GROUP BY idcase ORDER BY num_events ASC;
SELECT idcase, COUNT(*) as num_events FROM event_log WHERE activity LIKE '%request payment%' GROUP BY idcase ORDER BY num_events ASC;
SELECT timestamp FROM event_log WHERE activity IN ('end trip', 'closed') ORDER BY timestamp;
SELECT DISTINCT e2.timestamp FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity IN ('End trip', 'Reject declaration') ORDER BY e2.timestamp ASC;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS occurrences FROM event_log GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(*) AS activity_occurrences FROM event_log GROUP BY resource ORDER BY resource;
SELECT activity FROM event_log WHERE activity COLLATE NOCASE LIKE 'E%';
SELECT * FROM event_log WHERE activity LIKE 'E%';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT activity FROM event_log WHERE timestamp = '2018-04-12';
SELECT DISTINCT activity FROM event_log WHERE timestamp <= '2018-04-12'
SELECT COUNT(*) FROM event_log WHERE activity IN ('start trip', 'end trip');
SELECT COUNT(*) AS total_events FROM event_log WHERE activity IN ('Start trip', 'End trip');
SELECT activity, COUNT(*) as count FROM event_log GROUP BY activity
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) > 3;
SELECT e1.resource, e1.activity FROM event_log AS e1 WHERE e1.id IN ( SELECT MAX(e2.id) FROM event_log AS e2 GROUP BY e2.idcase )
SELECT resource, COUNT(*) as count FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) AS num_events FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) as num_events FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) as count FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) as events_amount FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT resource, COUNT(*) AS events_amount FROM event_log WHERE activity!= 'End trip' GROUP BY resource
SELECT COUNT(DISTINCT idcase) FROM event_log WHERE activity ='request payment';
SELECT resource, COUNT(*) FROM event_log WHERE activity = (SELECT MIN(activity) FROM event_log) GROUP BY resource
SELECT idcase, strftime('%s', MAX(timestamp)) - strftime('%s', MIN(timestamp)) AS duration FROM event_log WHERE idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(*) IN ( SELECT COUNT(*) FROM event_log GROUP BY idcase HAVING COUNT(*) >= 20 ORDER BY COUNT(*) DESC LIMIT 5 ) GROUP BY idcase;
SELECT e1.idcase, e1.resource, COUNT(*) as count FROM event_log e1 WHERE e1.activity = 'Declaration rejected by supervisor' GROUP BY e1.idcase, e1.resource ORDER BY e1.idcase, e1.resource;
SELECT e1.idcase, e1.resource, COUNT(*) as count FROM event_log e1 WHERE e1.activity = 'Declaration rejected by supervisor' GROUP BY e1.idcase, e1.resource ORDER BY e1.idcase, e1.resource;
WITH sorted_events AS ( SELECT activity, timestamp FROM event_log WHERE activity LIKE 'R%' OR activity LIKE 'D%' ORDER BY activity, timestamp ) SELECT * FROM sorted_events WHERE activity LIKE 'R%' AND EXISTS ( SELECT 1 FROM sorted_events AS prev_event WHERE prev_event.activity LIKE 'D%' AND prev_event.timestamp < sorted_events.timestamp )
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30'
SELECT DISTINCT activity FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT activity, COUNT(DISTINCT idcase) FROM event_log WHERE timestamp BETWEEN '2018-01-01' AND '2018-06-30' GROUP BY activity;
Here is the SQL query to answer the question: SELECT activity, COUNT(*) AS count FROM event_log WHERE timestamp = '2018-03-12' AND idcase IS NOT NULL GROUP BY activity ORDER BY count DESC; This query: 1. Filters the event log to only include rows where the timestamp is '2018-03-12' (March 12, 2018) and the idcase is not null (i.e., it's a completed case). 2. Groups the remaining rows by the activity column. 3. Counts the number of rows in each group using the COUNT(*) function, and assigns the result to a column named count. 4. Orders the results by the count column in descending order (so the activities that appear most frequently are listed first). The resulting list will show each activity and the number of times it appears in the subset of cases completed on March 12, 2018.
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp = '2018-03-12' AND activity!= 'End trip' GROUP BY activity ORDER BY num_cases DESC;
SELECT activity, COUNT(DISTINCT idcase) AS num_cases FROM event_log WHERE timestamp = (SELECT MAX(timestamp) FROM event_log WHERE strftime('%Y-%m-%d', timestamp) = '2018-03-12') GROUP BY activity
SELECT activity, COUNT(*) as num_cases FROM event_log WHERE strftime('%Y-%m-%d', timestamp) = '2018-03-12' GROUP BY activity
Based on the provided database schema and SQL examples, the answer to the second question would be: SELECT COUNT(DISTINCT idcase), activity FROM event_log WHERE timestamp = '2018-03-12' GROUP BY activity This SQL query counts the number of distinct idcase values (which represents the number of declarations processed) for each activity type on March 12, 2018.
SELECT activity, COUNT(*) AS num_declarations FROM event_log WHERE timestamp BETWEEN '2018-03-12 00:00:00' AND '2018-03-12 23:59:59' GROUP BY activity
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' ) AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND (activity = 'Request payment' OR activity = 'Payment handled') )
SELECT e1.idcase FROM (SELECT DISTINCT idcase FROM event_log WHERE activity IN ('request payment', 'payment handled')) AS e1 LEFT JOIN event_log AS e ON e1.idcase = e.idcase WHERE e.id IS NULL
SELECT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity IN ('Request payment', 'Payment handled') ) GROUP BY idcase HAVING COUNT(*) = 0;
SELECT DISTINCT idcase FROM event_log WHERE idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' OR activity = 'Payment handled' )
SELECT e.idcase FROM event_log AS e WHERE e.activity NOT IN ('Request payment', 'payment handled') GROUP BY e.idcase HAVING NOT EXISTS ( SELECT 1 FROM event_log AS e1 WHERE e1.idcase = e.idcase AND e1.activity IN ('Request payment', 'payment handled') )
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp
SELECT resource, COUNT(*) as performance_count FROM event_log WHERE activity = 'Declaration saved by employee' GROUP BY resource ORDER BY resource;
SELECT resource, COUNT(DISTINCT activity) FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_activities FROM event_log GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_actions FROM event_log WHERE activity LIKE '%trip%' OR activity LIKE '%payment%' GROUP BY resource
SELECT resource, COUNT(DISTINCT activity) AS num_actions FROM event_log WHERE activity LIKE '%trip%' OR activity LIKE '%payment%' GROUP BY resource
WITH activity_counts AS ( SELECT idcase, activity, ROW_NUMBER() OVER (PARTITION BY idcase ORDER BY timestamp) AS row_num, COUNT(*) OVER (PARTITION BY idcase) AS total_activities FROM event_log WHERE activity!= 'End trip' ) SELECT idcase, total_activities FROM activity_counts WHERE row_num = total_activities
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp BETWEEN '2018-01-01' AND '2018-07-31';
SELECT DISTINCT activity FROM event_log WHERE resource = 'Thomas' AND timestamp >= '2018-01-01 00:00:00' AND timestamp <= '2018-06-30 23:59:59' ORDER BY activity;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY timestamp, idcase;
SELECT idcase, timestamp FROM event_log WHERE activity = 'Declaration rejected by supervisor' ORDER BY idcase, timestamp
SELECT pi.start_date, el.activity FROM event_log el JOIN process_instances pi ON el.idcase = pi.idcase WHERE el.activity = 'Declaration rejected by supervisor' ORDER BY pi.start_date;
SELECT pi.start_time, pi.id AS process_instance_id FROM event_log el JOIN process_instances pi ON el.idcase = pi.id WHERE el.activity = 'Declaration rejected by supervisor' ORDER BY pi.start_time ASC;
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource
SELECT COUNT(DISTINCT idcase), resource FROM event_log WHERE activity = 'Declaration rejected by supervisor' GROUP BY resource
SELECT idcase FROM event_log WHERE activity = 'End trip' AND id NOT IN ( SELECT id FROM event_log WHERE activity IN ('request payment', 'payment handled') ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1
SELECT idcase FROM event_log WHERE activity = 'End trip' AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' UNION SELECT idcase FROM event_log WHERE activity = 'Payment handled' )
SELECT idcase FROM event_log WHERE activity = 'End trip' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('request payment', 'payment handled') ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT idcase FROM event_log WHERE activity = 'End trip' AND idcase IN ( SELECT idcase FROM event_log GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1 ) AND idcase NOT IN ( SELECT idcase FROM event_log WHERE activity = 'Request payment' INTERSECT SELECT idcase FROM event_log WHERE activity = 'Payment handled' )
SELECT idcase FROM event_log WHERE activity = 'End trip' AND id IN ( SELECT id FROM event_log GROUP BY id HAVING COUNT(DISTINCT resource) > 1 ) AND id NOT IN ( SELECT id FROM event_log WHERE activity = 'Request payment' UNION SELECT id FROM event_log WHERE activity = 'Payment handled' )
SELECT idcase FROM event_log WHERE activity = 'End trip' AND NOT EXISTS ( SELECT 1 FROM event_log WHERE idcase = event_log.idcase AND activity IN ('request payment', 'payment handled') ) GROUP BY idcase HAVING COUNT(DISTINCT resource) > 1;
SELECT DISTINCT idcase FROM event_log WHERE activity = 'End trip' AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Request payment') AND idcase NOT IN (SELECT idcase FROM event_log WHERE activity = 'Payment handled');
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log GROUP BY activity HAVING COUNT(*) >= 100;
SELECT activity FROM event_log WHERE activity LIKE '%processing declarations%' GROUP BY activity HAVING COUNT(*) >= 100;
SELECT DISTINCT e1.idcase FROM event_log AS e1 WHERE EXISTS ( SELECT 1 FROM event_log AS e2 WHERE e2.activity = 'End trip' AND e1.idcase = e2.idcase ) ORDER BY e1.idcase;
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp
SELECT e1.activity, e1.resource, e1.idcase FROM event_log AS e1 INNER JOIN event_log AS e2 ON e1.idcase = e2.idcase WHERE e2.activity = 'End trip' AND e1.timestamp > e2.timestamp
SELECT DISTINCT idcase FROM event_log WHERE timestamp = '2018-03-31' AND idcase IS NOT NULL EXCEPT SELECT idcase FROM event_log WHERE timestamp = '2018-03-31'
SELECT activity, count(*) FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity;
SELECT activity, COUNT(*) AS frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
SELECT activity, COUNT(*) as frequency FROM event_log WHERE timestamp BETWEEN '2018-12-01' AND '2018-12-05' GROUP BY activity ORDER BY frequency DESC;
